
F303K_arm_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003050  08003050  00013050  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000368  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000036c  2000036c  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015ff7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003010  00000000  00000000  0003602b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005630  00000000  00000000  0003903b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000888  00000000  00000000  0003e670  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b38  00000000  00000000  0003eef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000060f5  00000000  00000000  0003fa30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000031f9  00000000  00000000  00045b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00048d1e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001818  00000000  00000000  00048d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003038 	.word	0x08003038

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08003038 	.word	0x08003038

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 fc88 	bl	8000aec <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 fc42 	bl	8000a6c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4a07      	ldr	r2, [pc, #28]	; (8000210 <HAL_Init+0x20>)
{
 80001f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 fc23 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffe0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000208:	f002 fafe 	bl	8002808 <HAL_MspInit>
}
 800020c:	2000      	movs	r0, #0
 800020e:	bd08      	pop	{r3, pc}
 8000210:	40022000 	.word	0x40022000

08000214 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <HAL_IncTick+0xc>)
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000028 	.word	0x20000028

08000224 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <HAL_GetTick+0x8>)
 8000226:	6818      	ldr	r0, [r3, #0]
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000028 	.word	0x20000028

08000230 <HAL_ADC_ConvCpltCallback>:
 8000230:	4770      	bx	lr

08000232 <HAL_ADC_ConvHalfCpltCallback>:
 8000232:	4770      	bx	lr

08000234 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000234:	4770      	bx	lr

08000236 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000236:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000238:	6803      	ldr	r3, [r0, #0]
{
 800023a:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800023c:	6898      	ldr	r0, [r3, #8]
 800023e:	f000 0003 	and.w	r0, r0, #3
 8000242:	2801      	cmp	r0, #1
 8000244:	d001      	beq.n	800024a <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000246:	2000      	movs	r0, #0
 8000248:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	07d2      	lsls	r2, r2, #31
 800024e:	d5fa      	bpl.n	8000246 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000250:	689a      	ldr	r2, [r3, #8]
 8000252:	f002 020d 	and.w	r2, r2, #13
 8000256:	2a01      	cmp	r2, #1
 8000258:	d11b      	bne.n	8000292 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800025a:	689a      	ldr	r2, [r3, #8]
 800025c:	f042 0202 	orr.w	r2, r2, #2
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	2203      	movs	r2, #3
 8000264:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000266:	f7ff ffdd 	bl	8000224 <HAL_GetTick>
 800026a:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800026c:	6823      	ldr	r3, [r4, #0]
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	07db      	lsls	r3, r3, #31
 8000272:	d5e8      	bpl.n	8000246 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000274:	f7ff ffd6 	bl	8000224 <HAL_GetTick>
 8000278:	1b40      	subs	r0, r0, r5
 800027a:	2802      	cmp	r0, #2
 800027c:	d9f6      	bls.n	800026c <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800027e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000280:	f043 0310 	orr.w	r3, r3, #16
 8000284:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000286:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800028e:	2001      	movs	r0, #1
 8000290:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000292:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000294:	f043 0310 	orr.w	r3, r3, #16
 8000298:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800029a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80002a2:	bd38      	pop	{r3, r4, r5, pc}

080002a4 <ADC_Enable>:
{
 80002a4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002a6:	6803      	ldr	r3, [r0, #0]
 80002a8:	689a      	ldr	r2, [r3, #8]
 80002aa:	f002 0203 	and.w	r2, r2, #3
 80002ae:	2a01      	cmp	r2, #1
{
 80002b0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002b2:	d104      	bne.n	80002be <ADC_Enable+0x1a>
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	07d2      	lsls	r2, r2, #31
 80002b8:	d501      	bpl.n	80002be <ADC_Enable+0x1a>
  return HAL_OK;
 80002ba:	2000      	movs	r0, #0
 80002bc:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80002be:	6899      	ldr	r1, [r3, #8]
 80002c0:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <ADC_Enable+0x58>)
 80002c2:	4211      	tst	r1, r2
 80002c4:	d10f      	bne.n	80002e6 <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 80002c6:	689a      	ldr	r2, [r3, #8]
 80002c8:	f042 0201 	orr.w	r2, r2, #1
 80002cc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80002ce:	f7ff ffa9 	bl	8000224 <HAL_GetTick>
 80002d2:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80002d4:	6823      	ldr	r3, [r4, #0]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	d4ee      	bmi.n	80002ba <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80002dc:	f7ff ffa2 	bl	8000224 <HAL_GetTick>
 80002e0:	1b40      	subs	r0, r0, r5
 80002e2:	2802      	cmp	r0, #2
 80002e4:	d9f6      	bls.n	80002d4 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002e8:	f043 0310 	orr.w	r3, r3, #16
 80002ec:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd38      	pop	{r3, r4, r5, pc}
 80002fa:	bf00      	nop
 80002fc:	8000003f 	.word	0x8000003f

08000300 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000300:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000302:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000308:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800030a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8000312:	f7ff bf8f 	b.w	8000234 <HAL_ADC_ErrorCallback>

08000316 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000316:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000318:	f7ff bf8b 	b.w	8000232 <HAL_ADC_ConvHalfCpltCallback>

0800031c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800031c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800031e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000320:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000324:	d118      	bne.n	8000358 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800032c:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	68d2      	ldr	r2, [r2, #12]
 8000332:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000336:	d10c      	bne.n	8000352 <ADC_DMAConvCplt+0x36>
 8000338:	69da      	ldr	r2, [r3, #28]
 800033a:	b952      	cbnz	r2, 8000352 <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800033c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800033e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000342:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000346:	04d2      	lsls	r2, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000348:	bf5e      	ittt	pl
 800034a:	6c5a      	ldrpl	r2, [r3, #68]	; 0x44
 800034c:	f042 0201 	orrpl.w	r2, r2, #1
 8000350:	645a      	strpl	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff bf6c 	b.w	8000230 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4718      	bx	r3
	...

08000360 <HAL_ADC_Init>:
{
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000364:	2300      	movs	r3, #0
 8000366:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000368:	4604      	mov	r4, r0
 800036a:	2800      	cmp	r0, #0
 800036c:	f000 80e3 	beq.w	8000536 <HAL_ADC_Init+0x1d6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000370:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000372:	06d5      	lsls	r5, r2, #27
 8000374:	f100 80cc 	bmi.w	8000510 <HAL_ADC_Init+0x1b0>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000378:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800037a:	2b00      	cmp	r3, #0
 800037c:	f000 8092 	beq.w	80004a4 <HAL_ADC_Init+0x144>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000380:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000382:	6823      	ldr	r3, [r4, #0]
 8000384:	689a      	ldr	r2, [r3, #8]
 8000386:	00d2      	lsls	r2, r2, #3
 8000388:	d502      	bpl.n	8000390 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800038a:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	d50a      	bpl.n	80003a6 <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000390:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000392:	f023 0312 	bic.w	r3, r3, #18
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800039c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80003a4:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003a8:	06de      	lsls	r6, r3, #27
 80003aa:	f100 80be 	bmi.w	800052a <HAL_ADC_Init+0x1ca>
 80003ae:	2800      	cmp	r0, #0
 80003b0:	f040 80bb 	bne.w	800052a <HAL_ADC_Init+0x1ca>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80003b4:	6823      	ldr	r3, [r4, #0]
 80003b6:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80003b8:	f011 0104 	ands.w	r1, r1, #4
 80003bc:	f040 80b5 	bne.w	800052a <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 80003c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80003c2:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80003c6:	f042 0202 	orr.w	r2, r2, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80003ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80003ce:	6462      	str	r2, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80003d0:	bf0c      	ite	eq
 80003d2:	4a5a      	ldreq	r2, [pc, #360]	; (800053c <HAL_ADC_Init+0x1dc>)
 80003d4:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 80003d8:	9201      	str	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80003da:	689a      	ldr	r2, [r3, #8]
 80003dc:	f002 0203 	and.w	r2, r2, #3
 80003e0:	2a01      	cmp	r2, #1
 80003e2:	d102      	bne.n	80003ea <HAL_ADC_Init+0x8a>
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	07d5      	lsls	r5, r2, #31
 80003e8:	d410      	bmi.n	800040c <HAL_ADC_Init+0xac>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80003ea:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80003ec:	b13a      	cbz	r2, 80003fe <HAL_ADC_Init+0x9e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80003ee:	6895      	ldr	r5, [r2, #8]
 80003f0:	f005 0503 	and.w	r5, r5, #3
 80003f4:	2d01      	cmp	r5, #1
 80003f6:	d102      	bne.n	80003fe <HAL_ADC_Init+0x9e>
 80003f8:	6812      	ldr	r2, [r2, #0]
 80003fa:	07d2      	lsls	r2, r2, #31
 80003fc:	d406      	bmi.n	800040c <HAL_ADC_Init+0xac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80003fe:	4d50      	ldr	r5, [pc, #320]	; (8000540 <HAL_ADC_Init+0x1e0>)
 8000400:	6866      	ldr	r6, [r4, #4]
 8000402:	68aa      	ldr	r2, [r5, #8]
 8000404:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000408:	4332      	orrs	r2, r6
 800040a:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800040c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800040e:	68a6      	ldr	r6, [r4, #8]
 8000410:	69e5      	ldr	r5, [r4, #28]
 8000412:	2a01      	cmp	r2, #1
 8000414:	68e2      	ldr	r2, [r4, #12]
 8000416:	ea42 0206 	orr.w	r2, r2, r6
 800041a:	bf18      	it	ne
 800041c:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 8000420:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8000424:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000426:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000428:	2901      	cmp	r1, #1
 800042a:	d107      	bne.n	800043c <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800042c:	2d00      	cmp	r5, #0
 800042e:	d171      	bne.n	8000514 <HAL_ADC_Init+0x1b4>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000430:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000432:	3901      	subs	r1, #1
 8000434:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8000438:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800043c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800043e:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000440:	bf1e      	ittt	ne
 8000442:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 8000444:	4329      	orrne	r1, r5
 8000446:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000448:	6899      	ldr	r1, [r3, #8]
 800044a:	f011 0f0c 	tst.w	r1, #12
 800044e:	d10b      	bne.n	8000468 <HAL_ADC_Init+0x108>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000450:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000452:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000454:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000458:	f021 0102 	bic.w	r1, r1, #2
 800045c:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800045e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000460:	0049      	lsls	r1, r1, #1
 8000462:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8000466:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8000468:	68dd      	ldr	r5, [r3, #12]
 800046a:	4936      	ldr	r1, [pc, #216]	; (8000544 <HAL_ADC_Init+0x1e4>)
 800046c:	4029      	ands	r1, r5
 800046e:	430a      	orrs	r2, r1
 8000470:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000472:	6922      	ldr	r2, [r4, #16]
 8000474:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000476:	bf05      	ittet	eq
 8000478:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 800047a:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800047c:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800047e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000482:	bf06      	itte	eq
 8000484:	f021 010f 	biceq.w	r1, r1, #15
 8000488:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800048a:	f022 020f 	bicne.w	r2, r2, #15
 800048e:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000490:	2300      	movs	r3, #0
 8000492:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000494:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000496:	f023 0303 	bic.w	r3, r3, #3
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	6463      	str	r3, [r4, #68]	; 0x44
}
 80004a0:	b016      	add	sp, #88	; 0x58
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 80004a4:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80004a6:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80004a8:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80004aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80004ae:	f001 fc41 	bl	8001d34 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80004b2:	6823      	ldr	r3, [r4, #0]
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	00d8      	lsls	r0, r3, #3
 80004b8:	f53f af62 	bmi.w	8000380 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 80004bc:	4620      	mov	r0, r4
 80004be:	f7ff feba 	bl	8000236 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80004c4:	06d1      	lsls	r1, r2, #27
 80004c6:	f53f af5c 	bmi.w	8000382 <HAL_ADC_Init+0x22>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	f47f af59 	bne.w	8000382 <HAL_ADC_Init+0x22>
          ADC_STATE_CLR_SET(hadc->State,
 80004d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80004d6:	f023 0302 	bic.w	r3, r3, #2
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80004e0:	6823      	ldr	r3, [r4, #0]
 80004e2:	689a      	ldr	r2, [r3, #8]
 80004e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80004e8:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80004ea:	689a      	ldr	r2, [r3, #8]
 80004ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004f0:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_ADC_Init+0x1e8>)
 80004f4:	4a15      	ldr	r2, [pc, #84]	; (800054c <HAL_ADC_Init+0x1ec>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80004fc:	230a      	movs	r3, #10
 80004fe:	4353      	muls	r3, r2
            wait_loop_index--;
 8000500:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000502:	9b00      	ldr	r3, [sp, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	f43f af3b 	beq.w	8000380 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 800050a:	9b00      	ldr	r3, [sp, #0]
 800050c:	3b01      	subs	r3, #1
 800050e:	e7f7      	b.n	8000500 <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000510:	4618      	mov	r0, r3
 8000512:	e748      	b.n	80003a6 <HAL_ADC_Init+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 8000514:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000516:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 800051a:	f041 0120 	orr.w	r1, r1, #32
 800051e:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000520:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000522:	f041 0101 	orr.w	r1, r1, #1
 8000526:	64a1      	str	r1, [r4, #72]	; 0x48
 8000528:	e788      	b.n	800043c <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 800052a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800052c:	f023 0312 	bic.w	r3, r3, #18
 8000530:	f043 0310 	orr.w	r3, r3, #16
 8000534:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000536:	2001      	movs	r0, #1
 8000538:	e7b2      	b.n	80004a0 <HAL_ADC_Init+0x140>
 800053a:	bf00      	nop
 800053c:	50000100 	.word	0x50000100
 8000540:	50000300 	.word	0x50000300
 8000544:	fff0c007 	.word	0xfff0c007
 8000548:	20000000 	.word	0x20000000
 800054c:	000f4240 	.word	0x000f4240

08000550 <HAL_ADC_Start_DMA>:
{
 8000550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000554:	6803      	ldr	r3, [r0, #0]
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	f013 0304 	ands.w	r3, r3, #4
{
 800055c:	4604      	mov	r4, r0
 800055e:	460f      	mov	r7, r1
 8000560:	4690      	mov	r8, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000562:	d171      	bne.n	8000648 <HAL_ADC_Start_DMA+0xf8>
    __HAL_LOCK(hadc);
 8000564:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000568:	2a01      	cmp	r2, #1
 800056a:	d06d      	beq.n	8000648 <HAL_ADC_Start_DMA+0xf8>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800056c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800065c <HAL_ADC_Start_DMA+0x10c>
 8000570:	f8d9 5008 	ldr.w	r5, [r9, #8]
    __HAL_LOCK(hadc);
 8000574:	2601      	movs	r6, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000576:	f015 051f 	ands.w	r5, r5, #31
    __HAL_LOCK(hadc);
 800057a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800057e:	d160      	bne.n	8000642 <HAL_ADC_Start_DMA+0xf2>
      tmp_hal_status = ADC_Enable(hadc);
 8000580:	f7ff fe90 	bl	80002a4 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000584:	4606      	mov	r6, r0
 8000586:	2800      	cmp	r0, #0
 8000588:	d158      	bne.n	800063c <HAL_ADC_Start_DMA+0xec>
        ADC_STATE_CLR_SET(hadc->State,
 800058a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800058c:	6821      	ldr	r1, [r4, #0]
 800058e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8000592:	f020 0001 	bic.w	r0, r0, #1
 8000596:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800059a:	6460      	str	r0, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800059c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80005a0:	f013 0f1f 	tst.w	r3, #31
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005a6:	d002      	beq.n	80005ae <HAL_ADC_Start_DMA+0x5e>
 80005a8:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80005ac:	d134      	bne.n	8000618 <HAL_ADC_Start_DMA+0xc8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80005b2:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80005b4:	68cb      	ldr	r3, [r1, #12]
 80005b6:	019a      	lsls	r2, r3, #6
 80005b8:	d505      	bpl.n	80005c6 <HAL_ADC_Start_DMA+0x76>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80005ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005c4:	6463      	str	r3, [r4, #68]	; 0x44
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005ca:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80005ce:	bf1c      	itt	ne
 80005d0:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 80005d2:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80005d6:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 80005d8:	2300      	movs	r3, #0
 80005da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <HAL_ADC_Start_DMA+0xfc>)
 80005e0:	6283      	str	r3, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <HAL_ADC_Start_DMA+0x100>)
 80005e4:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <HAL_ADC_Start_DMA+0x104>)
 80005e8:	6303      	str	r3, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005ea:	231c      	movs	r3, #28
 80005ec:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80005ee:	684b      	ldr	r3, [r1, #4]
 80005f0:	f043 0310 	orr.w	r3, r3, #16
 80005f4:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80005f6:	68cb      	ldr	r3, [r1, #12]
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	60cb      	str	r3, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80005fe:	463a      	mov	r2, r7
 8000600:	4643      	mov	r3, r8
 8000602:	3140      	adds	r1, #64	; 0x40
 8000604:	f000 face 	bl	8000ba4 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000608:	6822      	ldr	r2, [r4, #0]
 800060a:	6893      	ldr	r3, [r2, #8]
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6093      	str	r3, [r2, #8]
}
 8000612:	4630      	mov	r0, r6
 8000614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_ADC_Start_DMA+0x108>)
 8000620:	4299      	cmp	r1, r3
 8000622:	d1d0      	bne.n	80005c6 <HAL_ADC_Start_DMA+0x76>
 8000624:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	019b      	lsls	r3, r3, #6
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800062c:	bf41      	itttt	mi
 800062e:	6c60      	ldrmi	r0, [r4, #68]	; 0x44
 8000630:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000634:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000638:	6460      	strmi	r0, [r4, #68]	; 0x44
 800063a:	e7c4      	b.n	80005c6 <HAL_ADC_Start_DMA+0x76>
        __HAL_UNLOCK(hadc);
 800063c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 8000640:	e7e7      	b.n	8000612 <HAL_ADC_Start_DMA+0xc2>
      __HAL_UNLOCK(hadc);
 8000642:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8000646:	e7e4      	b.n	8000612 <HAL_ADC_Start_DMA+0xc2>
    tmp_hal_status = HAL_BUSY;
 8000648:	2602      	movs	r6, #2
 800064a:	e7e2      	b.n	8000612 <HAL_ADC_Start_DMA+0xc2>
 800064c:	0800031d 	.word	0x0800031d
 8000650:	08000317 	.word	0x08000317
 8000654:	08000301 	.word	0x08000301
 8000658:	50000100 	.word	0x50000100
 800065c:	50000300 	.word	0x50000300

08000660 <HAL_ADC_ConfigChannel>:
{
 8000660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000662:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000664:	2300      	movs	r3, #0
 8000666:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 8000668:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800066c:	2b01      	cmp	r3, #1
{
 800066e:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8000670:	f000 8151 	beq.w	8000916 <HAL_ADC_ConfigChannel+0x2b6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000674:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000676:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000678:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800067a:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800067c:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 800067e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000682:	f100 8143 	bmi.w	800090c <HAL_ADC_ConfigChannel+0x2ac>
    if (sConfig->Rank < 5U)
 8000686:	6848      	ldr	r0, [r1, #4]
 8000688:	680c      	ldr	r4, [r1, #0]
 800068a:	2804      	cmp	r0, #4
 800068c:	f04f 0206 	mov.w	r2, #6
 8000690:	d831      	bhi.n	80006f6 <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 8000692:	4342      	muls	r2, r0
 8000694:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8000696:	201f      	movs	r0, #31
 8000698:	4090      	lsls	r0, r2
 800069a:	ea27 0000 	bic.w	r0, r7, r0
 800069e:	fa04 f202 	lsl.w	r2, r4, r2
 80006a2:	4302      	orrs	r2, r0
 80006a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80006a6:	689a      	ldr	r2, [r3, #8]
 80006a8:	f012 0f0c 	tst.w	r2, #12
 80006ac:	d162      	bne.n	8000774 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80006ae:	2c09      	cmp	r4, #9
 80006b0:	ea4f 0244 	mov.w	r2, r4, lsl #1
 80006b4:	688f      	ldr	r7, [r1, #8]
 80006b6:	d946      	bls.n	8000746 <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80006b8:	4422      	add	r2, r4
 80006ba:	6998      	ldr	r0, [r3, #24]
 80006bc:	3a1e      	subs	r2, #30
 80006be:	f04f 0e07 	mov.w	lr, #7
 80006c2:	fa0e fe02 	lsl.w	lr, lr, r2
 80006c6:	ea20 000e 	bic.w	r0, r0, lr
 80006ca:	fa07 f202 	lsl.w	r2, r7, r2
 80006ce:	4302      	orrs	r2, r0
 80006d0:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80006d2:	68da      	ldr	r2, [r3, #12]
 80006d4:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 80006d8:	694a      	ldr	r2, [r1, #20]
 80006da:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80006de:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 80006e2:	690a      	ldr	r2, [r1, #16]
 80006e4:	3a01      	subs	r2, #1
 80006e6:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 80006ea:	2a03      	cmp	r2, #3
 80006ec:	d873      	bhi.n	80007d6 <HAL_ADC_ConfigChannel+0x176>
 80006ee:	e8df f002 	tbb	[pc, r2]
 80006f2:	5137      	.short	0x5137
 80006f4:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 80006f6:	2809      	cmp	r0, #9
 80006f8:	d80b      	bhi.n	8000712 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80006fa:	4342      	muls	r2, r0
 80006fc:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80006fe:	3a1e      	subs	r2, #30
 8000700:	201f      	movs	r0, #31
 8000702:	4090      	lsls	r0, r2
 8000704:	ea27 0000 	bic.w	r0, r7, r0
 8000708:	fa04 f202 	lsl.w	r2, r4, r2
 800070c:	4302      	orrs	r2, r0
 800070e:	635a      	str	r2, [r3, #52]	; 0x34
 8000710:	e7c9      	b.n	80006a6 <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8000712:	280e      	cmp	r0, #14
 8000714:	d80b      	bhi.n	800072e <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000716:	4342      	muls	r2, r0
 8000718:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800071a:	3a3c      	subs	r2, #60	; 0x3c
 800071c:	201f      	movs	r0, #31
 800071e:	4090      	lsls	r0, r2
 8000720:	ea27 0000 	bic.w	r0, r7, r0
 8000724:	fa04 f202 	lsl.w	r2, r4, r2
 8000728:	4302      	orrs	r2, r0
 800072a:	639a      	str	r2, [r3, #56]	; 0x38
 800072c:	e7bb      	b.n	80006a6 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800072e:	4342      	muls	r2, r0
 8000730:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8000732:	3a5a      	subs	r2, #90	; 0x5a
 8000734:	201f      	movs	r0, #31
 8000736:	4090      	lsls	r0, r2
 8000738:	ea27 0000 	bic.w	r0, r7, r0
 800073c:	fa04 f202 	lsl.w	r2, r4, r2
 8000740:	4302      	orrs	r2, r0
 8000742:	63da      	str	r2, [r3, #60]	; 0x3c
 8000744:	e7af      	b.n	80006a6 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000746:	6958      	ldr	r0, [r3, #20]
 8000748:	4422      	add	r2, r4
 800074a:	f04f 0e07 	mov.w	lr, #7
 800074e:	fa0e fe02 	lsl.w	lr, lr, r2
 8000752:	ea20 000e 	bic.w	r0, r0, lr
 8000756:	fa07 f202 	lsl.w	r2, r7, r2
 800075a:	4302      	orrs	r2, r0
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	e7b8      	b.n	80006d2 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000760:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000762:	4f7a      	ldr	r7, [pc, #488]	; (800094c <HAL_ADC_ConfigChannel+0x2ec>)
 8000764:	4017      	ands	r7, r2
 8000766:	ea47 020c 	orr.w	r2, r7, ip
 800076a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800076e:	ea42 020e 	orr.w	r2, r2, lr
 8000772:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000774:	689a      	ldr	r2, [r3, #8]
 8000776:	f002 0203 	and.w	r2, r2, #3
 800077a:	2a01      	cmp	r2, #1
 800077c:	f040 80cd 	bne.w	800091a <HAL_ADC_ConfigChannel+0x2ba>
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	07d0      	lsls	r0, r2, #31
 8000784:	f140 80c9 	bpl.w	800091a <HAL_ADC_ConfigChannel+0x2ba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000788:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800078a:	2300      	movs	r3, #0
 800078c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8000790:	b017      	add	sp, #92	; 0x5c
 8000792:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000794:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000796:	4f6d      	ldr	r7, [pc, #436]	; (800094c <HAL_ADC_ConfigChannel+0x2ec>)
 8000798:	4017      	ands	r7, r2
 800079a:	ea47 020c 	orr.w	r2, r7, ip
 800079e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80007a2:	ea42 020e 	orr.w	r2, r2, lr
 80007a6:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80007a8:	e7e4      	b.n	8000774 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80007aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80007ac:	4867      	ldr	r0, [pc, #412]	; (800094c <HAL_ADC_ConfigChannel+0x2ec>)
 80007ae:	4010      	ands	r0, r2
 80007b0:	ea40 020c 	orr.w	r2, r0, ip
 80007b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80007b8:	ea42 020e 	orr.w	r2, r2, lr
 80007bc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80007be:	e7d9      	b.n	8000774 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80007c0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80007c2:	4a62      	ldr	r2, [pc, #392]	; (800094c <HAL_ADC_ConfigChannel+0x2ec>)
 80007c4:	4002      	ands	r2, r0
 80007c6:	ea42 020c 	orr.w	r2, r2, ip
 80007ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80007ce:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80007d2:	66da      	str	r2, [r3, #108]	; 0x6c
 80007d4:	e7ce      	b.n	8000774 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80007d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007d8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80007dc:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80007de:	bf02      	ittt	eq
 80007e0:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 80007e2:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80007e6:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80007e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80007ea:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80007ee:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80007f0:	bf02      	ittt	eq
 80007f2:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 80007f4:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80007f8:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80007fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80007fc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000800:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000802:	bf02      	ittt	eq
 8000804:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000806:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800080a:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800080c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800080e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000812:	4594      	cmp	ip, r2
 8000814:	d1ae      	bne.n	8000774 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000816:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000818:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800081c:	e7d9      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800081e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000822:	2101      	movs	r1, #1
 8000824:	40a1      	lsls	r1, r4
 8000826:	ea22 0201 	bic.w	r2, r2, r1
 800082a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800082e:	2c10      	cmp	r4, #16
 8000830:	d143      	bne.n	80008ba <HAL_ADC_ConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000832:	4a47      	ldr	r2, [pc, #284]	; (8000950 <HAL_ADC_ConfigChannel+0x2f0>)
 8000834:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000836:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800083a:	d1a5      	bne.n	8000788 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800083c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000840:	bf0c      	ite	eq
 8000842:	4a44      	ldreq	r2, [pc, #272]	; (8000954 <HAL_ADC_ConfigChannel+0x2f4>)
 8000844:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000848:	9201      	str	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	f002 0203 	and.w	r2, r2, #3
 8000850:	2a01      	cmp	r2, #1
 8000852:	d102      	bne.n	800085a <HAL_ADC_ConfigChannel+0x1fa>
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	07d1      	lsls	r1, r2, #31
 8000858:	d452      	bmi.n	8000900 <HAL_ADC_ConfigChannel+0x2a0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800085a:	9a01      	ldr	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800085c:	b13a      	cbz	r2, 800086e <HAL_ADC_ConfigChannel+0x20e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800085e:	6891      	ldr	r1, [r2, #8]
 8000860:	f001 0103 	and.w	r1, r1, #3
 8000864:	2901      	cmp	r1, #1
 8000866:	d102      	bne.n	800086e <HAL_ADC_ConfigChannel+0x20e>
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	07d2      	lsls	r2, r2, #31
 800086c:	d448      	bmi.n	8000900 <HAL_ADC_ConfigChannel+0x2a0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800086e:	2c10      	cmp	r4, #16
 8000870:	d132      	bne.n	80008d8 <HAL_ADC_ConfigChannel+0x278>
 8000872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000876:	d187      	bne.n	8000788 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000878:	4a35      	ldr	r2, [pc, #212]	; (8000950 <HAL_ADC_ConfigChannel+0x2f0>)
 800087a:	6893      	ldr	r3, [r2, #8]
 800087c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000880:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000882:	4b35      	ldr	r3, [pc, #212]	; (8000958 <HAL_ADC_ConfigChannel+0x2f8>)
 8000884:	4a35      	ldr	r2, [pc, #212]	; (800095c <HAL_ADC_ConfigChannel+0x2fc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	fbb3 f2f2 	udiv	r2, r3, r2
 800088c:	230a      	movs	r3, #10
 800088e:	4353      	muls	r3, r2
            wait_loop_index--;
 8000890:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000892:	9b00      	ldr	r3, [sp, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	f43f af77 	beq.w	8000788 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 800089a:	9b00      	ldr	r3, [sp, #0]
 800089c:	3b01      	subs	r3, #1
 800089e:	e7f7      	b.n	8000890 <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR1,
 80008a0:	1c60      	adds	r0, r4, #1
 80008a2:	6959      	ldr	r1, [r3, #20]
 80008a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80008a8:	2207      	movs	r2, #7
 80008aa:	4082      	lsls	r2, r0
 80008ac:	ea21 0102 	bic.w	r1, r1, r2
 80008b0:	fa06 f200 	lsl.w	r2, r6, r0
 80008b4:	430a      	orrs	r2, r1
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	e7b9      	b.n	800082e <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80008ba:	2c11      	cmp	r4, #17
 80008bc:	d104      	bne.n	80008c8 <HAL_ADC_ConfigChannel+0x268>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <HAL_ADC_ConfigChannel+0x2f0>)
 80008c0:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80008c2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80008c6:	e7b8      	b.n	800083a <HAL_ADC_ConfigChannel+0x1da>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80008c8:	2c12      	cmp	r4, #18
 80008ca:	f47f af5d 	bne.w	8000788 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80008ce:	4a20      	ldr	r2, [pc, #128]	; (8000950 <HAL_ADC_ConfigChannel+0x2f0>)
 80008d0:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80008d2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80008d6:	e7b0      	b.n	800083a <HAL_ADC_ConfigChannel+0x1da>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80008d8:	2c11      	cmp	r4, #17
 80008da:	d109      	bne.n	80008f0 <HAL_ADC_ConfigChannel+0x290>
 80008dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008e0:	f47f af52 	bne.w	8000788 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80008e4:	4a1a      	ldr	r2, [pc, #104]	; (8000950 <HAL_ADC_ConfigChannel+0x2f0>)
 80008e6:	6893      	ldr	r3, [r2, #8]
 80008e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80008ec:	6093      	str	r3, [r2, #8]
 80008ee:	e74b      	b.n	8000788 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80008f0:	2c12      	cmp	r4, #18
 80008f2:	f47f af49 	bne.w	8000788 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80008f6:	4a16      	ldr	r2, [pc, #88]	; (8000950 <HAL_ADC_ConfigChannel+0x2f0>)
 80008f8:	6893      	ldr	r3, [r2, #8]
 80008fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008fe:	e7f5      	b.n	80008ec <HAL_ADC_ConfigChannel+0x28c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000900:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000902:	f043 0320 	orr.w	r3, r3, #32
 8000906:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000908:	2001      	movs	r0, #1
 800090a:	e73e      	b.n	800078a <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800090c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800090e:	f043 0320 	orr.w	r3, r3, #32
 8000912:	646b      	str	r3, [r5, #68]	; 0x44
 8000914:	e739      	b.n	800078a <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8000916:	2002      	movs	r0, #2
 8000918:	e73a      	b.n	8000790 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800091a:	2e01      	cmp	r6, #1
 800091c:	f47f af7f 	bne.w	800081e <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000920:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000924:	40a6      	lsls	r6, r4
 8000926:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000928:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800092a:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 800092e:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000930:	d9b6      	bls.n	80008a0 <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000932:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000936:	6999      	ldr	r1, [r3, #24]
 8000938:	3a1b      	subs	r2, #27
 800093a:	2007      	movs	r0, #7
 800093c:	4090      	lsls	r0, r2
 800093e:	ea21 0100 	bic.w	r1, r1, r0
 8000942:	fa06 f202 	lsl.w	r2, r6, r2
 8000946:	430a      	orrs	r2, r1
 8000948:	619a      	str	r2, [r3, #24]
 800094a:	e770      	b.n	800082e <HAL_ADC_ConfigChannel+0x1ce>
 800094c:	83fff000 	.word	0x83fff000
 8000950:	50000300 	.word	0x50000300
 8000954:	50000100 	.word	0x50000100
 8000958:	20000000 	.word	0x20000000
 800095c:	000f4240 	.word	0x000f4240

08000960 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	4603      	mov	r3, r0
 8000964:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000966:	681c      	ldr	r4, [r3, #0]
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000968:	6808      	ldr	r0, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800096a:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800096e:	bf0c      	ite	eq
 8000970:	4a33      	ldreq	r2, [pc, #204]	; (8000a40 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8000972:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000976:	9201      	str	r2, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000978:	9a01      	ldr	r2, [sp, #4]
 800097a:	2a00      	cmp	r2, #0
 800097c:	d049      	beq.n	8000a12 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  __HAL_LOCK(hadc);
 800097e:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8000982:	2d01      	cmp	r5, #1
 8000984:	d047      	beq.n	8000a16 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 8000986:	2501      	movs	r5, #1
 8000988:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800098c:	68a5      	ldr	r5, [r4, #8]
 800098e:	076f      	lsls	r7, r5, #29
 8000990:	d435      	bmi.n	80009fe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000992:	6895      	ldr	r5, [r2, #8]
 8000994:	076e      	lsls	r6, r5, #29
 8000996:	d432      	bmi.n	80009fe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8000998:	4e2a      	ldr	r6, [pc, #168]	; (8000a44 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800099a:	b1a0      	cbz	r0, 80009c6 <HAL_ADCEx_MultiModeConfigChannel+0x66>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800099c:	684d      	ldr	r5, [r1, #4]
 800099e:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80009a2:	462f      	mov	r7, r5
 80009a4:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80009a6:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 80009aa:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 80009ae:	433d      	orrs	r5, r7
 80009b0:	60b5      	str	r5, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80009b2:	68a5      	ldr	r5, [r4, #8]
 80009b4:	f005 0503 	and.w	r5, r5, #3
 80009b8:	2d01      	cmp	r5, #1
 80009ba:	d12e      	bne.n	8000a1a <HAL_ADCEx_MultiModeConfigChannel+0xba>
 80009bc:	6824      	ldr	r4, [r4, #0]
 80009be:	07e5      	lsls	r5, r4, #31
 80009c0:	d52b      	bpl.n	8000a1a <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c2:	2000      	movs	r0, #0
 80009c4:	e020      	b.n	8000a08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80009c6:	68b1      	ldr	r1, [r6, #8]
 80009c8:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80009cc:	60b1      	str	r1, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80009ce:	68a1      	ldr	r1, [r4, #8]
 80009d0:	f001 0103 	and.w	r1, r1, #3
 80009d4:	2901      	cmp	r1, #1
 80009d6:	d102      	bne.n	80009de <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 80009d8:	6821      	ldr	r1, [r4, #0]
 80009da:	07c9      	lsls	r1, r1, #31
 80009dc:	d4f1      	bmi.n	80009c2 <HAL_ADCEx_MultiModeConfigChannel+0x62>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80009de:	6891      	ldr	r1, [r2, #8]
 80009e0:	f001 0103 	and.w	r1, r1, #3
 80009e4:	2901      	cmp	r1, #1
 80009e6:	d102      	bne.n	80009ee <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80009e8:	6812      	ldr	r2, [r2, #0]
 80009ea:	07d2      	lsls	r2, r2, #31
 80009ec:	d4e9      	bmi.n	80009c2 <HAL_ADCEx_MultiModeConfigChannel+0x62>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80009ee:	4915      	ldr	r1, [pc, #84]	; (8000a44 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80009f0:	688a      	ldr	r2, [r1, #8]
 80009f2:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80009f6:	f022 020f 	bic.w	r2, r2, #15
 80009fa:	608a      	str	r2, [r1, #8]
 80009fc:	e7e1      	b.n	80009c2 <HAL_ADCEx_MultiModeConfigChannel+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a00:	f042 0220 	orr.w	r2, r2, #32
 8000a04:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000a06:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 8000a0e:	b017      	add	sp, #92	; 0x5c
 8000a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000a12:	2001      	movs	r0, #1
 8000a14:	e7fb      	b.n	8000a0e <HAL_ADCEx_MultiModeConfigChannel+0xae>
  __HAL_LOCK(hadc);
 8000a16:	2002      	movs	r0, #2
 8000a18:	e7f9      	b.n	8000a0e <HAL_ADCEx_MultiModeConfigChannel+0xae>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000a1a:	6894      	ldr	r4, [r2, #8]
 8000a1c:	f004 0403 	and.w	r4, r4, #3
 8000a20:	2c01      	cmp	r4, #1
 8000a22:	d102      	bne.n	8000a2a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	07d4      	lsls	r4, r2, #31
 8000a28:	d4cb      	bmi.n	80009c2 <HAL_ADCEx_MultiModeConfigChannel+0x62>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000a2a:	4c06      	ldr	r4, [pc, #24]	; (8000a44 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8000a2c:	6889      	ldr	r1, [r1, #8]
 8000a2e:	68a2      	ldr	r2, [r4, #8]
 8000a30:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000a34:	4308      	orrs	r0, r1
 8000a36:	f022 020f 	bic.w	r2, r2, #15
 8000a3a:	4310      	orrs	r0, r2
 8000a3c:	60a0      	str	r0, [r4, #8]
 8000a3e:	e7c0      	b.n	80009c2 <HAL_ADCEx_MultiModeConfigChannel+0x62>
 8000a40:	50000100 	.word	0x50000100
 8000a44:	50000300 	.word	0x50000300

08000a48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a4a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a50:	041b      	lsls	r3, r3, #16
 8000a52:	0c1b      	lsrs	r3, r3, #16
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a58:	0200      	lsls	r0, r0, #8
 8000a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a62:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a64:	60d3      	str	r3, [r2, #12]
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6e:	b530      	push	{r4, r5, lr}
 8000a70:	68dc      	ldr	r4, [r3, #12]
 8000a72:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a76:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	bf28      	it	cs
 8000a80:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 0501 	mov.w	r5, #1
 8000a88:	fa05 f303 	lsl.w	r3, r5, r3
 8000a8c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a90:	bf8c      	ite	hi
 8000a92:	3c03      	subhi	r4, #3
 8000a94:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a96:	4019      	ands	r1, r3
 8000a98:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9a:	fa05 f404 	lsl.w	r4, r5, r4
 8000a9e:	3c01      	subs	r4, #1
 8000aa0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000aa2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	ea42 0201 	orr.w	r2, r2, r1
 8000aa8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	bfaf      	iteee	ge
 8000aae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	f000 000f 	andlt.w	r0, r0, #15
 8000ab6:	4b06      	ldrlt	r3, [pc, #24]	; (8000ad0 <HAL_NVIC_SetPriority+0x64>)
 8000ab8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	bfa5      	ittet	ge
 8000abc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000ac0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ac8:	bd30      	pop	{r4, r5, pc}
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	e000ed14 	.word	0xe000ed14

08000ad4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ad4:	0942      	lsrs	r2, r0, #5
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f000 001f 	and.w	r0, r0, #31
 8000adc:	fa03 f000 	lsl.w	r0, r3, r0
 8000ae0:	4b01      	ldr	r3, [pc, #4]	; (8000ae8 <HAL_NVIC_EnableIRQ+0x14>)
 8000ae2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	3801      	subs	r0, #1
 8000aee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af2:	d20a      	bcs.n	8000b0a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	21f0      	movs	r1, #240	; 0xf0
 8000afc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b02:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b1a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b1c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b1e:	bf0c      	ite	eq
 8000b20:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b24:	f022 0204 	bicne.w	r2, r2, #4
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b30:	4770      	bx	lr

08000b32 <HAL_SYSTICK_IRQHandler>:
{
 8000b32:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b34:	f7ff fffc 	bl	8000b30 <HAL_SYSTICK_Callback>
 8000b38:	bd08      	pop	{r3, pc}
	...

08000b3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000b3c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b3e:	b350      	cbz	r0, 8000b96 <HAL_DMA_Init+0x5a>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b40:	6884      	ldr	r4, [r0, #8]
 8000b42:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000b44:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8000b46:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b48:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8000b4a:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b4c:	4323      	orrs	r3, r4
 8000b4e:	6904      	ldr	r4, [r0, #16]
 8000b50:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b52:	6944      	ldr	r4, [r0, #20]
 8000b54:	4323      	orrs	r3, r4
 8000b56:	6984      	ldr	r4, [r0, #24]
 8000b58:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b5a:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b5c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000b60:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b64:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000b66:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000b68:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_DMA_Init+0x60>)
 8000b6c:	2214      	movs	r2, #20
 8000b6e:	440b      	add	r3, r1
 8000b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_DMA_Init+0x64>)
 8000b7a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8000b7c:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000b82:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000b84:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000b86:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b88:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000b8a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000b8e:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b96:	2001      	movs	r0, #1
}  
 8000b98:	bd10      	pop	{r4, pc}
 8000b9a:	bf00      	nop
 8000b9c:	bffdfff8 	.word	0xbffdfff8
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_DMA_Start_IT>:
{
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000ba6:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000baa:	2c01      	cmp	r4, #1
 8000bac:	d035      	beq.n	8000c1a <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bae:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000bb2:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bb4:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000bb6:	f880 4020 	strb.w	r4, [r0, #32]
 8000bba:	f04f 0600 	mov.w	r6, #0
 8000bbe:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bc2:	d128      	bne.n	8000c16 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000bc4:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bc8:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bca:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bcc:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bce:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bd0:	f026 0601 	bic.w	r6, r6, #1
 8000bd4:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bd6:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000bd8:	40bd      	lsls	r5, r7
 8000bda:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000bdc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bde:	6843      	ldr	r3, [r0, #4]
 8000be0:	6805      	ldr	r5, [r0, #0]
 8000be2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8000be4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8000be6:	bf0b      	itete	eq
 8000be8:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8000bea:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000bec:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8000bee:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000bf0:	b14b      	cbz	r3, 8000c06 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bf2:	6823      	ldr	r3, [r4, #0]
 8000bf4:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000bf8:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000bfa:	682b      	ldr	r3, [r5, #0]
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000c02:	2000      	movs	r0, #0
 8000c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	f043 030a 	orr.w	r3, r3, #10
 8000c0c:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	f023 0304 	bic.w	r3, r3, #4
 8000c14:	e7f0      	b.n	8000bf8 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000c16:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000c1a:	2002      	movs	r0, #2
} 
 8000c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c1e <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c1e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c20:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8000c22:	6803      	ldr	r3, [r0, #0]
{
 8000c24:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c26:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000c28:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c2a:	2404      	movs	r4, #4
 8000c2c:	4094      	lsls	r4, r2
 8000c2e:	4226      	tst	r6, r4
 8000c30:	d00e      	beq.n	8000c50 <HAL_DMA_IRQHandler+0x32>
 8000c32:	f015 0f04 	tst.w	r5, #4
 8000c36:	d00b      	beq.n	8000c50 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c3c:	bf5e      	ittt	pl
 8000c3e:	681a      	ldrpl	r2, [r3, #0]
 8000c40:	f022 0204 	bicpl.w	r2, r2, #4
 8000c44:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c48:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8000c4a:	b373      	cbz	r3, 8000caa <HAL_DMA_IRQHandler+0x8c>
}  
 8000c4c:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8000c4e:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c50:	2402      	movs	r4, #2
 8000c52:	4094      	lsls	r4, r2
 8000c54:	4226      	tst	r6, r4
 8000c56:	d012      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x60>
 8000c58:	f015 0f02 	tst.w	r5, #2
 8000c5c:	d00f      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	0695      	lsls	r5, r2, #26
 8000c62:	d406      	bmi.n	8000c72 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	f022 020a 	bic.w	r2, r2, #10
 8000c6a:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8000c72:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c74:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8000c76:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8000c7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c7c:	e7e5      	b.n	8000c4a <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c7e:	2408      	movs	r4, #8
 8000c80:	4094      	lsls	r4, r2
 8000c82:	4234      	tst	r4, r6
 8000c84:	d011      	beq.n	8000caa <HAL_DMA_IRQHandler+0x8c>
 8000c86:	072c      	lsls	r4, r5, #28
 8000c88:	d50f      	bpl.n	8000caa <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c8a:	681c      	ldr	r4, [r3, #0]
 8000c8c:	f024 040e 	bic.w	r4, r4, #14
 8000c90:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c92:	2301      	movs	r3, #1
 8000c94:	fa03 f202 	lsl.w	r2, r3, r2
 8000c98:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c9a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000c9c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8000ca6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000ca8:	e7cf      	b.n	8000c4a <HAL_DMA_IRQHandler+0x2c>
}  
 8000caa:	bc70      	pop	{r4, r5, r6}
 8000cac:	4770      	bx	lr
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cb6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000e20 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cbc:	4a56      	ldr	r2, [pc, #344]	; (8000e18 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cbe:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000cc0:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000cc4:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cc6:	9c01      	ldr	r4, [sp, #4]
 8000cc8:	40dc      	lsrs	r4, r3
 8000cca:	d102      	bne.n	8000cd2 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000ccc:	b005      	add	sp, #20
 8000cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cd2:	2401      	movs	r4, #1
 8000cd4:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000cd8:	9c01      	ldr	r4, [sp, #4]
 8000cda:	ea14 050a 	ands.w	r5, r4, sl
 8000cde:	f000 8093 	beq.w	8000e08 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce2:	684c      	ldr	r4, [r1, #4]
 8000ce4:	f024 0b10 	bic.w	fp, r4, #16
 8000ce8:	f1bb 0f02 	cmp.w	fp, #2
 8000cec:	d111      	bne.n	8000d12 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000cee:	08df      	lsrs	r7, r3, #3
 8000cf0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cf4:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000cf8:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cfa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000cfe:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000d02:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d06:	690e      	ldr	r6, [r1, #16]
 8000d08:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d0c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000d10:	623e      	str	r6, [r7, #32]
 8000d12:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d16:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000d18:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1a:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d1e:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d20:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d24:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d26:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2a:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d2e:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d32:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000d36:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d38:	d811      	bhi.n	8000d5e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000d3a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d3c:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d40:	68ce      	ldr	r6, [r1, #12]
 8000d42:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000d46:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000d4a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d4c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4e:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d52:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000d56:	409e      	lsls	r6, r3
 8000d58:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000d5c:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d5e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d60:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d62:	688e      	ldr	r6, [r1, #8]
 8000d64:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d68:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6a:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000d6c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6e:	d54b      	bpl.n	8000e08 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d70:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000d74:	f046 0601 	orr.w	r6, r6, #1
 8000d78:	f8c8 6018 	str.w	r6, [r8, #24]
 8000d7c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000d80:	f023 0703 	bic.w	r7, r3, #3
 8000d84:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d88:	f006 0601 	and.w	r6, r6, #1
 8000d8c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d90:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d92:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d98:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d9a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d9e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000da2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000da6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000daa:	d02f      	beq.n	8000e0c <HAL_GPIO_Init+0x15c>
 8000dac:	4e1b      	ldr	r6, [pc, #108]	; (8000e1c <HAL_GPIO_Init+0x16c>)
 8000dae:	42b0      	cmp	r0, r6
 8000db0:	d02e      	beq.n	8000e10 <HAL_GPIO_Init+0x160>
 8000db2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000db6:	42b0      	cmp	r0, r6
 8000db8:	d02c      	beq.n	8000e14 <HAL_GPIO_Init+0x164>
 8000dba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dbe:	42b0      	cmp	r0, r6
 8000dc0:	bf14      	ite	ne
 8000dc2:	2605      	movne	r6, #5
 8000dc4:	2603      	moveq	r6, #3
 8000dc6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000dca:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000dce:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000dd0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000dd8:	bf0c      	ite	eq
 8000dda:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ddc:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000dde:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000de0:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000de6:	bf0c      	ite	eq
 8000de8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000dea:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000dec:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000dee:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000df4:	bf0c      	ite	eq
 8000df6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000df8:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000dfa:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000dfc:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dfe:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e00:	bf54      	ite	pl
 8000e02:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000e04:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000e06:	60d6      	str	r6, [r2, #12]
    position++;
 8000e08:	3301      	adds	r3, #1
 8000e0a:	e75c      	b.n	8000cc6 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	e7da      	b.n	8000dc6 <HAL_GPIO_Init+0x116>
 8000e10:	2601      	movs	r6, #1
 8000e12:	e7d8      	b.n	8000dc6 <HAL_GPIO_Init+0x116>
 8000e14:	2602      	movs	r6, #2
 8000e16:	e7d6      	b.n	8000dc6 <HAL_GPIO_Init+0x116>
 8000e18:	40010400 	.word	0x40010400
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e24:	6903      	ldr	r3, [r0, #16]
 8000e26:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000e28:	bf14      	ite	ne
 8000e2a:	2001      	movne	r0, #1
 8000e2c:	2000      	moveq	r0, #0
 8000e2e:	4770      	bx	lr

08000e30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e30:	b10a      	cbz	r2, 8000e36 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e32:	6181      	str	r1, [r0, #24]
 8000e34:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e36:	6281      	str	r1, [r0, #40]	; 0x28
 8000e38:	4770      	bx	lr

08000e3a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000e3a:	6943      	ldr	r3, [r0, #20]
 8000e3c:	4059      	eors	r1, r3
 8000e3e:	6141      	str	r1, [r0, #20]
 8000e40:	4770      	bx	lr
	...

08000e44 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e44:	6803      	ldr	r3, [r0, #0]
 8000e46:	07da      	lsls	r2, r3, #31
{
 8000e48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e4c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4e:	d411      	bmi.n	8000e74 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e50:	682b      	ldr	r3, [r5, #0]
 8000e52:	079b      	lsls	r3, r3, #30
 8000e54:	f100 8088 	bmi.w	8000f68 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e58:	682b      	ldr	r3, [r5, #0]
 8000e5a:	071c      	lsls	r4, r3, #28
 8000e5c:	f100 80f8 	bmi.w	8001050 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e60:	682b      	ldr	r3, [r5, #0]
 8000e62:	0758      	lsls	r0, r3, #29
 8000e64:	f100 8141 	bmi.w	80010ea <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e68:	69ea      	ldr	r2, [r5, #28]
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	f040 81d7 	bne.w	800121e <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000e70:	2000      	movs	r0, #0
 8000e72:	e021      	b.n	8000eb8 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e74:	4cba      	ldr	r4, [pc, #744]	; (8001160 <HAL_RCC_OscConfig+0x31c>)
 8000e76:	6863      	ldr	r3, [r4, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d007      	beq.n	8000e90 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e80:	6863      	ldr	r3, [r4, #4]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d119      	bne.n	8000ebe <HAL_RCC_OscConfig+0x7a>
 8000e8a:	6863      	ldr	r3, [r4, #4]
 8000e8c:	03df      	lsls	r7, r3, #15
 8000e8e:	d516      	bpl.n	8000ebe <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e94:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e98:	6821      	ldr	r1, [r4, #0]
 8000e9a:	fa93 f3a3 	rbit	r3, r3
 8000e9e:	fab3 f383 	clz	r3, r3
 8000ea2:	f003 031f 	and.w	r3, r3, #31
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	420b      	tst	r3, r1
 8000eae:	d0cf      	beq.n	8000e50 <HAL_RCC_OscConfig+0xc>
 8000eb0:	686b      	ldr	r3, [r5, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1cc      	bne.n	8000e50 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000eb6:	2001      	movs	r0, #1
}
 8000eb8:	b002      	add	sp, #8
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebe:	686a      	ldr	r2, [r5, #4]
 8000ec0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000ec4:	d125      	bne.n	8000f12 <HAL_RCC_OscConfig+0xce>
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ecc:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ece:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ed0:	68a9      	ldr	r1, [r5, #8]
 8000ed2:	f023 030f 	bic.w	r3, r3, #15
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eda:	b352      	cbz	r2, 8000f32 <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8000edc:	f7ff f9a2 	bl	8000224 <HAL_GetTick>
 8000ee0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ee4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee6:	2701      	movs	r7, #1
 8000ee8:	fa96 f3a6 	rbit	r3, r6
 8000eec:	6822      	ldr	r2, [r4, #0]
 8000eee:	fa96 f3a6 	rbit	r3, r6
 8000ef2:	fab3 f383 	clz	r3, r3
 8000ef6:	f003 031f 	and.w	r3, r3, #31
 8000efa:	fa07 f303 	lsl.w	r3, r7, r3
 8000efe:	4213      	tst	r3, r2
 8000f00:	d1a6      	bne.n	8000e50 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f02:	f7ff f98f 	bl	8000224 <HAL_GetTick>
 8000f06:	eba0 0008 	sub.w	r0, r0, r8
 8000f0a:	2864      	cmp	r0, #100	; 0x64
 8000f0c:	d9ec      	bls.n	8000ee8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000f0e:	2003      	movs	r0, #3
 8000f10:	e7d2      	b.n	8000eb8 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	b932      	cbnz	r2, 8000f24 <HAL_RCC_OscConfig+0xe0>
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1a:	6023      	str	r3, [r4, #0]
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f22:	e7d3      	b.n	8000ecc <HAL_RCC_OscConfig+0x88>
 8000f24:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000f28:	d1f5      	bne.n	8000f16 <HAL_RCC_OscConfig+0xd2>
 8000f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2e:	6023      	str	r3, [r4, #0]
 8000f30:	e7c9      	b.n	8000ec6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000f32:	f7ff f977 	bl	8000224 <HAL_GetTick>
 8000f36:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f3a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3c:	2701      	movs	r7, #1
 8000f3e:	fa96 f3a6 	rbit	r3, r6
 8000f42:	6822      	ldr	r2, [r4, #0]
 8000f44:	fa96 f3a6 	rbit	r3, r6
 8000f48:	fab3 f383 	clz	r3, r3
 8000f4c:	f003 031f 	and.w	r3, r3, #31
 8000f50:	fa07 f303 	lsl.w	r3, r7, r3
 8000f54:	4213      	tst	r3, r2
 8000f56:	f43f af7b 	beq.w	8000e50 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5a:	f7ff f963 	bl	8000224 <HAL_GetTick>
 8000f5e:	eba0 0008 	sub.w	r0, r0, r8
 8000f62:	2864      	cmp	r0, #100	; 0x64
 8000f64:	d9eb      	bls.n	8000f3e <HAL_RCC_OscConfig+0xfa>
 8000f66:	e7d2      	b.n	8000f0e <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f68:	4c7d      	ldr	r4, [pc, #500]	; (8001160 <HAL_RCC_OscConfig+0x31c>)
 8000f6a:	6863      	ldr	r3, [r4, #4]
 8000f6c:	f013 0f0c 	tst.w	r3, #12
 8000f70:	d007      	beq.n	8000f82 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f72:	6863      	ldr	r3, [r4, #4]
 8000f74:	f003 030c 	and.w	r3, r3, #12
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d121      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x17c>
 8000f7c:	6863      	ldr	r3, [r4, #4]
 8000f7e:	03de      	lsls	r6, r3, #15
 8000f80:	d41e      	bmi.n	8000fc0 <HAL_RCC_OscConfig+0x17c>
 8000f82:	2302      	movs	r3, #2
 8000f84:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f88:	6821      	ldr	r1, [r4, #0]
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	fab3 f383 	clz	r3, r3
 8000f92:	f003 031f 	and.w	r3, r3, #31
 8000f96:	2201      	movs	r2, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	420b      	tst	r3, r1
 8000f9e:	d002      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x162>
 8000fa0:	692b      	ldr	r3, [r5, #16]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d187      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa6:	6821      	ldr	r1, [r4, #0]
 8000fa8:	23f8      	movs	r3, #248	; 0xf8
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	fab3 f283 	clz	r2, r3
 8000fb2:	696b      	ldr	r3, [r5, #20]
 8000fb4:	4093      	lsls	r3, r2
 8000fb6:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	6023      	str	r3, [r4, #0]
 8000fbe:	e74b      	b.n	8000e58 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc0:	692a      	ldr	r2, [r5, #16]
 8000fc2:	2601      	movs	r6, #1
 8000fc4:	b30a      	cbz	r2, 800100a <HAL_RCC_OscConfig+0x1c6>
 8000fc6:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000fca:	fab3 f383 	clz	r3, r3
 8000fce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	2702      	movs	r7, #2
 8000fda:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000fdc:	f7ff f922 	bl	8000224 <HAL_GetTick>
 8000fe0:	4680      	mov	r8, r0
 8000fe2:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe6:	6822      	ldr	r2, [r4, #0]
 8000fe8:	fa97 f3a7 	rbit	r3, r7
 8000fec:	fab3 f383 	clz	r3, r3
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	fa06 f303 	lsl.w	r3, r6, r3
 8000ff8:	4213      	tst	r3, r2
 8000ffa:	d1d4      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffc:	f7ff f912 	bl	8000224 <HAL_GetTick>
 8001000:	eba0 0008 	sub.w	r0, r0, r8
 8001004:	2802      	cmp	r0, #2
 8001006:	d9ec      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x19e>
 8001008:	e781      	b.n	8000f0e <HAL_RCC_OscConfig+0xca>
 800100a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800100e:	fab3 f383 	clz	r3, r3
 8001012:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001016:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	2702      	movs	r7, #2
 800101e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001020:	f7ff f900 	bl	8000224 <HAL_GetTick>
 8001024:	4680      	mov	r8, r0
 8001026:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	6822      	ldr	r2, [r4, #0]
 800102c:	fa97 f3a7 	rbit	r3, r7
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	f003 031f 	and.w	r3, r3, #31
 8001038:	fa06 f303 	lsl.w	r3, r6, r3
 800103c:	4213      	tst	r3, r2
 800103e:	f43f af0b 	beq.w	8000e58 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001042:	f7ff f8ef 	bl	8000224 <HAL_GetTick>
 8001046:	eba0 0008 	sub.w	r0, r0, r8
 800104a:	2802      	cmp	r0, #2
 800104c:	d9eb      	bls.n	8001026 <HAL_RCC_OscConfig+0x1e2>
 800104e:	e75e      	b.n	8000f0e <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001050:	69aa      	ldr	r2, [r5, #24]
 8001052:	4e43      	ldr	r6, [pc, #268]	; (8001160 <HAL_RCC_OscConfig+0x31c>)
 8001054:	4943      	ldr	r1, [pc, #268]	; (8001164 <HAL_RCC_OscConfig+0x320>)
 8001056:	2401      	movs	r4, #1
 8001058:	b31a      	cbz	r2, 80010a2 <HAL_RCC_OscConfig+0x25e>
 800105a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800105e:	fab3 f383 	clz	r3, r3
 8001062:	440b      	add	r3, r1
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	2702      	movs	r7, #2
 8001068:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800106a:	f7ff f8db 	bl	8000224 <HAL_GetTick>
 800106e:	4680      	mov	r8, r0
 8001070:	fa97 f3a7 	rbit	r3, r7
 8001074:	fa97 f3a7 	rbit	r3, r7
 8001078:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800107e:	fa97 f3a7 	rbit	r3, r7
 8001082:	fab3 f383 	clz	r3, r3
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	fa04 f303 	lsl.w	r3, r4, r3
 800108e:	4213      	tst	r3, r2
 8001090:	f47f aee6 	bne.w	8000e60 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff f8c6 	bl	8000224 <HAL_GetTick>
 8001098:	eba0 0008 	sub.w	r0, r0, r8
 800109c:	2802      	cmp	r0, #2
 800109e:	d9e7      	bls.n	8001070 <HAL_RCC_OscConfig+0x22c>
 80010a0:	e735      	b.n	8000f0e <HAL_RCC_OscConfig+0xca>
 80010a2:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80010a6:	fab3 f383 	clz	r3, r3
 80010aa:	440b      	add	r3, r1
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	2702      	movs	r7, #2
 80010b0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80010b2:	f7ff f8b7 	bl	8000224 <HAL_GetTick>
 80010b6:	4680      	mov	r8, r0
 80010b8:	fa97 f3a7 	rbit	r3, r7
 80010bc:	fa97 f3a7 	rbit	r3, r7
 80010c0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80010c6:	fa97 f3a7 	rbit	r3, r7
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	fa04 f303 	lsl.w	r3, r4, r3
 80010d6:	4213      	tst	r3, r2
 80010d8:	f43f aec2 	beq.w	8000e60 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010dc:	f7ff f8a2 	bl	8000224 <HAL_GetTick>
 80010e0:	eba0 0008 	sub.w	r0, r0, r8
 80010e4:	2802      	cmp	r0, #2
 80010e6:	d9e7      	bls.n	80010b8 <HAL_RCC_OscConfig+0x274>
 80010e8:	e711      	b.n	8000f0e <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ea:	4c1d      	ldr	r4, [pc, #116]	; (8001160 <HAL_RCC_OscConfig+0x31c>)
 80010ec:	69e3      	ldr	r3, [r4, #28]
 80010ee:	00d9      	lsls	r1, r3, #3
 80010f0:	d434      	bmi.n	800115c <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	69e3      	ldr	r3, [r4, #28]
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	61e3      	str	r3, [r4, #28]
 80010fa:	69e3      	ldr	r3, [r4, #28]
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001104:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001106:	4f18      	ldr	r7, [pc, #96]	; (8001168 <HAL_RCC_OscConfig+0x324>)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	05da      	lsls	r2, r3, #23
 800110c:	d52e      	bpl.n	800116c <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110e:	68eb      	ldr	r3, [r5, #12]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d13c      	bne.n	800118e <HAL_RCC_OscConfig+0x34a>
 8001114:	6a23      	ldr	r3, [r4, #32]
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800111c:	f7ff f882 	bl	8000224 <HAL_GetTick>
 8001120:	2702      	movs	r7, #2
 8001122:	4682      	mov	sl, r0
 8001124:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001126:	f04f 0801 	mov.w	r8, #1
 800112a:	fa97 f3a7 	rbit	r3, r7
 800112e:	fa97 f3a7 	rbit	r3, r7
 8001132:	2b00      	cmp	r3, #0
 8001134:	d06b      	beq.n	800120e <HAL_RCC_OscConfig+0x3ca>
 8001136:	6a22      	ldr	r2, [r4, #32]
 8001138:	fa99 f3a9 	rbit	r3, r9
 800113c:	fab3 f383 	clz	r3, r3
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	fa08 f303 	lsl.w	r3, r8, r3
 8001148:	4213      	tst	r3, r2
 800114a:	d057      	beq.n	80011fc <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 800114c:	2e00      	cmp	r6, #0
 800114e:	f43f ae8b 	beq.w	8000e68 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001152:	69e3      	ldr	r3, [r4, #28]
 8001154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001158:	61e3      	str	r3, [r4, #28]
 800115a:	e685      	b.n	8000e68 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800115c:	2600      	movs	r6, #0
 800115e:	e7d2      	b.n	8001106 <HAL_RCC_OscConfig+0x2c2>
 8001160:	40021000 	.word	0x40021000
 8001164:	10908120 	.word	0x10908120
 8001168:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001172:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001174:	f7ff f856 	bl	8000224 <HAL_GetTick>
 8001178:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	d4c6      	bmi.n	800110e <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001180:	f7ff f850 	bl	8000224 <HAL_GetTick>
 8001184:	eba0 0008 	sub.w	r0, r0, r8
 8001188:	2864      	cmp	r0, #100	; 0x64
 800118a:	d9f6      	bls.n	800117a <HAL_RCC_OscConfig+0x336>
 800118c:	e6bf      	b.n	8000f0e <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118e:	bb3b      	cbnz	r3, 80011e0 <HAL_RCC_OscConfig+0x39c>
 8001190:	6a23      	ldr	r3, [r4, #32]
 8001192:	f023 0301 	bic.w	r3, r3, #1
 8001196:	6223      	str	r3, [r4, #32]
 8001198:	6a23      	ldr	r3, [r4, #32]
 800119a:	f023 0304 	bic.w	r3, r3, #4
 800119e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80011a0:	f7ff f840 	bl	8000224 <HAL_GetTick>
 80011a4:	2702      	movs	r7, #2
 80011a6:	4682      	mov	sl, r0
 80011a8:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011aa:	f04f 0801 	mov.w	r8, #1
 80011ae:	fa97 f3a7 	rbit	r3, r7
 80011b2:	fa97 f3a7 	rbit	r3, r7
 80011b6:	b373      	cbz	r3, 8001216 <HAL_RCC_OscConfig+0x3d2>
 80011b8:	6a22      	ldr	r2, [r4, #32]
 80011ba:	fa99 f3a9 	rbit	r3, r9
 80011be:	fab3 f383 	clz	r3, r3
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	fa08 f303 	lsl.w	r3, r8, r3
 80011ca:	4213      	tst	r3, r2
 80011cc:	d0be      	beq.n	800114c <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f7ff f829 	bl	8000224 <HAL_GetTick>
 80011d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80011d6:	eba0 000a 	sub.w	r0, r0, sl
 80011da:	4298      	cmp	r0, r3
 80011dc:	d9e7      	bls.n	80011ae <HAL_RCC_OscConfig+0x36a>
 80011de:	e696      	b.n	8000f0e <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	6a23      	ldr	r3, [r4, #32]
 80011e4:	d103      	bne.n	80011ee <HAL_RCC_OscConfig+0x3aa>
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6223      	str	r3, [r4, #32]
 80011ec:	e792      	b.n	8001114 <HAL_RCC_OscConfig+0x2d0>
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	6223      	str	r3, [r4, #32]
 80011f4:	6a23      	ldr	r3, [r4, #32]
 80011f6:	f023 0304 	bic.w	r3, r3, #4
 80011fa:	e78e      	b.n	800111a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fc:	f7ff f812 	bl	8000224 <HAL_GetTick>
 8001200:	f241 3388 	movw	r3, #5000	; 0x1388
 8001204:	eba0 000a 	sub.w	r0, r0, sl
 8001208:	4298      	cmp	r0, r3
 800120a:	d98e      	bls.n	800112a <HAL_RCC_OscConfig+0x2e6>
 800120c:	e67f      	b.n	8000f0e <HAL_RCC_OscConfig+0xca>
 800120e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001212:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001214:	e790      	b.n	8001138 <HAL_RCC_OscConfig+0x2f4>
 8001216:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800121c:	e7cd      	b.n	80011ba <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800121e:	4c41      	ldr	r4, [pc, #260]	; (8001324 <HAL_RCC_OscConfig+0x4e0>)
 8001220:	6863      	ldr	r3, [r4, #4]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b08      	cmp	r3, #8
 8001228:	f43f ae45 	beq.w	8000eb6 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800122c:	2a02      	cmp	r2, #2
 800122e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001232:	d152      	bne.n	80012da <HAL_RCC_OscConfig+0x496>
 8001234:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001240:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800124a:	f7fe ffeb 	bl	8000224 <HAL_GetTick>
 800124e:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001252:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001254:	2601      	movs	r6, #1
 8001256:	fa97 f3a7 	rbit	r3, r7
 800125a:	6822      	ldr	r2, [r4, #0]
 800125c:	fa97 f3a7 	rbit	r3, r7
 8001260:	fab3 f383 	clz	r3, r3
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	fa06 f303 	lsl.w	r3, r6, r3
 800126c:	4213      	tst	r3, r2
 800126e:	d12d      	bne.n	80012cc <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001270:	6862      	ldr	r2, [r4, #4]
 8001272:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001274:	6a29      	ldr	r1, [r5, #32]
 8001276:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800127a:	430b      	orrs	r3, r1
 800127c:	4313      	orrs	r3, r2
 800127e:	6063      	str	r3, [r4, #4]
 8001280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001284:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001288:	fab3 f383 	clz	r3, r3
 800128c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001290:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800129a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800129c:	f7fe ffc2 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a0:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80012a2:	4607      	mov	r7, r0
 80012a4:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a8:	6822      	ldr	r2, [r4, #0]
 80012aa:	fa95 f3a5 	rbit	r3, r5
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	fa06 f303 	lsl.w	r3, r6, r3
 80012ba:	4213      	tst	r3, r2
 80012bc:	f47f add8 	bne.w	8000e70 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c0:	f7fe ffb0 	bl	8000224 <HAL_GetTick>
 80012c4:	1bc0      	subs	r0, r0, r7
 80012c6:	2802      	cmp	r0, #2
 80012c8:	d9ec      	bls.n	80012a4 <HAL_RCC_OscConfig+0x460>
 80012ca:	e620      	b.n	8000f0e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012cc:	f7fe ffaa 	bl	8000224 <HAL_GetTick>
 80012d0:	eba0 0008 	sub.w	r0, r0, r8
 80012d4:	2802      	cmp	r0, #2
 80012d6:	d9be      	bls.n	8001256 <HAL_RCC_OscConfig+0x412>
 80012d8:	e619      	b.n	8000f0e <HAL_RCC_OscConfig+0xca>
 80012da:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012f0:	f7fe ff98 	bl	8000224 <HAL_GetTick>
 80012f4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80012f8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fa:	2601      	movs	r6, #1
 80012fc:	fa95 f3a5 	rbit	r3, r5
 8001300:	6822      	ldr	r2, [r4, #0]
 8001302:	fa95 f3a5 	rbit	r3, r5
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	fa06 f303 	lsl.w	r3, r6, r3
 8001312:	4213      	tst	r3, r2
 8001314:	f43f adac 	beq.w	8000e70 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001318:	f7fe ff84 	bl	8000224 <HAL_GetTick>
 800131c:	1bc0      	subs	r0, r0, r7
 800131e:	2802      	cmp	r0, #2
 8001320:	d9ec      	bls.n	80012fc <HAL_RCC_OscConfig+0x4b8>
 8001322:	e5f4      	b.n	8000f0e <HAL_RCC_OscConfig+0xca>
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001328:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800132a:	4c13      	ldr	r4, [pc, #76]	; (8001378 <HAL_RCC_GetSysClockFreq+0x50>)
 800132c:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800132e:	f001 030c 	and.w	r3, r1, #12
 8001332:	2b08      	cmp	r3, #8
 8001334:	d11e      	bne.n	8001374 <HAL_RCC_GetSysClockFreq+0x4c>
 8001336:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800133a:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800133e:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	4a0c      	ldr	r2, [pc, #48]	; (800137c <HAL_RCC_GetSysClockFreq+0x54>)
 800134c:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800134e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001350:	220f      	movs	r2, #15
 8001352:	fa92 f2a2 	rbit	r2, r2
 8001356:	fab2 f282 	clz	r2, r2
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	40d3      	lsrs	r3, r2
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_RCC_GetSysClockFreq+0x58>)
 8001362:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001364:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001366:	bf4a      	itet	mi
 8001368:	4b06      	ldrmi	r3, [pc, #24]	; (8001384 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800136a:	4b07      	ldrpl	r3, [pc, #28]	; (8001388 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800136c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001370:	4358      	muls	r0, r3
 8001372:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001376:	bd10      	pop	{r4, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	08003050 	.word	0x08003050
 8001380:	08003060 	.word	0x08003060
 8001384:	007a1200 	.word	0x007a1200
 8001388:	003d0900 	.word	0x003d0900

0800138c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800138c:	4a5c      	ldr	r2, [pc, #368]	; (8001500 <HAL_RCC_ClockConfig+0x174>)
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	428b      	cmp	r3, r1
{
 8001396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800139a:	4606      	mov	r6, r0
 800139c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800139e:	d330      	bcc.n	8001402 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a0:	6832      	ldr	r2, [r6, #0]
 80013a2:	0791      	lsls	r1, r2, #30
 80013a4:	d43a      	bmi.n	800141c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a6:	07d2      	lsls	r2, r2, #31
 80013a8:	d440      	bmi.n	800142c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80013aa:	4a55      	ldr	r2, [pc, #340]	; (8001500 <HAL_RCC_ClockConfig+0x174>)
 80013ac:	6813      	ldr	r3, [r2, #0]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	429d      	cmp	r5, r3
 80013b4:	f0c0 8092 	bcc.w	80014dc <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	6832      	ldr	r2, [r6, #0]
 80013ba:	4c52      	ldr	r4, [pc, #328]	; (8001504 <HAL_RCC_ClockConfig+0x178>)
 80013bc:	f012 0f04 	tst.w	r2, #4
 80013c0:	f040 8097 	bne.w	80014f2 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c4:	0713      	lsls	r3, r2, #28
 80013c6:	d506      	bpl.n	80013d6 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013c8:	6863      	ldr	r3, [r4, #4]
 80013ca:	6932      	ldr	r2, [r6, #16]
 80013cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013d4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013d6:	f7ff ffa7 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 80013da:	6863      	ldr	r3, [r4, #4]
 80013dc:	22f0      	movs	r2, #240	; 0xf0
 80013de:	fa92 f2a2 	rbit	r2, r2
 80013e2:	fab2 f282 	clz	r2, r2
 80013e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ea:	40d3      	lsrs	r3, r2
 80013ec:	4a46      	ldr	r2, [pc, #280]	; (8001508 <HAL_RCC_ClockConfig+0x17c>)
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	40d8      	lsrs	r0, r3
 80013f2:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_ClockConfig+0x180>)
 80013f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7fe fee6 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 80013fc:	2000      	movs	r0, #0
}
 80013fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	f023 0307 	bic.w	r3, r3, #7
 8001408:	430b      	orrs	r3, r1
 800140a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800140c:	6813      	ldr	r3, [r2, #0]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	4299      	cmp	r1, r3
 8001414:	d0c4      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001416:	2001      	movs	r0, #1
 8001418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	4939      	ldr	r1, [pc, #228]	; (8001504 <HAL_RCC_ClockConfig+0x178>)
 800141e:	68b0      	ldr	r0, [r6, #8]
 8001420:	684b      	ldr	r3, [r1, #4]
 8001422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001426:	4303      	orrs	r3, r0
 8001428:	604b      	str	r3, [r1, #4]
 800142a:	e7bc      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142c:	6872      	ldr	r2, [r6, #4]
 800142e:	4c35      	ldr	r4, [pc, #212]	; (8001504 <HAL_RCC_ClockConfig+0x178>)
 8001430:	2a01      	cmp	r2, #1
 8001432:	d128      	bne.n	8001486 <HAL_RCC_ClockConfig+0xfa>
 8001434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001438:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143c:	6821      	ldr	r1, [r4, #0]
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	d0e1      	beq.n	8001416 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001452:	6863      	ldr	r3, [r4, #4]
 8001454:	f023 0303 	bic.w	r3, r3, #3
 8001458:	431a      	orrs	r2, r3
 800145a:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 800145c:	f7fe fee2 	bl	8000224 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001460:	6873      	ldr	r3, [r6, #4]
 8001462:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001464:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001466:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	d11f      	bne.n	80014ac <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800146c:	6863      	ldr	r3, [r4, #4]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b04      	cmp	r3, #4
 8001474:	d099      	beq.n	80013aa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001476:	f7fe fed5 	bl	8000224 <HAL_GetTick>
 800147a:	1bc0      	subs	r0, r0, r7
 800147c:	4540      	cmp	r0, r8
 800147e:	d9f5      	bls.n	800146c <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001480:	2003      	movs	r0, #3
 8001482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001486:	2a02      	cmp	r2, #2
 8001488:	bf0c      	ite	eq
 800148a:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800148e:	2302      	movne	r3, #2
 8001490:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	fab3 f383 	clz	r3, r3
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	2101      	movs	r1, #1
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	4203      	tst	r3, r0
 80014aa:	e7d1      	b.n	8001450 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d110      	bne.n	80014d2 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b0:	6863      	ldr	r3, [r4, #4]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	f43f af77 	beq.w	80013aa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014bc:	f7fe feb2 	bl	8000224 <HAL_GetTick>
 80014c0:	1bc0      	subs	r0, r0, r7
 80014c2:	4540      	cmp	r0, r8
 80014c4:	d9f4      	bls.n	80014b0 <HAL_RCC_ClockConfig+0x124>
 80014c6:	e7db      	b.n	8001480 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7fe feac 	bl	8000224 <HAL_GetTick>
 80014cc:	1bc0      	subs	r0, r0, r7
 80014ce:	4540      	cmp	r0, r8
 80014d0:	d8d6      	bhi.n	8001480 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d2:	6863      	ldr	r3, [r4, #4]
 80014d4:	f013 0f0c 	tst.w	r3, #12
 80014d8:	d1f6      	bne.n	80014c8 <HAL_RCC_ClockConfig+0x13c>
 80014da:	e766      	b.n	80013aa <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014dc:	6813      	ldr	r3, [r2, #0]
 80014de:	f023 0307 	bic.w	r3, r3, #7
 80014e2:	432b      	orrs	r3, r5
 80014e4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	429d      	cmp	r5, r3
 80014ee:	d192      	bne.n	8001416 <HAL_RCC_ClockConfig+0x8a>
 80014f0:	e762      	b.n	80013b8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f2:	6863      	ldr	r3, [r4, #4]
 80014f4:	68f1      	ldr	r1, [r6, #12]
 80014f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014fa:	430b      	orrs	r3, r1
 80014fc:	6063      	str	r3, [r4, #4]
 80014fe:	e761      	b.n	80013c4 <HAL_RCC_ClockConfig+0x38>
 8001500:	40022000 	.word	0x40022000
 8001504:	40021000 	.word	0x40021000
 8001508:	080030d3 	.word	0x080030d3
 800150c:	20000000 	.word	0x20000000

08001510 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001510:	4b01      	ldr	r3, [pc, #4]	; (8001518 <HAL_RCC_GetHCLKFreq+0x8>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000000 	.word	0x20000000

0800151c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_RCC_GetPCLK1Freq+0x24>)
 800151e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	fa92 f2a2 	rbit	r2, r2
 8001528:	fab2 f282 	clz	r2, r2
 800152c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001530:	40d3      	lsrs	r3, r2
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001534:	5cd3      	ldrb	r3, [r2, r3]
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001538:	6810      	ldr	r0, [r2, #0]
}    
 800153a:	40d8      	lsrs	r0, r3
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	080030e3 	.word	0x080030e3
 8001548:	20000000 	.word	0x20000000

0800154c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_RCC_GetPCLK2Freq+0x24>)
 800154e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	fa92 f2a2 	rbit	r2, r2
 8001558:	fab2 f282 	clz	r2, r2
 800155c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001560:	40d3      	lsrs	r3, r2
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001568:	6810      	ldr	r0, [r2, #0]
} 
 800156a:	40d8      	lsrs	r0, r3
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	080030e3 	.word	0x080030e3
 8001578:	20000000 	.word	0x20000000

0800157c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800157c:	6803      	ldr	r3, [r0, #0]
{
 800157e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001582:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001584:	03d8      	lsls	r0, r3, #15
 8001586:	d520      	bpl.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001588:	4c50      	ldr	r4, [pc, #320]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800158a:	69e3      	ldr	r3, [r4, #28]
 800158c:	00d9      	lsls	r1, r3, #3
 800158e:	d444      	bmi.n	800161a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001590:	69e3      	ldr	r3, [r4, #28]
 8001592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001596:	61e3      	str	r3, [r4, #28]
 8001598:	69e3      	ldr	r3, [r4, #28]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015a2:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a4:	4f4a      	ldr	r7, [pc, #296]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	05da      	lsls	r2, r3, #23
 80015aa:	d538      	bpl.n	800161e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015ac:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015ae:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80015b2:	d148      	bne.n	8001646 <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80015b4:	6a23      	ldr	r3, [r4, #32]
 80015b6:	686a      	ldr	r2, [r5, #4]
 80015b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015bc:	4313      	orrs	r3, r2
 80015be:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015c0:	b11e      	cbz	r6, 80015ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c2:	69e3      	ldr	r3, [r4, #28]
 80015c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015ca:	6828      	ldr	r0, [r5, #0]
 80015cc:	07c1      	lsls	r1, r0, #31
 80015ce:	d506      	bpl.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015d0:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80015d2:	68a9      	ldr	r1, [r5, #8]
 80015d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015d6:	f023 0303 	bic.w	r3, r3, #3
 80015da:	430b      	orrs	r3, r1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015de:	0682      	lsls	r2, r0, #26
 80015e0:	d506      	bpl.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015e2:	4a3a      	ldr	r2, [pc, #232]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80015e4:	68e9      	ldr	r1, [r5, #12]
 80015e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015e8:	f023 0310 	bic.w	r3, r3, #16
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80015f0:	0603      	lsls	r3, r0, #24
 80015f2:	d506      	bpl.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80015f4:	4a35      	ldr	r2, [pc, #212]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80015f6:	6929      	ldr	r1, [r5, #16]
 80015f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015fa:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80015fe:	430b      	orrs	r3, r1
 8001600:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001602:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8001606:	d01b      	beq.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001608:	4a30      	ldr	r2, [pc, #192]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800160a:	6969      	ldr	r1, [r5, #20]
 800160c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800160e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001612:	430b      	orrs	r3, r1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001616:	2000      	movs	r0, #0
 8001618:	e012      	b.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2600      	movs	r6, #0
 800161c:	e7c2      	b.n	80015a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001624:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001626:	f7fe fdfd 	bl	8000224 <HAL_GetTick>
 800162a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	05db      	lsls	r3, r3, #23
 8001630:	d4bc      	bmi.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001632:	f7fe fdf7 	bl	8000224 <HAL_GetTick>
 8001636:	eba0 0008 	sub.w	r0, r0, r8
 800163a:	2864      	cmp	r0, #100	; 0x64
 800163c:	d9f6      	bls.n	800162c <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 800163e:	2003      	movs	r0, #3
}
 8001640:	b002      	add	sp, #8
 8001642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001646:	686a      	ldr	r2, [r5, #4]
 8001648:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800164c:	4293      	cmp	r3, r2
 800164e:	d0b1      	beq.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001650:	6a21      	ldr	r1, [r4, #32]
 8001652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001656:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800165a:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800165e:	f8df e074 	ldr.w	lr, [pc, #116]	; 80016d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8001662:	fab2 f282 	clz	r2, r2
 8001666:	4472      	add	r2, lr
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	2701      	movs	r7, #1
 800166c:	6017      	str	r7, [r2, #0]
 800166e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	4473      	add	r3, lr
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800167e:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001680:	07c8      	lsls	r0, r1, #31
 8001682:	d597      	bpl.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001684:	f7fe fdce 	bl	8000224 <HAL_GetTick>
 8001688:	f04f 0802 	mov.w	r8, #2
 800168c:	4682      	mov	sl, r0
 800168e:	46c1      	mov	r9, r8
 8001690:	fa98 f3a8 	rbit	r3, r8
 8001694:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	b19b      	cbz	r3, 80016c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
 800169a:	6a22      	ldr	r2, [r4, #32]
 800169c:	fa99 f3a9 	rbit	r3, r9
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	fa07 f303 	lsl.w	r3, r7, r3
 80016ac:	4213      	tst	r3, r2
 80016ae:	d181      	bne.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7fe fdb8 	bl	8000224 <HAL_GetTick>
 80016b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80016b8:	eba0 000a 	sub.w	r0, r0, sl
 80016bc:	4298      	cmp	r0, r3
 80016be:	d9e7      	bls.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80016c0:	e7bd      	b.n	800163e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80016c2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016c8:	e7e8      	b.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x120>
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40007000 	.word	0x40007000
 80016d4:	10908100 	.word	0x10908100

080016d8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016d8:	6803      	ldr	r3, [r0, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80016e0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80016ea:	2320      	movs	r3, #32
 80016ec:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80016f0:	4770      	bx	lr
	...

080016f4 <HAL_UART_Transmit_DMA>:
{
 80016f4:	b538      	push	{r3, r4, r5, lr}
 80016f6:	4604      	mov	r4, r0
 80016f8:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80016fa:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80016fe:	2a20      	cmp	r2, #32
 8001700:	d12b      	bne.n	800175a <HAL_UART_Transmit_DMA+0x66>
    if((pData == NULL ) || (Size == 0U))
 8001702:	b341      	cbz	r1, 8001756 <HAL_UART_Transmit_DMA+0x62>
 8001704:	b33b      	cbz	r3, 8001756 <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 8001706:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800170a:	2a01      	cmp	r2, #1
 800170c:	d025      	beq.n	800175a <HAL_UART_Transmit_DMA+0x66>
 800170e:	2201      	movs	r2, #1
 8001710:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001714:	6e20      	ldr	r0, [r4, #96]	; 0x60
    huart->TxXferCount = Size;
 8001716:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800171a:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800171c:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800171e:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001720:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize = Size;
 8001726:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr = pData;
 800172a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800172c:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800172e:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_UART_Transmit_DMA+0x70>)
 8001730:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001732:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <HAL_UART_Transmit_DMA+0x74>)
 8001734:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8001736:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8001738:	6345      	str	r5, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 800173a:	3228      	adds	r2, #40	; 0x28
 800173c:	f7ff fa32 	bl	8000ba4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	2240      	movs	r2, #64	; 0x40
 8001744:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001746:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8001748:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800174c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001750:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8001752:	4628      	mov	r0, r5
 8001754:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001756:	2001      	movs	r0, #1
 8001758:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800175a:	2002      	movs	r0, #2
}
 800175c:	bd38      	pop	{r3, r4, r5, pc}
 800175e:	bf00      	nop
 8001760:	0800176d 	.word	0x0800176d
 8001764:	0800179d 	.word	0x0800179d
 8001768:	080017a9 	.word	0x080017a9

0800176c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800176c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800176e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001770:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f013 0320 	ands.w	r3, r3, #32
 8001778:	d10b      	bne.n	8001792 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 800177a:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800177e:	6813      	ldr	r3, [r2, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001786:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8001792:	4610      	mov	r0, r2
 8001794:	f000 fbe2 	bl	8001f5c <HAL_UART_TxCpltCallback>
 8001798:	bd08      	pop	{r3, pc}

0800179a <HAL_UART_TxHalfCpltCallback>:
 800179a:	4770      	bx	lr

0800179c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800179c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 800179e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80017a0:	f7ff fffb 	bl	800179a <HAL_UART_TxHalfCpltCallback>
 80017a4:	bd08      	pop	{r3, pc}

080017a6 <HAL_UART_ErrorCallback>:
 80017a6:	4770      	bx	lr

080017a8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80017a8:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 80017aa:	b508      	push	{r3, lr}

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80017ac:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 80017b0:	2b21      	cmp	r3, #33	; 0x21
 80017b2:	d10d      	bne.n	80017d0 <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80017b4:	680b      	ldr	r3, [r1, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	0612      	lsls	r2, r2, #24
 80017ba:	d509      	bpl.n	80017d0 <UART_DMAError+0x28>
  {
    huart->TxXferCount = 0U;
 80017bc:	2200      	movs	r2, #0
 80017be:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80017c8:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80017ca:	2320      	movs	r3, #32
 80017cc:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80017d0:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 80017d4:	2b22      	cmp	r3, #34	; 0x22
 80017d6:	d109      	bne.n	80017ec <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80017d8:	680b      	ldr	r3, [r1, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	065b      	lsls	r3, r3, #25
 80017de:	d505      	bpl.n	80017ec <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80017e6:	4608      	mov	r0, r1
 80017e8:	f7ff ff76 	bl	80016d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80017ec:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 80017ee:	f043 0310 	orr.w	r3, r3, #16
 80017f2:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80017f4:	4608      	mov	r0, r1
 80017f6:	f7ff ffd6 	bl	80017a6 <HAL_UART_ErrorCallback>
 80017fa:	bd08      	pop	{r3, pc}

080017fc <UART_SetConfig>:
{
 80017fc:	b538      	push	{r3, r4, r5, lr}
 80017fe:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001800:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001802:	6921      	ldr	r1, [r4, #16]
 8001804:	68a3      	ldr	r3, [r4, #8]
 8001806:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001808:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800180a:	430b      	orrs	r3, r1
 800180c:	6961      	ldr	r1, [r4, #20]
 800180e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001810:	4949      	ldr	r1, [pc, #292]	; (8001938 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001812:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001814:	4001      	ands	r1, r0
 8001816:	430b      	orrs	r3, r1
 8001818:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800181a:	686b      	ldr	r3, [r5, #4]
 800181c:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800181e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001820:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001824:	430b      	orrs	r3, r1
 8001826:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001828:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800182a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800182c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001830:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001832:	430b      	orrs	r3, r1
 8001834:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <UART_SetConfig+0x140>)
 8001838:	429d      	cmp	r5, r3
 800183a:	d112      	bne.n	8001862 <UART_SetConfig+0x66>
 800183c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001840:	493f      	ldr	r1, [pc, #252]	; (8001940 <UART_SetConfig+0x144>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001848:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800184c:	5ccb      	ldrb	r3, [r1, r3]
 800184e:	d13b      	bne.n	80018c8 <UART_SetConfig+0xcc>
    switch (clocksource)
 8001850:	2b08      	cmp	r3, #8
 8001852:	d836      	bhi.n	80018c2 <UART_SetConfig+0xc6>
 8001854:	e8df f003 	tbb	[pc, r3]
 8001858:	3524210f 	.word	0x3524210f
 800185c:	3535352d 	.word	0x3535352d
 8001860:	30          	.byte	0x30
 8001861:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <UART_SetConfig+0x148>)
 8001864:	429d      	cmp	r5, r3
 8001866:	d003      	beq.n	8001870 <UART_SetConfig+0x74>
 8001868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800186c:	429d      	cmp	r5, r3
 800186e:	d15e      	bne.n	800192e <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001870:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001874:	d131      	bne.n	80018da <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001876:	f7ff fe51 	bl	800151c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800187a:	6861      	ldr	r1, [r4, #4]
 800187c:	084a      	lsrs	r2, r1, #1
 800187e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001882:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001886:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001888:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800188a:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 800188e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001890:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001894:	4313      	orrs	r3, r2
 8001896:	60cb      	str	r3, [r1, #12]
 8001898:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800189a:	f7ff fe57 	bl	800154c <HAL_RCC_GetPCLK2Freq>
 800189e:	e7ec      	b.n	800187a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80018a0:	6860      	ldr	r0, [r4, #4]
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80018a8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80018b0:	e7e9      	b.n	8001886 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80018b2:	f7ff fd39 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 80018b6:	e7e0      	b.n	800187a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018b8:	6860      	ldr	r0, [r4, #4]
 80018ba:	0843      	lsrs	r3, r0, #1
 80018bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018c0:	e7f4      	b.n	80018ac <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e7e0      	b.n	800188a <UART_SetConfig+0x8e>
    switch (clocksource)
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d833      	bhi.n	8001934 <UART_SetConfig+0x138>
 80018cc:	e8df f003 	tbb	[pc, r3]
 80018d0:	321b1005 	.word	0x321b1005
 80018d4:	32323227 	.word	0x32323227
 80018d8:	2a          	.byte	0x2a
 80018d9:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80018da:	f7ff fe1f 	bl	800151c <HAL_RCC_GetPCLK1Freq>
 80018de:	6863      	ldr	r3, [r4, #4]
 80018e0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80018e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80018e8:	b280      	uxth	r0, r0
 80018ea:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80018ec:	2000      	movs	r0, #0
        break;
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80018f0:	f7ff fe2c 	bl	800154c <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80018f4:	6863      	ldr	r3, [r4, #4]
 80018f6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80018fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <UART_SetConfig+0x140>)
 8001900:	b280      	uxth	r0, r0
 8001902:	60d8      	str	r0, [r3, #12]
 8001904:	e7f2      	b.n	80018ec <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001906:	6862      	ldr	r2, [r4, #4]
 8001908:	0853      	lsrs	r3, r2, #1
 800190a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800190e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001912:	fbb3 f3f2 	udiv	r3, r3, r2
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <UART_SetConfig+0x140>)
 8001918:	b29b      	uxth	r3, r3
 800191a:	60d3      	str	r3, [r2, #12]
 800191c:	e7e6      	b.n	80018ec <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800191e:	f7ff fd03 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 8001922:	e7e7      	b.n	80018f4 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001924:	6862      	ldr	r2, [r4, #4]
 8001926:	0853      	lsrs	r3, r2, #1
 8001928:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800192c:	e7f1      	b.n	8001912 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800192e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001932:	d0c6      	beq.n	80018c2 <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8001934:	2001      	movs	r0, #1
  return ret;
 8001936:	bd38      	pop	{r3, r4, r5, pc}
 8001938:	efff69f3 	.word	0xefff69f3
 800193c:	40013800 	.word	0x40013800
 8001940:	08003070 	.word	0x08003070
 8001944:	40004400 	.word	0x40004400

08001948 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001948:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800194a:	07da      	lsls	r2, r3, #31
{
 800194c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800194e:	d506      	bpl.n	800195e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001950:	6801      	ldr	r1, [r0, #0]
 8001952:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001954:	684a      	ldr	r2, [r1, #4]
 8001956:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800195a:	4322      	orrs	r2, r4
 800195c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800195e:	079c      	lsls	r4, r3, #30
 8001960:	d506      	bpl.n	8001970 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001962:	6801      	ldr	r1, [r0, #0]
 8001964:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001966:	684a      	ldr	r2, [r1, #4]
 8001968:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800196c:	4322      	orrs	r2, r4
 800196e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001970:	0759      	lsls	r1, r3, #29
 8001972:	d506      	bpl.n	8001982 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001974:	6801      	ldr	r1, [r0, #0]
 8001976:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001978:	684a      	ldr	r2, [r1, #4]
 800197a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800197e:	4322      	orrs	r2, r4
 8001980:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001982:	071a      	lsls	r2, r3, #28
 8001984:	d506      	bpl.n	8001994 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001986:	6801      	ldr	r1, [r0, #0]
 8001988:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800198a:	684a      	ldr	r2, [r1, #4]
 800198c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001990:	4322      	orrs	r2, r4
 8001992:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001994:	06dc      	lsls	r4, r3, #27
 8001996:	d506      	bpl.n	80019a6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001998:	6801      	ldr	r1, [r0, #0]
 800199a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800199c:	688a      	ldr	r2, [r1, #8]
 800199e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019a2:	4322      	orrs	r2, r4
 80019a4:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80019a6:	0699      	lsls	r1, r3, #26
 80019a8:	d506      	bpl.n	80019b8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80019aa:	6801      	ldr	r1, [r0, #0]
 80019ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80019ae:	688a      	ldr	r2, [r1, #8]
 80019b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019b4:	4322      	orrs	r2, r4
 80019b6:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80019b8:	065a      	lsls	r2, r3, #25
 80019ba:	d50f      	bpl.n	80019dc <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019bc:	6801      	ldr	r1, [r0, #0]
 80019be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80019c0:	684a      	ldr	r2, [r1, #4]
 80019c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80019c6:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80019c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019cc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80019ce:	d105      	bne.n	80019dc <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80019d0:	684a      	ldr	r2, [r1, #4]
 80019d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80019d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80019d8:	4322      	orrs	r2, r4
 80019da:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	d506      	bpl.n	80019ee <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80019e0:	6802      	ldr	r2, [r0, #0]
 80019e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80019e4:	6853      	ldr	r3, [r2, #4]
 80019e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80019ea:	430b      	orrs	r3, r1
 80019ec:	6053      	str	r3, [r2, #4]
 80019ee:	bd10      	pop	{r4, pc}

080019f0 <UART_WaitOnFlagUntilTimeout>:
{
 80019f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f4:	9d06      	ldr	r5, [sp, #24]
 80019f6:	4604      	mov	r4, r0
 80019f8:	460f      	mov	r7, r1
 80019fa:	4616      	mov	r6, r2
 80019fc:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019fe:	6821      	ldr	r1, [r4, #0]
 8001a00:	69ca      	ldr	r2, [r1, #28]
 8001a02:	ea37 0302 	bics.w	r3, r7, r2
 8001a06:	bf0c      	ite	eq
 8001a08:	2201      	moveq	r2, #1
 8001a0a:	2200      	movne	r2, #0
 8001a0c:	42b2      	cmp	r2, r6
 8001a0e:	d002      	beq.n	8001a16 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001a10:	2000      	movs	r0, #0
}
 8001a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001a16:	1c6b      	adds	r3, r5, #1
 8001a18:	d0f2      	beq.n	8001a00 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a1a:	b99d      	cbnz	r5, 8001a44 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001a34:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001a3e:	2003      	movs	r0, #3
 8001a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a44:	f7fe fbee 	bl	8000224 <HAL_GetTick>
 8001a48:	eba0 0008 	sub.w	r0, r0, r8
 8001a4c:	4285      	cmp	r5, r0
 8001a4e:	d2d6      	bcs.n	80019fe <UART_WaitOnFlagUntilTimeout+0xe>
 8001a50:	e7e4      	b.n	8001a1c <UART_WaitOnFlagUntilTimeout+0x2c>

08001a52 <HAL_UART_Transmit>:
{
 8001a52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001a56:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001a58:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001a5c:	2b20      	cmp	r3, #32
{
 8001a5e:	4604      	mov	r4, r0
 8001a60:	460d      	mov	r5, r1
 8001a62:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001a64:	d14c      	bne.n	8001b00 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001a66:	2900      	cmp	r1, #0
 8001a68:	d048      	beq.n	8001afc <HAL_UART_Transmit+0xaa>
 8001a6a:	2a00      	cmp	r2, #0
 8001a6c:	d046      	beq.n	8001afc <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001a6e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d044      	beq.n	8001b00 <HAL_UART_Transmit+0xae>
 8001a76:	2301      	movs	r3, #1
 8001a78:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a80:	2321      	movs	r3, #33	; 0x21
 8001a82:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001a86:	f7fe fbcd 	bl	8000224 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001a8a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001a8e:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001a90:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001a94:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001a98:	b292      	uxth	r2, r2
 8001a9a:	b962      	cbnz	r2, 8001ab6 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a9c:	9700      	str	r7, [sp, #0]
 8001a9e:	4633      	mov	r3, r6
 8001aa0:	2140      	movs	r1, #64	; 0x40
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7ff ffa4 	bl	80019f0 <UART_WaitOnFlagUntilTimeout>
 8001aa8:	b998      	cbnz	r0, 8001ad2 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001ab0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8001ab4:	e00e      	b.n	8001ad4 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001ab6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aba:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4633      	mov	r3, r6
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff ff90 	bl	80019f0 <UART_WaitOnFlagUntilTimeout>
 8001ad0:	b118      	cbz	r0, 8001ada <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001ad2:	2003      	movs	r0, #3
}
 8001ad4:	b002      	add	sp, #8
 8001ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ada:	68a3      	ldr	r3, [r4, #8]
 8001adc:	6822      	ldr	r2, [r4, #0]
 8001ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae2:	d107      	bne.n	8001af4 <HAL_UART_Transmit+0xa2>
 8001ae4:	6923      	ldr	r3, [r4, #16]
 8001ae6:	b92b      	cbnz	r3, 8001af4 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001ae8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001af2:	e7cf      	b.n	8001a94 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001af4:	782b      	ldrb	r3, [r5, #0]
 8001af6:	8513      	strh	r3, [r2, #40]	; 0x28
 8001af8:	3501      	adds	r5, #1
 8001afa:	e7cb      	b.n	8001a94 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001afc:	2001      	movs	r0, #1
 8001afe:	e7e9      	b.n	8001ad4 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001b00:	2002      	movs	r0, #2
 8001b02:	e7e7      	b.n	8001ad4 <HAL_UART_Transmit+0x82>

08001b04 <UART_CheckIdleState>:
{
 8001b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b06:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b08:	2600      	movs	r6, #0
 8001b0a:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001b0c:	f7fe fb8a 	bl	8000224 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001b16:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b18:	d417      	bmi.n	8001b4a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	075b      	lsls	r3, r3, #29
 8001b20:	d50a      	bpl.n	8001b38 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	462b      	mov	r3, r5
 8001b2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff ff5d 	bl	80019f0 <UART_WaitOnFlagUntilTimeout>
 8001b36:	b9a0      	cbnz	r0, 8001b62 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001b38:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001b3a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001b3c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001b40:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001b44:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001b48:	e00c      	b.n	8001b64 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4632      	mov	r2, r6
 8001b52:	4603      	mov	r3, r0
 8001b54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff ff49 	bl	80019f0 <UART_WaitOnFlagUntilTimeout>
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d0db      	beq.n	8001b1a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001b62:	2003      	movs	r0, #3
}
 8001b64:	b002      	add	sp, #8
 8001b66:	bd70      	pop	{r4, r5, r6, pc}

08001b68 <HAL_UART_Init>:
{
 8001b68:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	b360      	cbz	r0, 8001bc8 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b6e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001b72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b76:	b91b      	cbnz	r3, 8001b80 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001b78:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001b7c:	f000 ff1c 	bl	80029b8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001b80:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b82:	2324      	movs	r3, #36	; 0x24
 8001b84:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001b88:	6813      	ldr	r3, [r2, #0]
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b90:	4620      	mov	r0, r4
 8001b92:	f7ff fe33 	bl	80017fc <UART_SetConfig>
 8001b96:	2801      	cmp	r0, #1
 8001b98:	d016      	beq.n	8001bc8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b9c:	b113      	cbz	r3, 8001ba4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff fed2 	bl	8001948 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bb4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001bbc:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001bc4:	f7ff bf9e 	b.w	8001b04 <UART_CheckIdleState>
}
 8001bc8:	2001      	movs	r0, #1
 8001bca:	bd10      	pop	{r4, pc}

08001bcc <MX_ADC1_Init>:
void MX_ADC1_Init(void)
{

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001bcc:	4825      	ldr	r0, [pc, #148]	; (8001c64 <MX_ADC1_Init+0x98>)
{
 8001bce:	b510      	push	{r4, lr}
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 8001bd4:	2102      	movs	r1, #2
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bd6:	f44f 3440 	mov.w	r4, #196608	; 0x30000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bda:	2200      	movs	r2, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bdc:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.NbrOfConversion = 2;
 8001be0:	6201      	str	r1, [r0, #32]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001be2:	2301      	movs	r3, #1
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001be4:	2104      	movs	r1, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001be6:	6082      	str	r2, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001be8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bea:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bec:	6242      	str	r2, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bee:	6302      	str	r2, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bf0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bf2:	60c2      	str	r2, [r0, #12]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001bf4:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bf6:	6141      	str	r1, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bf8:	6182      	str	r2, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bfa:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bfc:	f7fe fbb0 	bl	8000360 <HAL_ADC_Init>
 8001c00:	b118      	cbz	r0, 8001c0a <MX_ADC1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c02:	214f      	movs	r1, #79	; 0x4f
 8001c04:	4818      	ldr	r0, [pc, #96]	; (8001c68 <MX_ADC1_Init+0x9c>)
 8001c06:	f000 fdf5 	bl	80027f4 <_Error_Handler>
  }

    /**Configure the ADC multi-mode 
    */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c0a:	4918      	ldr	r1, [pc, #96]	; (8001c6c <MX_ADC1_Init+0xa0>)
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c0c:	4815      	ldr	r0, [pc, #84]	; (8001c64 <MX_ADC1_Init+0x98>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	600b      	str	r3, [r1, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c12:	f7fe fea5 	bl	8000960 <HAL_ADCEx_MultiModeConfigChannel>
 8001c16:	b118      	cbz	r0, 8001c20 <MX_ADC1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c18:	2157      	movs	r1, #87	; 0x57
 8001c1a:	4813      	ldr	r0, [pc, #76]	; (8001c68 <MX_ADC1_Init+0x9c>)
 8001c1c:	f000 fdea 	bl	80027f4 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c20:	4c13      	ldr	r4, [pc, #76]	; (8001c70 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c22:	4810      	ldr	r0, [pc, #64]	; (8001c64 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	6023      	str	r3, [r4, #0]
  sConfig.Rank = 1;
 8001c28:	6063      	str	r3, [r4, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001c2a:	2205      	movs	r2, #5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c2c:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c2e:	4621      	mov	r1, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c30:	60e3      	str	r3, [r4, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001c32:	60a2      	str	r2, [r4, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c34:	6123      	str	r3, [r4, #16]
  sConfig.Offset = 0;
 8001c36:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c38:	f7fe fd12 	bl	8000660 <HAL_ADC_ConfigChannel>
 8001c3c:	b118      	cbz	r0, 8001c46 <MX_ADC1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c3e:	2164      	movs	r1, #100	; 0x64
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <MX_ADC1_Init+0x9c>)
 8001c42:	f000 fdd7 	bl	80027f4 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c46:	2302      	movs	r3, #2
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c48:	4909      	ldr	r1, [pc, #36]	; (8001c70 <MX_ADC1_Init+0xa4>)
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_2;
 8001c4c:	6023      	str	r3, [r4, #0]
  sConfig.Rank = 2;
 8001c4e:	6063      	str	r3, [r4, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c50:	f7fe fd06 	bl	8000660 <HAL_ADC_ConfigChannel>
 8001c54:	b128      	cbz	r0, 8001c62 <MX_ADC1_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c56:	216d      	movs	r1, #109	; 0x6d
 8001c58:	4803      	ldr	r0, [pc, #12]	; (8001c68 <MX_ADC1_Init+0x9c>)
  }

}
 8001c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001c5e:	f000 bdc9 	b.w	80027f4 <_Error_Handler>
 8001c62:	bd10      	pop	{r4, pc}
 8001c64:	2000008c 	.word	0x2000008c
 8001c68:	08003074 	.word	0x08003074
 8001c6c:	2000002c 	.word	0x2000002c
 8001c70:	20000124 	.word	0x20000124

08001c74 <MX_ADC2_Init>:
void MX_ADC2_Init(void)
{

    /**Common config 
    */
  hadc2.Instance = ADC2;
 8001c74:	482b      	ldr	r0, [pc, #172]	; (8001d24 <MX_ADC2_Init+0xb0>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c76:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <MX_ADC2_Init+0xb4>)
{
 8001c78:	b510      	push	{r4, lr}
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c7a:	f44f 3440 	mov.w	r4, #196608	; 0x30000
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001c7e:	2200      	movs	r2, #0
  hadc2.Init.ContinuousConvMode = ENABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 4;
 8001c80:	2104      	movs	r1, #4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c82:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c86:	2301      	movs	r3, #1
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001c88:	6082      	str	r2, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c8a:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001c8c:	61c3      	str	r3, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c8e:	6242      	str	r2, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c90:	6302      	str	r2, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c92:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c94:	60c2      	str	r2, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001c96:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001c98:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c9a:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001c9c:	6182      	str	r2, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c9e:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ca0:	f7fe fb5e 	bl	8000360 <HAL_ADC_Init>
 8001ca4:	b118      	cbz	r0, 8001cae <MX_ADC2_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ca6:	2187      	movs	r1, #135	; 0x87
 8001ca8:	4820      	ldr	r0, [pc, #128]	; (8001d2c <MX_ADC2_Init+0xb8>)
 8001caa:	f000 fda3 	bl	80027f4 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cae:	4c20      	ldr	r4, [pc, #128]	; (8001d30 <MX_ADC2_Init+0xbc>)
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cb0:	481c      	ldr	r0, [pc, #112]	; (8001d24 <MX_ADC2_Init+0xb0>)
  sConfig.Channel = ADC_CHANNEL_1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	6023      	str	r3, [r4, #0]
  sConfig.Rank = 1;
 8001cb6:	6063      	str	r3, [r4, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001cb8:	2205      	movs	r2, #5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cba:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cbc:	4621      	mov	r1, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cbe:	60e3      	str	r3, [r4, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001cc0:	60a2      	str	r2, [r4, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cc2:	6123      	str	r3, [r4, #16]
  sConfig.Offset = 0;
 8001cc4:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cc6:	f7fe fccb 	bl	8000660 <HAL_ADC_ConfigChannel>
 8001cca:	b118      	cbz	r0, 8001cd4 <MX_ADC2_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ccc:	2194      	movs	r1, #148	; 0x94
 8001cce:	4817      	ldr	r0, [pc, #92]	; (8001d2c <MX_ADC2_Init+0xb8>)
 8001cd0:	f000 fd90 	bl	80027f4 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cd4:	2302      	movs	r3, #2
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cd6:	4916      	ldr	r1, [pc, #88]	; (8001d30 <MX_ADC2_Init+0xbc>)
 8001cd8:	4812      	ldr	r0, [pc, #72]	; (8001d24 <MX_ADC2_Init+0xb0>)
  sConfig.Channel = ADC_CHANNEL_2;
 8001cda:	6023      	str	r3, [r4, #0]
  sConfig.Rank = 2;
 8001cdc:	6063      	str	r3, [r4, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cde:	f7fe fcbf 	bl	8000660 <HAL_ADC_ConfigChannel>
 8001ce2:	b118      	cbz	r0, 8001cec <MX_ADC2_Init+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ce4:	219d      	movs	r1, #157	; 0x9d
 8001ce6:	4811      	ldr	r0, [pc, #68]	; (8001d2c <MX_ADC2_Init+0xb8>)
 8001ce8:	f000 fd84 	bl	80027f4 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cec:	2303      	movs	r3, #3
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cee:	4910      	ldr	r1, [pc, #64]	; (8001d30 <MX_ADC2_Init+0xbc>)
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <MX_ADC2_Init+0xb0>)
  sConfig.Channel = ADC_CHANNEL_3;
 8001cf2:	6023      	str	r3, [r4, #0]
  sConfig.Rank = 3;
 8001cf4:	6063      	str	r3, [r4, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cf6:	f7fe fcb3 	bl	8000660 <HAL_ADC_ConfigChannel>
 8001cfa:	b118      	cbz	r0, 8001d04 <MX_ADC2_Init+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001cfc:	21a6      	movs	r1, #166	; 0xa6
 8001cfe:	480b      	ldr	r0, [pc, #44]	; (8001d2c <MX_ADC2_Init+0xb8>)
 8001d00:	f000 fd78 	bl	80027f4 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d04:	2304      	movs	r3, #4
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d06:	490a      	ldr	r1, [pc, #40]	; (8001d30 <MX_ADC2_Init+0xbc>)
 8001d08:	4806      	ldr	r0, [pc, #24]	; (8001d24 <MX_ADC2_Init+0xb0>)
  sConfig.Channel = ADC_CHANNEL_4;
 8001d0a:	6023      	str	r3, [r4, #0]
  sConfig.Rank = 4;
 8001d0c:	6063      	str	r3, [r4, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d0e:	f7fe fca7 	bl	8000660 <HAL_ADC_ConfigChannel>
 8001d12:	b128      	cbz	r0, 8001d20 <MX_ADC2_Init+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d14:	21af      	movs	r1, #175	; 0xaf
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_ADC2_Init+0xb8>)
  }

}
 8001d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001d1c:	f000 bd6a 	b.w	80027f4 <_Error_Handler>
 8001d20:	bd10      	pop	{r4, pc}
 8001d22:	bf00      	nop
 8001d24:	20000038 	.word	0x20000038
 8001d28:	50000100 	.word	0x50000100
 8001d2c:	08003074 	.word	0x08003074
 8001d30:	20000124 	.word	0x20000124

08001d34 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d34:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001d36:	6803      	ldr	r3, [r0, #0]
 8001d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8001d3c:	b088      	sub	sp, #32
 8001d3e:	4605      	mov	r5, r0
  if(adcHandle->Instance==ADC1)
 8001d40:	d137      	bne.n	8001db2 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d42:	4a37      	ldr	r2, [pc, #220]	; (8001e20 <HAL_ADC_MspInit+0xec>)
 8001d44:	6813      	ldr	r3, [r2, #0]
 8001d46:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d48:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d4c:	d109      	bne.n	8001d62 <HAL_ADC_MspInit+0x2e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <HAL_ADC_MspInit+0xf0>)
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d56:	615a      	str	r2, [r3, #20]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d62:	4c31      	ldr	r4, [pc, #196]	; (8001e28 <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d64:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d70:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f7fe ff9c 	bl	8000cb0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <HAL_ADC_MspInit+0xf8>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d7a:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7c:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d88:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8e:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d90:	2320      	movs	r3, #32
 8001d92:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d94:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d9c:	f7fe fece 	bl	8000b3c <HAL_DMA_Init>
 8001da0:	b118      	cbz	r0, 8001daa <HAL_ADC_MspInit+0x76>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001da2:	21da      	movs	r1, #218	; 0xda
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
 8001da4:	4822      	ldr	r0, [pc, #136]	; (8001e30 <HAL_ADC_MspInit+0xfc>)
 8001da6:	f000 fd25 	bl	80027f4 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001daa:	63ec      	str	r4, [r5, #60]	; 0x3c
 8001dac:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001dae:	b008      	add	sp, #32
 8001db0:	bd70      	pop	{r4, r5, r6, pc}
  else if(adcHandle->Instance==ADC2)
 8001db2:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <HAL_ADC_MspInit+0x100>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d1fa      	bne.n	8001dae <HAL_ADC_MspInit+0x7a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_ADC_MspInit+0xec>)
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001dbe:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001dc0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001dc2:	d109      	bne.n	8001dd8 <HAL_ADC_MspInit+0xa4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_ADC_MspInit+0xf0>)
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dcc:	615a      	str	r2, [r3, #20]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	9b02      	ldr	r3, [sp, #8]
    hdma_adc2.Instance = DMA1_Channel2;
 8001dd8:	4c17      	ldr	r4, [pc, #92]	; (8001e38 <HAL_ADC_MspInit+0x104>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dda:	23f0      	movs	r3, #240	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dde:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f7fe ff60 	bl	8000cb0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_ADC_MspInit+0x108>)
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df2:	60a6      	str	r6, [r4, #8]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df4:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	60e3      	str	r3, [r4, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e00:	6123      	str	r3, [r4, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e06:	6163      	str	r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001e08:	4620      	mov	r0, r4
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	61a3      	str	r3, [r4, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001e0e:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001e10:	f7fe fe94 	bl	8000b3c <HAL_DMA_Init>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d0c8      	beq.n	8001daa <HAL_ADC_MspInit+0x76>
      _Error_Handler(__FILE__, __LINE__);
 8001e18:	f240 1105 	movw	r1, #261	; 0x105
 8001e1c:	e7c2      	b.n	8001da4 <HAL_ADC_MspInit+0x70>
 8001e1e:	bf00      	nop
 8001e20:	20000020 	.word	0x20000020
 8001e24:	40021000 	.word	0x40021000
 8001e28:	200000e0 	.word	0x200000e0
 8001e2c:	40020008 	.word	0x40020008
 8001e30:	08003074 	.word	0x08003074
 8001e34:	50000100 	.word	0x50000100
 8001e38:	2000013c 	.word	0x2000013c
 8001e3c:	4002001c 	.word	0x4002001c

08001e40 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <MX_DMA_Init+0x4c>)
{
 8001e42:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	615a      	str	r2, [r3, #20]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2101      	movs	r1, #1
 8001e58:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e5a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001e5c:	f7fe fe06 	bl	8000a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e60:	200b      	movs	r0, #11
 8001e62:	f7fe fe37 	bl	8000ad4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2102      	movs	r1, #2
 8001e6a:	200c      	movs	r0, #12
 8001e6c:	f7fe fdfe 	bl	8000a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e70:	200c      	movs	r0, #12
 8001e72:	f7fe fe2f 	bl	8000ad4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2103      	movs	r1, #3
 8001e7a:	200e      	movs	r0, #14
 8001e7c:	f7fe fdf6 	bl	8000a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001e80:	200e      	movs	r0, #14
 8001e82:	f7fe fe27 	bl	8000ad4 <HAL_NVIC_EnableIRQ>

}
 8001e86:	b003      	add	sp, #12
 8001e88:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e8c:	40021000 	.word	0x40021000

08001e90 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e90:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <MX_GPIO_Init+0xa8>)
{
 8001e92:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e94:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001e96:	4d29      	ldr	r5, [pc, #164]	; (8001f3c <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e98:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001e9c:	615a      	str	r2, [r3, #20]
 8001e9e:	695a      	ldr	r2, [r3, #20]
{
 8001ea0:	b088      	sub	sp, #32
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ea2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001ea6:	9200      	str	r2, [sp, #0]
 8001ea8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001eb0:	615a      	str	r2, [r3, #20]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001eb8:	9201      	str	r2, [sp, #4]
 8001eba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ec2:	615a      	str	r2, [r3, #20]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eca:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8001ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ed8:	f7fe ffaa 	bl	8000e30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	4628      	mov	r0, r5
 8001ee0:	2118      	movs	r1, #24
 8001ee2:	f7fe ffa5 	bl	8000e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ee8:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	a903      	add	r1, sp, #12
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ef0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f7fe fedb 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001efa:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	a903      	add	r1, sp, #12
 8001efe:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f00:	9303      	str	r3, [sp, #12]

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f02:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f04:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	f7fe fed2 	bl	8000cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001f0c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	a903      	add	r1, sp, #12
 8001f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001f16:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f7fe fec7 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001f22:	2318      	movs	r3, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f24:	a903      	add	r1, sp, #12
 8001f26:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001f28:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f7fe febe 	bl	8000cb0 <HAL_GPIO_Init>

}
 8001f34:	b008      	add	sp, #32
 8001f36:	bd70      	pop	{r4, r5, r6, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	48000400 	.word	0x48000400

08001f40 <int_sort>:
uint16_t sortdata1[5],sortdata2[5],sortdata3[5],sortdata4[5],sortdata5[5],sortdata6[5];
uint16_t out_lowpass[6];
uint16_t medianfilter_out1,medianfilter_out2,medianfilter_out3,medianfilter_out4,medianfilter_out5,medianfilter_out6;
uint16_t out_lowpass_temp1,out_lowpass_temp2,out_lowpass_temp3,out_lowpass_temp4,out_lowpass_temp5,out_lowpass_temp6;
int int_sort( const void *p, const void *q ) {
    return *(uint16_t*)p - *(uint16_t*)q;
 8001f40:	8800      	ldrh	r0, [r0, #0]
 8001f42:	880b      	ldrh	r3, [r1, #0]
}
 8001f44:	1ac0      	subs	r0, r0, r3
 8001f46:	4770      	bx	lr

08001f48 <_Error_Handler.constprop.0>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
 8001f48:	b508      	push	{r3, lr}
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f54:	f7fe ff6c 	bl	8000e30 <HAL_GPIO_WritePin>
 8001f58:	e7f7      	b.n	8001f4a <_Error_Handler.constprop.0+0x2>
	...

08001f5c <HAL_UART_TxCpltCallback>:
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8001f5c:	2108      	movs	r1, #8
 8001f5e:	4801      	ldr	r0, [pc, #4]	; (8001f64 <HAL_UART_TxCpltCallback+0x8>)
 8001f60:	f7fe bf6b 	b.w	8000e3a <HAL_GPIO_TogglePin>
 8001f64:	48000400 	.word	0x48000400

08001f68 <SystemClock_Config>:
{
 8001f68:	b530      	push	{r4, r5, lr}
 8001f6a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f70:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f72:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f74:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f76:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f78:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f7a:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f80:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f82:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f84:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f86:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f88:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f8a:	f7fe ff5b 	bl	8000e44 <HAL_RCC_OscConfig>
 8001f8e:	b108      	cbz	r0, 8001f94 <SystemClock_Config+0x2c>
    _Error_Handler(__FILE__, __LINE__);
 8001f90:	f7ff ffda 	bl	8001f48 <_Error_Handler.constprop.0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f94:	230f      	movs	r3, #15
 8001f96:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f98:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9e:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa4:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fa6:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fa8:	f7ff f9f0 	bl	800138c <HAL_RCC_ClockConfig>
 8001fac:	2800      	cmp	r0, #0
 8001fae:	d1ef      	bne.n	8001f90 <SystemClock_Config+0x28>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001fb0:	9008      	str	r0, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb2:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fb4:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb6:	f7ff fae1 	bl	800157c <HAL_RCCEx_PeriphCLKConfig>
 8001fba:	4604      	mov	r4, r0
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d1e7      	bne.n	8001f90 <SystemClock_Config+0x28>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001fc0:	f7ff faa6 	bl	8001510 <HAL_RCC_GetHCLKFreq>
 8001fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fcc:	f7fe fd8e 	bl	8000aec <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001fd0:	2004      	movs	r0, #4
 8001fd2:	f7fe fda1 	bl	8000b18 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fd6:	4622      	mov	r2, r4
 8001fd8:	4621      	mov	r1, r4
 8001fda:	f04f 30ff 	mov.w	r0, #4294967295
 8001fde:	f7fe fd45 	bl	8000a6c <HAL_NVIC_SetPriority>
}
 8001fe2:	b017      	add	sp, #92	; 0x5c
 8001fe4:	bd30      	pop	{r4, r5, pc}
	...

08001fe8 <main>:
{
 8001fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	ed2d 8b02 	vpush	{d8}
 8001ff0:	b083      	sub	sp, #12
  HAL_Init();
 8001ff2:	f7fe f8fd 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8001ff6:	f7ff ffb7 	bl	8001f68 <SystemClock_Config>
  MX_GPIO_Init();
 8001ffa:	f7ff ff49 	bl	8001e90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ffe:	f7ff ff1f 	bl	8001e40 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002002:	f000 fc95 	bl	8002930 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002006:	f000 fcb5 	bl	8002974 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800200a:	f7ff fddf 	bl	8001bcc <MX_ADC1_Init>
  MX_ADC2_Init();
 800200e:	f7ff fe31 	bl	8001c74 <MX_ADC2_Init>
  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==1){
 8002012:	2108      	movs	r1, #8
 8002014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002018:	f7fe ff04 	bl	8000e24 <HAL_GPIO_ReadPin>
 800201c:	2801      	cmp	r0, #1
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,0);
 800201e:	bf0c      	ite	eq
 8002020:	2200      	moveq	r2, #0
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 8002022:	2201      	movne	r2, #1
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202c:	f7fe ff00 	bl	8000e30 <HAL_GPIO_WritePin>
    init_xprintf(&huart2);
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <main+0x60>)
 8002032:	f000 fd27 	bl	8002a84 <init_xprintf>
    xdev_out(uart_putc);
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <main+0x64>)
 8002038:	4a05      	ldr	r2, [pc, #20]	; (8002050 <main+0x68>)
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800203a:	4806      	ldr	r0, [pc, #24]	; (8002054 <main+0x6c>)
    xdev_out(uart_putc);
 800203c:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800203e:	f7fe f98f 	bl	8000360 <HAL_ADC_Init>
 8002042:	b148      	cbz	r0, 8002058 <main+0x70>
  	  Error_Handler();
 8002044:	f7ff ff80 	bl	8001f48 <_Error_Handler.constprop.0>
 8002048:	200002f4 	.word	0x200002f4
 800204c:	20000368 	.word	0x20000368
 8002050:	08002a91 	.word	0x08002a91
 8002054:	2000008c 	.word	0x2000008c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002058:	49c9      	ldr	r1, [pc, #804]	; (8002380 <main+0x398>)
 800205a:	48ca      	ldr	r0, [pc, #808]	; (8002384 <main+0x39c>)
 800205c:	f7fe fb00 	bl	8000660 <HAL_ADC_ConfigChannel>
 8002060:	2800      	cmp	r0, #0
 8002062:	d1ef      	bne.n	8002044 <main+0x5c>
     if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)aADCxConvertedDataR,2) != HAL_OK)
 8002064:	2202      	movs	r2, #2
 8002066:	49c8      	ldr	r1, [pc, #800]	; (8002388 <main+0x3a0>)
 8002068:	48c6      	ldr	r0, [pc, #792]	; (8002384 <main+0x39c>)
 800206a:	f7fe fa71 	bl	8000550 <HAL_ADC_Start_DMA>
 800206e:	2800      	cmp	r0, #0
 8002070:	d1e8      	bne.n	8002044 <main+0x5c>
     if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002072:	48c6      	ldr	r0, [pc, #792]	; (800238c <main+0x3a4>)
 8002074:	f7fe f974 	bl	8000360 <HAL_ADC_Init>
 8002078:	2800      	cmp	r0, #0
 800207a:	d1e3      	bne.n	8002044 <main+0x5c>
     if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800207c:	49c0      	ldr	r1, [pc, #768]	; (8002380 <main+0x398>)
 800207e:	48c3      	ldr	r0, [pc, #780]	; (800238c <main+0x3a4>)
 8002080:	f7fe faee 	bl	8000660 <HAL_ADC_ConfigChannel>
 8002084:	2800      	cmp	r0, #0
 8002086:	d1dd      	bne.n	8002044 <main+0x5c>
      if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *)aADCxConvertedDataL,4) != HAL_OK)
 8002088:	2204      	movs	r2, #4
 800208a:	49c1      	ldr	r1, [pc, #772]	; (8002390 <main+0x3a8>)
 800208c:	48bf      	ldr	r0, [pc, #764]	; (800238c <main+0x3a4>)
 800208e:	f7fe fa5f 	bl	8000550 <HAL_ADC_Start_DMA>
 8002092:	2800      	cmp	r0, #0
 8002094:	d1d6      	bne.n	8002044 <main+0x5c>
     count=0;
 8002096:	4bbf      	ldr	r3, [pc, #764]	; (8002394 <main+0x3ac>)
  	   	  qsort(sortdata1,data_cnt,2,int_sort);
 8002098:	f8df b36c 	ldr.w	fp, [pc, #876]	; 8002408 <main+0x420>
     count=0;
 800209c:	7018      	strb	r0, [r3, #0]
 800209e:	23c8      	movs	r3, #200	; 0xc8
 80020a0:	9300      	str	r3, [sp, #0]
    	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80020a2:	2201      	movs	r2, #1
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ac:	f7fe fec0 	bl	8000e30 <HAL_GPIO_WritePin>
    	  tempdata1[count]=aADCxConvertedDataR[0];
 80020b0:	4bb8      	ldr	r3, [pc, #736]	; (8002394 <main+0x3ac>)
  	   	  tempdata3[count]=aADCxConvertedDataL[3];
 80020b2:	4db7      	ldr	r5, [pc, #732]	; (8002390 <main+0x3a8>)
    	  tempdata1[count]=aADCxConvertedDataR[0];
 80020b4:	781c      	ldrb	r4, [r3, #0]
 80020b6:	4bb4      	ldr	r3, [pc, #720]	; (8002388 <main+0x3a0>)
  	   	  tempdata2[count]=aADCxConvertedDataR[1];
 80020b8:	4eb7      	ldr	r6, [pc, #732]	; (8002398 <main+0x3b0>)
    	  tempdata1[count]=aADCxConvertedDataR[0];
 80020ba:	4fb8      	ldr	r7, [pc, #736]	; (800239c <main+0x3b4>)
 80020bc:	881a      	ldrh	r2, [r3, #0]
  	   	  tempdata3[count]=aADCxConvertedDataL[3];
 80020be:	48b8      	ldr	r0, [pc, #736]	; (80023a0 <main+0x3b8>)
  	   	  tempdata2[count]=aADCxConvertedDataR[1];
 80020c0:	885b      	ldrh	r3, [r3, #2]
 80020c2:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
  	   	  tempdata4[count]=aADCxConvertedDataL[0];
 80020c6:	49b7      	ldr	r1, [pc, #732]	; (80023a4 <main+0x3bc>)
  	   	  tempdata3[count]=aADCxConvertedDataL[3];
 80020c8:	88eb      	ldrh	r3, [r5, #6]
    	  tempdata1[count]=aADCxConvertedDataR[0];
 80020ca:	f827 2014 	strh.w	r2, [r7, r4, lsl #1]
  	   	  tempdata3[count]=aADCxConvertedDataL[3];
 80020ce:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
  	   	  tempdata5[count]=aADCxConvertedDataL[1];
 80020d2:	4ab5      	ldr	r2, [pc, #724]	; (80023a8 <main+0x3c0>)
  	   	  tempdata4[count]=aADCxConvertedDataL[0];
 80020d4:	882b      	ldrh	r3, [r5, #0]
 80020d6:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
  	   	  tempdata5[count]=aADCxConvertedDataL[1];
 80020da:	886b      	ldrh	r3, [r5, #2]
 80020dc:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
  	   	  tempdata6[count]=aADCxConvertedDataL[2];
 80020e0:	4bb2      	ldr	r3, [pc, #712]	; (80023ac <main+0x3c4>)
 80020e2:	88ad      	ldrh	r5, [r5, #4]
 80020e4:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
 80020e8:	46bc      	mov	ip, r7
 80020ea:	46b6      	mov	lr, r6
  	   	  sortdata1[i]=tempdata1[i];
 80020ec:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80023bc <main+0x3d4>
  	   	  sortdata2[i]=tempdata2[i];
 80020f0:	4daf      	ldr	r5, [pc, #700]	; (80023b0 <main+0x3c8>)
  	   	  sortdata3[i]=tempdata3[i];
 80020f2:	4eb0      	ldr	r6, [pc, #704]	; (80023b4 <main+0x3cc>)
  	   	  sortdata4[i]=tempdata4[i];
 80020f4:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 80023c8 <main+0x3e0>
  	   	  sortdata5[i]=tempdata5[i];
 80020f8:	4faf      	ldr	r7, [pc, #700]	; (80023b8 <main+0x3d0>)
  	   	  sortdata6[i]=tempdata6[i];
 80020fa:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80023cc <main+0x3e4>
 80020fe:	9301      	str	r3, [sp, #4]
  	   	  tempdata6[count]=aADCxConvertedDataL[2];
 8002100:	2400      	movs	r4, #0
  	   	  sortdata1[i]=tempdata1[i];
 8002102:	f83c 3014 	ldrh.w	r3, [ip, r4, lsl #1]
 8002106:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
  	   	  sortdata2[i]=tempdata2[i];
 800210a:	f83e 3014 	ldrh.w	r3, [lr, r4, lsl #1]
 800210e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
  	   	  sortdata3[i]=tempdata3[i];
 8002112:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
 8002116:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
  	   	  sortdata4[i]=tempdata4[i];
 800211a:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
 800211e:	f828 3014 	strh.w	r3, [r8, r4, lsl #1]
  	   	  sortdata5[i]=tempdata5[i];
 8002122:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8002126:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
  	   	  sortdata6[i]=tempdata6[i];
 800212a:	9b01      	ldr	r3, [sp, #4]
 800212c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002130:	f82a 3014 	strh.w	r3, [sl, r4, lsl #1]
 8002134:	3401      	adds	r4, #1
  	   	  for(uint8_t i=0;i<5;i++){
 8002136:	2c05      	cmp	r4, #5
 8002138:	d1e3      	bne.n	8002102 <main+0x11a>
  	   	  qsort(sortdata1,data_cnt,2,int_sort);
 800213a:	4621      	mov	r1, r4
 800213c:	465b      	mov	r3, fp
 800213e:	2202      	movs	r2, #2
 8002140:	489e      	ldr	r0, [pc, #632]	; (80023bc <main+0x3d4>)
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8002142:	ed9f 8a9f 	vldr	s16, [pc, #636]	; 80023c0 <main+0x3d8>
 8002146:	eddf 8a9f 	vldr	s17, [pc, #636]	; 80023c4 <main+0x3dc>
  	   	  qsort(sortdata1,data_cnt,2,int_sort);
 800214a:	f000 fe3e 	bl	8002dca <qsort>
  	   	  qsort(sortdata2,data_cnt,2,int_sort);
 800214e:	4621      	mov	r1, r4
 8002150:	465b      	mov	r3, fp
 8002152:	2202      	movs	r2, #2
 8002154:	4896      	ldr	r0, [pc, #600]	; (80023b0 <main+0x3c8>)
 8002156:	f000 fe38 	bl	8002dca <qsort>
  	   	  qsort(sortdata3,data_cnt,2,int_sort);
 800215a:	4621      	mov	r1, r4
 800215c:	465b      	mov	r3, fp
 800215e:	2202      	movs	r2, #2
 8002160:	4894      	ldr	r0, [pc, #592]	; (80023b4 <main+0x3cc>)
 8002162:	f000 fe32 	bl	8002dca <qsort>
  	   	  qsort(sortdata4,data_cnt,2,int_sort);
 8002166:	4621      	mov	r1, r4
 8002168:	465b      	mov	r3, fp
 800216a:	2202      	movs	r2, #2
 800216c:	4896      	ldr	r0, [pc, #600]	; (80023c8 <main+0x3e0>)
 800216e:	f000 fe2c 	bl	8002dca <qsort>
  	   	  qsort(sortdata5,data_cnt,2,int_sort);
 8002172:	4621      	mov	r1, r4
 8002174:	465b      	mov	r3, fp
 8002176:	2202      	movs	r2, #2
 8002178:	488f      	ldr	r0, [pc, #572]	; (80023b8 <main+0x3d0>)
 800217a:	f000 fe26 	bl	8002dca <qsort>
  	   	  qsort(sortdata6,data_cnt,2,int_sort);
 800217e:	4621      	mov	r1, r4
 8002180:	465b      	mov	r3, fp
 8002182:	2202      	movs	r2, #2
 8002184:	4891      	ldr	r0, [pc, #580]	; (80023cc <main+0x3e4>)
 8002186:	f000 fe20 	bl	8002dca <qsort>
  	   	  medianfilter_out1=sortdata1[2];
 800218a:	f8b9 4004 	ldrh.w	r4, [r9, #4]
 800218e:	4b90      	ldr	r3, [pc, #576]	; (80023d0 <main+0x3e8>)
  	   	  medianfilter_out2=sortdata2[2];
 8002190:	88ad      	ldrh	r5, [r5, #4]
  	   	  medianfilter_out1=sortdata1[2];
 8002192:	801c      	strh	r4, [r3, #0]
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8002194:	ee07 4a90 	vmov	s15, r4
 8002198:	4c8e      	ldr	r4, [pc, #568]	; (80023d4 <main+0x3ec>)
  	   	  medianfilter_out2=sortdata2[2];
 800219a:	4b8f      	ldr	r3, [pc, #572]	; (80023d8 <main+0x3f0>)
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 800219c:	8824      	ldrh	r4, [r4, #0]
  	   	  medianfilter_out2=sortdata2[2];
 800219e:	801d      	strh	r5, [r3, #0]
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 80021a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a4:	ee07 4a90 	vmov	s15, r4
 80021a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  	   	  medianfilter_out3=sortdata3[2];
 80021ac:	4b8b      	ldr	r3, [pc, #556]	; (80023dc <main+0x3f4>)
 80021ae:	88b0      	ldrh	r0, [r6, #4]
 80021b0:	8018      	strh	r0, [r3, #0]
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 80021b2:	ee67 7a88 	vmul.f32	s15, s15, s16
  	   	  medianfilter_out4=sortdata4[2];
 80021b6:	4b8a      	ldr	r3, [pc, #552]	; (80023e0 <main+0x3f8>)
 80021b8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80021bc:	8019      	strh	r1, [r3, #0]
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 80021be:	eee7 7a28 	vfma.f32	s15, s14, s17
  	   	  medianfilter_out5=sortdata5[2];
 80021c2:	4b88      	ldr	r3, [pc, #544]	; (80023e4 <main+0x3fc>)
 80021c4:	88ba      	ldrh	r2, [r7, #4]
 80021c6:	801a      	strh	r2, [r3, #0]
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 80021c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  	   	  medianfilter_out6=sortdata6[2];
 80021cc:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 80021d0:	f8df a238 	ldr.w	sl, [pc, #568]	; 800240c <main+0x424>
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 80021d4:	edcd 7a01 	vstr	s15, [sp, #4]
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 80021d8:	ee07 5a90 	vmov	s15, r5
 80021dc:	f8ba 5000 	ldrh.w	r5, [sl]
  	   	  medianfilter_out6=sortdata6[2];
 80021e0:	4f81      	ldr	r7, [pc, #516]	; (80023e8 <main+0x400>)
  	   	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 80021e2:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8002410 <main+0x428>
  	   	  medianfilter_out6=sortdata6[2];
 80021e6:	803b      	strh	r3, [r7, #0]
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 80021e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ec:	ee07 5a90 	vmov	s15, r5
 80021f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 80021f4:	f8bd 7004 	ldrh.w	r7, [sp, #4]
  	   	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 80021f8:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8002414 <main+0x42c>
  	   	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 80021fc:	f8df c218 	ldr.w	ip, [pc, #536]	; 8002418 <main+0x430>
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8002200:	4c7a      	ldr	r4, [pc, #488]	; (80023ec <main+0x404>)
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 8002202:	f8df e218 	ldr.w	lr, [pc, #536]	; 800241c <main+0x434>
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8002206:	8027      	strh	r7, [r4, #0]
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8002208:	ee67 7a88 	vmul.f32	s15, s15, s16
  	   	  out_lowpass_temp1=out_lowpass[0];
 800220c:	4e71      	ldr	r6, [pc, #452]	; (80023d4 <main+0x3ec>)
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 800220e:	eee7 7a28 	vfma.f32	s15, s14, s17
 8002212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002216:	edcd 7a01 	vstr	s15, [sp, #4]
  	   	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 800221a:	ee07 0a90 	vmov	s15, r0
 800221e:	f8b9 0000 	ldrh.w	r0, [r9]
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8002222:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8002226:	8065      	strh	r5, [r4, #2]
  	   	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 8002228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800222c:	ee07 0a90 	vmov	s15, r0
 8002230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002234:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002238:	eee7 7a28 	vfma.f32	s15, s14, s17
 800223c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002240:	edcd 7a01 	vstr	s15, [sp, #4]
  	   	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 8002244:	ee07 1a90 	vmov	s15, r1
 8002248:	f8b8 1000 	ldrh.w	r1, [r8]
  	   	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 800224c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002250:	80a0      	strh	r0, [r4, #4]
  	   	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 8002252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002256:	ee07 1a90 	vmov	s15, r1
 800225a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002262:	eee7 7a28 	vfma.f32	s15, s14, s17
 8002266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800226a:	edcd 7a01 	vstr	s15, [sp, #4]
  	   	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 800226e:	ee07 2a90 	vmov	s15, r2
 8002272:	f8bc 2000 	ldrh.w	r2, [ip]
  	   	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 8002276:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800227a:	80e1      	strh	r1, [r4, #6]
  	   	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 800227c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002280:	ee07 2a90 	vmov	s15, r2
 8002284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002288:	ee67 7a88 	vmul.f32	s15, s15, s16
 800228c:	eee7 7a28 	vfma.f32	s15, s14, s17
 8002290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002294:	edcd 7a01 	vstr	s15, [sp, #4]
 8002298:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800229c:	8122      	strh	r2, [r4, #8]
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	f8be 3000 	ldrh.w	r3, [lr]
  	   	  out_lowpass_temp3=out_lowpass[2];
 80022a6:	f8a9 0000 	strh.w	r0, [r9]
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80022aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  	   	  out_lowpass_temp4=out_lowpass[3];
 80022b6:	f8a8 1000 	strh.w	r1, [r8]
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80022ba:	ee67 7a88 	vmul.f32	s15, s15, s16
  	  	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==0){
 80022be:	2108      	movs	r1, #8
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80022c0:	eee7 7a28 	vfma.f32	s15, s14, s17
  	  	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==0){
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  	   	  out_lowpass_temp2=out_lowpass[1];
 80022c8:	f8aa 5000 	strh.w	r5, [sl]
  	   	  out_lowpass_temp1=out_lowpass[0];
 80022cc:	8037      	strh	r7, [r6, #0]
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80022ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  	   	  out_lowpass_temp5=out_lowpass[4];
 80022d2:	f8ac 2000 	strh.w	r2, [ip]
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80022d6:	edcd 7a01 	vstr	s15, [sp, #4]
 80022da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80022de:	8163      	strh	r3, [r4, #10]
  	   	  out_lowpass_temp6=out_lowpass[5];
 80022e0:	f8ae 3000 	strh.w	r3, [lr]
  	  	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==0){
 80022e4:	f7fe fd9e 	bl	8000e24 <HAL_GPIO_ReadPin>
 80022e8:	4625      	mov	r5, r4
 80022ea:	b980      	cbnz	r0, 800230e <main+0x326>
  	   	  xprintf("raw=%d",aADCxConvertedDataL[3]);
 80022ec:	4b28      	ldr	r3, [pc, #160]	; (8002390 <main+0x3a8>)
 80022ee:	4840      	ldr	r0, [pc, #256]	; (80023f0 <main+0x408>)
 80022f0:	88d9      	ldrh	r1, [r3, #6]
 80022f2:	f000 fcd5 	bl	8002ca0 <xprintf>
  	   	  xprintf(" medianfilter1=%d",medianfilter_out3);
 80022f6:	4b39      	ldr	r3, [pc, #228]	; (80023dc <main+0x3f4>)
 80022f8:	483e      	ldr	r0, [pc, #248]	; (80023f4 <main+0x40c>)
 80022fa:	8819      	ldrh	r1, [r3, #0]
 80022fc:	f000 fcd0 	bl	8002ca0 <xprintf>
  	   	  xprintf(" out1=%d",out_lowpass[2]);
 8002300:	483d      	ldr	r0, [pc, #244]	; (80023f8 <main+0x410>)
 8002302:	88a1      	ldrh	r1, [r4, #4]
 8002304:	f000 fccc 	bl	8002ca0 <xprintf>
  	   	  xprintf("\r\n");
 8002308:	483c      	ldr	r0, [pc, #240]	; (80023fc <main+0x414>)
 800230a:	f000 fcc9 	bl	8002ca0 <xprintf>
     	  if(count>=4){
 800230e:	4a21      	ldr	r2, [pc, #132]	; (8002394 <main+0x3ac>)
 8002310:	7813      	ldrb	r3, [r2, #0]
 8002312:	2b03      	cmp	r3, #3
     		  count=0;
 8002314:	bf8c      	ite	hi
 8002316:	2300      	movhi	r3, #0
     		  count++;
 8002318:	3301      	addls	r3, #1
 800231a:	7013      	strb	r3, [r2, #0]
 800231c:	9b00      	ldr	r3, [sp, #0]
 800231e:	3b01      	subs	r3, #1
 8002320:	b29b      	uxth	r3, r3
 8002322:	9300      	str	r3, [sp, #0]
     for(uint16_t start_wait_delay=0;start_wait_delay<200;start_wait_delay++){
 8002324:	2b00      	cmp	r3, #0
 8002326:	f47f aebc 	bne.w	80020a2 <main+0xba>
     Txbuf[0]=254;
 800232a:	4935      	ldr	r1, [pc, #212]	; (8002400 <main+0x418>)
     if (HAL_UART_Transmit_DMA(&huart1, (uint8_t *)Txbuf,14) != HAL_OK)
 800232c:	4835      	ldr	r0, [pc, #212]	; (8002404 <main+0x41c>)
     Txbuf[0]=254;
 800232e:	23fe      	movs	r3, #254	; 0xfe
 8002330:	700b      	strb	r3, [r1, #0]
     Txbuf[1]= (uint8_t)( (out_lowpass[0]<<2) & 0b0000000011111111);
 8002332:	882b      	ldrh	r3, [r5, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	704b      	strb	r3, [r1, #1]
     Txbuf[2]= (uint8_t)(((out_lowpass[0]<<2) & 0b1111111100000000)>>8);
 8002338:	121b      	asrs	r3, r3, #8
 800233a:	708b      	strb	r3, [r1, #2]
     Txbuf[3]= (uint8_t)( (out_lowpass[1]<<2) & 0b0000000011111111);
 800233c:	886b      	ldrh	r3, [r5, #2]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	70cb      	strb	r3, [r1, #3]
     Txbuf[4]= (uint8_t)(((out_lowpass[1]<<2) & 0b1111111100000000)>>8);
 8002342:	121b      	asrs	r3, r3, #8
 8002344:	710b      	strb	r3, [r1, #4]
     Txbuf[5]= (uint8_t)( (out_lowpass[2]<<2) & 0b0000000011111111);
 8002346:	88ab      	ldrh	r3, [r5, #4]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	714b      	strb	r3, [r1, #5]
     Txbuf[6]= (uint8_t)(((out_lowpass[2]<<2) & 0b1111111100000000)>>8);
 800234c:	121b      	asrs	r3, r3, #8
 800234e:	718b      	strb	r3, [r1, #6]
     Txbuf[7]= (uint8_t)( (out_lowpass[3]<<2) & 0b0000000011111111);
 8002350:	88eb      	ldrh	r3, [r5, #6]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	71cb      	strb	r3, [r1, #7]
     Txbuf[8]= (uint8_t)(((out_lowpass[3]<<2) & 0b1111111100000000)>>8);
 8002356:	121b      	asrs	r3, r3, #8
 8002358:	720b      	strb	r3, [r1, #8]
     Txbuf[9]= (uint8_t)( (out_lowpass[4]<<2) & 0b0000000011111111);
 800235a:	892b      	ldrh	r3, [r5, #8]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	724b      	strb	r3, [r1, #9]
     Txbuf[10]=(uint8_t)(((out_lowpass[4]<<2) & 0b1111111100000000)>>8);
 8002360:	121b      	asrs	r3, r3, #8
 8002362:	728b      	strb	r3, [r1, #10]
     Txbuf[11]=(uint8_t)( (out_lowpass[5]<<2) & 0b0000000011111111);
 8002364:	896b      	ldrh	r3, [r5, #10]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	72cb      	strb	r3, [r1, #11]
     Txbuf[12]=(uint8_t)(((out_lowpass[5]<<2) & 0b1111111100000000)>>8);
 800236a:	121b      	asrs	r3, r3, #8
 800236c:	730b      	strb	r3, [r1, #12]
     if (HAL_UART_Transmit_DMA(&huart1, (uint8_t *)Txbuf,14) != HAL_OK)
 800236e:	220e      	movs	r2, #14
     Txbuf[13]=253;
 8002370:	23fd      	movs	r3, #253	; 0xfd
 8002372:	734b      	strb	r3, [r1, #13]
     if (HAL_UART_Transmit_DMA(&huart1, (uint8_t *)Txbuf,14) != HAL_OK)
 8002374:	f7ff f9be 	bl	80016f4 <HAL_UART_Transmit_DMA>
 8002378:	2800      	cmp	r0, #0
 800237a:	f47f ae63 	bne.w	8002044 <main+0x5c>
 800237e:	e04f      	b.n	8002420 <main+0x438>
 8002380:	20000124 	.word	0x20000124
 8002384:	2000008c 	.word	0x2000008c
 8002388:	200001b8 	.word	0x200001b8
 800238c:	20000038 	.word	0x20000038
 8002390:	2000018e 	.word	0x2000018e
 8002394:	20000216 	.word	0x20000216
 8002398:	20000204 	.word	0x20000204
 800239c:	2000021e 	.word	0x2000021e
 80023a0:	200001fa 	.word	0x200001fa
 80023a4:	200001c6 	.word	0x200001c6
 80023a8:	20000196 	.word	0x20000196
 80023ac:	200001f0 	.word	0x200001f0
 80023b0:	200001bc 	.word	0x200001bc
 80023b4:	200001e4 	.word	0x200001e4
 80023b8:	200001da 	.word	0x200001da
 80023bc:	20000180 	.word	0x20000180
 80023c0:	3f4ccccd 	.word	0x3f4ccccd
 80023c4:	3e4ccccd 	.word	0x3e4ccccd
 80023c8:	20000236 	.word	0x20000236
 80023cc:	200001ae 	.word	0x200001ae
 80023d0:	2000018c 	.word	0x2000018c
 80023d4:	200001d8 	.word	0x200001d8
 80023d8:	2000020e 	.word	0x2000020e
 80023dc:	2000021a 	.word	0x2000021a
 80023e0:	2000018a 	.word	0x2000018a
 80023e4:	20000210 	.word	0x20000210
 80023e8:	200001d0 	.word	0x200001d0
 80023ec:	200001a2 	.word	0x200001a2
 80023f0:	08003081 	.word	0x08003081
 80023f4:	08003088 	.word	0x08003088
 80023f8:	0800309a 	.word	0x0800309a
 80023fc:	080030a3 	.word	0x080030a3
 8002400:	20000228 	.word	0x20000228
 8002404:	20000284 	.word	0x20000284
 8002408:	08001f41 	.word	0x08001f41
 800240c:	20000218 	.word	0x20000218
 8002410:	2000021c 	.word	0x2000021c
 8002414:	20000214 	.word	0x20000214
 8002418:	200001a0 	.word	0x200001a0
 800241c:	20000212 	.word	0x20000212
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 8002420:	9a00      	ldr	r2, [sp, #0]
  	  qsort(sortdata1,data_cnt,2,int_sort);
 8002422:	f8df 83b4 	ldr.w	r8, [pc, #948]	; 80027d8 <main+0x7f0>
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 8002426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242e:	f7fe fcff 	bl	8000e30 <HAL_GPIO_WritePin>
	  tempdata1[count]=aADCxConvertedDataR[0];
 8002432:	4bca      	ldr	r3, [pc, #808]	; (800275c <main+0x774>)
	  tempdata2[count]=aADCxConvertedDataR[1];
 8002434:	4dca      	ldr	r5, [pc, #808]	; (8002760 <main+0x778>)
	  tempdata1[count]=aADCxConvertedDataR[0];
 8002436:	781c      	ldrb	r4, [r3, #0]
 8002438:	4bca      	ldr	r3, [pc, #808]	; (8002764 <main+0x77c>)
	  tempdata3[count]=aADCxConvertedDataL[3];
 800243a:	48cb      	ldr	r0, [pc, #812]	; (8002768 <main+0x780>)
	  tempdata1[count]=aADCxConvertedDataR[0];
 800243c:	881a      	ldrh	r2, [r3, #0]
	  tempdata2[count]=aADCxConvertedDataR[1];
 800243e:	885b      	ldrh	r3, [r3, #2]
 8002440:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	  tempdata3[count]=aADCxConvertedDataL[3];
 8002444:	4bc9      	ldr	r3, [pc, #804]	; (800276c <main+0x784>)
	  tempdata4[count]=aADCxConvertedDataL[0];
 8002446:	49ca      	ldr	r1, [pc, #808]	; (8002770 <main+0x788>)
	  tempdata3[count]=aADCxConvertedDataL[3];
 8002448:	88db      	ldrh	r3, [r3, #6]
 800244a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
	  tempdata4[count]=aADCxConvertedDataL[0];
 800244e:	4bc7      	ldr	r3, [pc, #796]	; (800276c <main+0x784>)
	  tempdata1[count]=aADCxConvertedDataR[0];
 8002450:	4ec8      	ldr	r6, [pc, #800]	; (8002774 <main+0x78c>)
	  tempdata4[count]=aADCxConvertedDataL[0];
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
	  tempdata5[count]=aADCxConvertedDataL[1];
 8002458:	4bc4      	ldr	r3, [pc, #784]	; (800276c <main+0x784>)
	  tempdata1[count]=aADCxConvertedDataR[0];
 800245a:	f826 2014 	strh.w	r2, [r6, r4, lsl #1]
	  tempdata5[count]=aADCxConvertedDataL[1];
 800245e:	4ac6      	ldr	r2, [pc, #792]	; (8002778 <main+0x790>)
 8002460:	885b      	ldrh	r3, [r3, #2]
	  tempdata6[count]=aADCxConvertedDataL[2];
 8002462:	4fc2      	ldr	r7, [pc, #776]	; (800276c <main+0x784>)
	  tempdata5[count]=aADCxConvertedDataL[1];
 8002464:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
	  tempdata6[count]=aADCxConvertedDataL[2];
 8002468:	4bc4      	ldr	r3, [pc, #784]	; (800277c <main+0x794>)
 800246a:	f8b7 e004 	ldrh.w	lr, [r7, #4]
 800246e:	f823 e014 	strh.w	lr, [r3, r4, lsl #1]
 8002472:	46b4      	mov	ip, r6
 8002474:	46ae      	mov	lr, r5
  	  sortdata1[i]=tempdata1[i];
 8002476:	f8df a314 	ldr.w	sl, [pc, #788]	; 800278c <main+0x7a4>
  	  sortdata2[i]=tempdata2[i];
 800247a:	f8df 9318 	ldr.w	r9, [pc, #792]	; 8002794 <main+0x7ac>
  	  sortdata4[i]=tempdata4[i];
 800247e:	4ec0      	ldr	r6, [pc, #768]	; (8002780 <main+0x798>)
  	  sortdata5[i]=tempdata5[i];
 8002480:	4dc0      	ldr	r5, [pc, #768]	; (8002784 <main+0x79c>)
  	  sortdata6[i]=tempdata6[i];
 8002482:	f8df b314 	ldr.w	fp, [pc, #788]	; 8002798 <main+0x7b0>
 8002486:	9300      	str	r3, [sp, #0]
	  tempdata6[count]=aADCxConvertedDataL[2];
 8002488:	2400      	movs	r4, #0
  	  sortdata1[i]=tempdata1[i];
 800248a:	f83c 3014 	ldrh.w	r3, [ip, r4, lsl #1]
 800248e:	f82a 3014 	strh.w	r3, [sl, r4, lsl #1]
  	  sortdata2[i]=tempdata2[i];
 8002492:	f83e 3014 	ldrh.w	r3, [lr, r4, lsl #1]
 8002496:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
  	  sortdata3[i]=tempdata3[i];
 800249a:	4bbb      	ldr	r3, [pc, #748]	; (8002788 <main+0x7a0>)
 800249c:	f830 7014 	ldrh.w	r7, [r0, r4, lsl #1]
 80024a0:	f823 7014 	strh.w	r7, [r3, r4, lsl #1]
  	  sortdata4[i]=tempdata4[i];
 80024a4:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
 80024a8:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
  	  sortdata5[i]=tempdata5[i];
 80024ac:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80024b0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
  	  sortdata6[i]=tempdata6[i];
 80024b4:	9b00      	ldr	r3, [sp, #0]
 80024b6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80024ba:	f82b 3014 	strh.w	r3, [fp, r4, lsl #1]
 80024be:	3401      	adds	r4, #1
  	  for(uint8_t i=0;i<5;i++){
 80024c0:	2c05      	cmp	r4, #5
 80024c2:	d1e2      	bne.n	800248a <main+0x4a2>
  	  qsort(sortdata1,data_cnt,2,int_sort);
 80024c4:	4621      	mov	r1, r4
 80024c6:	4643      	mov	r3, r8
 80024c8:	2202      	movs	r2, #2
 80024ca:	48b0      	ldr	r0, [pc, #704]	; (800278c <main+0x7a4>)
  	  out_lowpass_temp4=out_lowpass[3];
 80024cc:	4fb0      	ldr	r7, [pc, #704]	; (8002790 <main+0x7a8>)
  	  qsort(sortdata1,data_cnt,2,int_sort);
 80024ce:	f000 fc7c 	bl	8002dca <qsort>
  	  qsort(sortdata2,data_cnt,2,int_sort);
 80024d2:	4621      	mov	r1, r4
 80024d4:	4643      	mov	r3, r8
 80024d6:	2202      	movs	r2, #2
 80024d8:	48ae      	ldr	r0, [pc, #696]	; (8002794 <main+0x7ac>)
 80024da:	f000 fc76 	bl	8002dca <qsort>
  	  qsort(sortdata3,data_cnt,2,int_sort);
 80024de:	4621      	mov	r1, r4
 80024e0:	4643      	mov	r3, r8
 80024e2:	2202      	movs	r2, #2
 80024e4:	48a8      	ldr	r0, [pc, #672]	; (8002788 <main+0x7a0>)
 80024e6:	f000 fc70 	bl	8002dca <qsort>
  	  qsort(sortdata4,data_cnt,2,int_sort);
 80024ea:	4621      	mov	r1, r4
 80024ec:	4643      	mov	r3, r8
 80024ee:	2202      	movs	r2, #2
 80024f0:	48a3      	ldr	r0, [pc, #652]	; (8002780 <main+0x798>)
 80024f2:	f000 fc6a 	bl	8002dca <qsort>
  	  qsort(sortdata5,data_cnt,2,int_sort);
 80024f6:	4621      	mov	r1, r4
 80024f8:	4643      	mov	r3, r8
 80024fa:	2202      	movs	r2, #2
 80024fc:	48a1      	ldr	r0, [pc, #644]	; (8002784 <main+0x79c>)
 80024fe:	f000 fc64 	bl	8002dca <qsort>
  	  qsort(sortdata6,data_cnt,2,int_sort);
 8002502:	4621      	mov	r1, r4
 8002504:	4643      	mov	r3, r8
 8002506:	2202      	movs	r2, #2
 8002508:	48a3      	ldr	r0, [pc, #652]	; (8002798 <main+0x7b0>)
 800250a:	f000 fc5e 	bl	8002dca <qsort>
  	  medianfilter_out1=sortdata1[2];
 800250e:	4ba3      	ldr	r3, [pc, #652]	; (800279c <main+0x7b4>)
 8002510:	f8ba 4004 	ldrh.w	r4, [sl, #4]
 8002514:	801c      	strh	r4, [r3, #0]
  	  medianfilter_out2=sortdata2[2];
 8002516:	4ba2      	ldr	r3, [pc, #648]	; (80027a0 <main+0x7b8>)
 8002518:	f8b9 e004 	ldrh.w	lr, [r9, #4]
 800251c:	f8a3 e000 	strh.w	lr, [r3]
  	  medianfilter_out3=sortdata3[2];
 8002520:	4b99      	ldr	r3, [pc, #612]	; (8002788 <main+0x7a0>)
  	  medianfilter_out4=sortdata4[2];
 8002522:	88b1      	ldrh	r1, [r6, #4]
  	  medianfilter_out3=sortdata3[2];
 8002524:	8898      	ldrh	r0, [r3, #4]
 8002526:	4b9f      	ldr	r3, [pc, #636]	; (80027a4 <main+0x7bc>)
  	  medianfilter_out5=sortdata5[2];
 8002528:	88aa      	ldrh	r2, [r5, #4]
  	  medianfilter_out3=sortdata3[2];
 800252a:	8018      	strh	r0, [r3, #0]
  	  medianfilter_out4=sortdata4[2];
 800252c:	4b9e      	ldr	r3, [pc, #632]	; (80027a8 <main+0x7c0>)
  	  medianfilter_out6=sortdata6[2];
 800252e:	4d9f      	ldr	r5, [pc, #636]	; (80027ac <main+0x7c4>)
  	  medianfilter_out4=sortdata4[2];
 8002530:	8019      	strh	r1, [r3, #0]
  	  medianfilter_out5=sortdata5[2];
 8002532:	4b9f      	ldr	r3, [pc, #636]	; (80027b0 <main+0x7c8>)
  	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8002534:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 80027dc <main+0x7f4>
  	  medianfilter_out5=sortdata5[2];
 8002538:	801a      	strh	r2, [r3, #0]
  	  medianfilter_out6=sortdata6[2];
 800253a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
  	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 800253e:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 80027e0 <main+0x7f8>
  	  medianfilter_out6=sortdata6[2];
 8002542:	802b      	strh	r3, [r5, #0]
  	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8002544:	ee07 4a90 	vmov	s15, r4
 8002548:	f8bb 4000 	ldrh.w	r4, [fp]
  	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 800254c:	f8ba 5000 	ldrh.w	r5, [sl]
  	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 8002550:	f8df 9290 	ldr.w	r9, [pc, #656]	; 80027e4 <main+0x7fc>
  	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 8002554:	f8df c290 	ldr.w	ip, [pc, #656]	; 80027e8 <main+0x800>
  	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8002558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255c:	ee07 4a90 	vmov	s15, r4
 8002560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002564:	4c93      	ldr	r4, [pc, #588]	; (80027b4 <main+0x7cc>)
 8002566:	ee67 7a88 	vmul.f32	s15, s15, s16
 800256a:	eee7 7a28 	vfma.f32	s15, s14, s17
 800256e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002572:	edcd 7a00 	vstr	s15, [sp]
  	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8002576:	ee07 ea90 	vmov	s15, lr
 800257a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257e:	ee07 5a90 	vmov	s15, r5
 8002582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8002586:	f8bd 6000 	ldrh.w	r6, [sp]
  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 800258a:	f8df e260 	ldr.w	lr, [pc, #608]	; 80027ec <main+0x804>
  	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 800258e:	8026      	strh	r6, [r4, #0]
  	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8002590:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002594:	eee7 7a28 	vfma.f32	s15, s14, s17
 8002598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800259c:	edcd 7a00 	vstr	s15, [sp]
  	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 80025a0:	ee07 0a90 	vmov	s15, r0
 80025a4:	f8b9 0000 	ldrh.w	r0, [r9]
  	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 80025a8:	f8bd 5000 	ldrh.w	r5, [sp]
 80025ac:	8065      	strh	r5, [r4, #2]
  	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 80025ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b2:	ee07 0a90 	vmov	s15, r0
 80025b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ba:	ee67 7a88 	vmul.f32	s15, s15, s16
 80025be:	eee7 7a28 	vfma.f32	s15, s14, s17
 80025c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c6:	edcd 7a00 	vstr	s15, [sp]
  	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 80025ca:	ee07 1a90 	vmov	s15, r1
 80025ce:	4970      	ldr	r1, [pc, #448]	; (8002790 <main+0x7a8>)
  	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 80025d0:	f8bd 0000 	ldrh.w	r0, [sp]
  	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 80025d4:	8809      	ldrh	r1, [r1, #0]
  	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 80025d6:	80a0      	strh	r0, [r4, #4]
  	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 80025d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025dc:	ee07 1a90 	vmov	s15, r1
 80025e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80025e8:	eee7 7a28 	vfma.f32	s15, s14, s17
 80025ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025f0:	edcd 7a00 	vstr	s15, [sp]
  	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 80025f4:	ee07 2a90 	vmov	s15, r2
 80025f8:	f8bc 2000 	ldrh.w	r2, [ip]
  	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 80025fc:	f8bd 1000 	ldrh.w	r1, [sp]
 8002600:	80e1      	strh	r1, [r4, #6]
  	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 8002602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002606:	ee07 2a90 	vmov	s15, r2
 800260a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800260e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002612:	eee7 7a28 	vfma.f32	s15, s14, s17
 8002616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800261a:	edcd 7a00 	vstr	s15, [sp]
 800261e:	f8bd 2000 	ldrh.w	r2, [sp]
 8002622:	8122      	strh	r2, [r4, #8]
  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 8002624:	ee07 3a90 	vmov	s15, r3
 8002628:	f8be 3000 	ldrh.w	r3, [lr]
  	  out_lowpass_temp5=out_lowpass[4];
 800262c:	f8ac 2000 	strh.w	r2, [ip]
  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 8002630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002634:	ee07 3a90 	vmov	s15, r3
 8002638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  	  if(count>=4){
 800263c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 800275c <main+0x774>
  	  out_lowpass_temp3=out_lowpass[2];
 8002640:	f8a9 0000 	strh.w	r0, [r9]
  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 8002644:	ee67 7a88 	vmul.f32	s15, s15, s16
     Txbuf[5]= (uint8_t)( (out_lowpass[2]<<2) & 0b0000000011111111);
 8002648:	0080      	lsls	r0, r0, #2
  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 800264a:	eee7 7a28 	vfma.f32	s15, s14, s17
  	  out_lowpass_temp4=out_lowpass[3];
 800264e:	8039      	strh	r1, [r7, #0]
     Txbuf[7]= (uint8_t)( (out_lowpass[3]<<2) & 0b0000000011111111);
 8002650:	0089      	lsls	r1, r1, #2
     Txbuf[9]= (uint8_t)( (out_lowpass[4]<<2) & 0b0000000011111111);
 8002652:	0092      	lsls	r2, r2, #2
  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 8002654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  	  out_lowpass_temp1=out_lowpass[0];
 8002658:	f8ab 6000 	strh.w	r6, [fp]
  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 800265c:	edcd 7a00 	vstr	s15, [sp]
 8002660:	f8bd 3000 	ldrh.w	r3, [sp]
  	  out_lowpass_temp6=out_lowpass[5];
 8002664:	f8ae 3000 	strh.w	r3, [lr]
  	  if(count>=4){
 8002668:	f89c e000 	ldrb.w	lr, [ip]
  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 800266c:	8163      	strh	r3, [r4, #10]
  	  if(count>=4){
 800266e:	f1be 0f03 	cmp.w	lr, #3
  		  count=0;
 8002672:	bf8c      	ite	hi
 8002674:	f04f 0e00 	movhi.w	lr, #0
  		  count++;
 8002678:	f10e 0e01 	addls.w	lr, lr, #1
 800267c:	f88c e000 	strb.w	lr, [ip]
     Txbuf[0]=254;
 8002680:	f8df e16c 	ldr.w	lr, [pc, #364]	; 80027f0 <main+0x808>
  	  out_lowpass_temp2=out_lowpass[1];
 8002684:	f8aa 5000 	strh.w	r5, [sl]
     Txbuf[11]=(uint8_t)( (out_lowpass[5]<<2) & 0b0000000011111111);
 8002688:	009b      	lsls	r3, r3, #2
     Txbuf[1]= (uint8_t)( (out_lowpass[0]<<2) & 0b0000000011111111);
 800268a:	00b6      	lsls	r6, r6, #2
     Txbuf[3]= (uint8_t)( (out_lowpass[1]<<2) & 0b0000000011111111);
 800268c:	00ad      	lsls	r5, r5, #2
     Txbuf[5]= (uint8_t)( (out_lowpass[2]<<2) & 0b0000000011111111);
 800268e:	f88e 0005 	strb.w	r0, [lr, #5]
     Txbuf[7]= (uint8_t)( (out_lowpass[3]<<2) & 0b0000000011111111);
 8002692:	f88e 1007 	strb.w	r1, [lr, #7]
     Txbuf[6]= (uint8_t)(((out_lowpass[2]<<2) & 0b1111111100000000)>>8);
 8002696:	1200      	asrs	r0, r0, #8
     Txbuf[8]= (uint8_t)(((out_lowpass[3]<<2) & 0b1111111100000000)>>8);
 8002698:	1209      	asrs	r1, r1, #8
     Txbuf[11]=(uint8_t)( (out_lowpass[5]<<2) & 0b0000000011111111);
 800269a:	f88e 300b 	strb.w	r3, [lr, #11]
     Txbuf[12]=(uint8_t)(((out_lowpass[5]<<2) & 0b1111111100000000)>>8);
 800269e:	121b      	asrs	r3, r3, #8
     Txbuf[0]=254;
 80026a0:	f04f 0cfe 	mov.w	ip, #254	; 0xfe
     Txbuf[1]= (uint8_t)( (out_lowpass[0]<<2) & 0b0000000011111111);
 80026a4:	f88e 6001 	strb.w	r6, [lr, #1]
     Txbuf[3]= (uint8_t)( (out_lowpass[1]<<2) & 0b0000000011111111);
 80026a8:	f88e 5003 	strb.w	r5, [lr, #3]
     Txbuf[2]= (uint8_t)(((out_lowpass[0]<<2) & 0b1111111100000000)>>8);
 80026ac:	1236      	asrs	r6, r6, #8
     Txbuf[4]= (uint8_t)(((out_lowpass[1]<<2) & 0b1111111100000000)>>8);
 80026ae:	122d      	asrs	r5, r5, #8
     Txbuf[6]= (uint8_t)(((out_lowpass[2]<<2) & 0b1111111100000000)>>8);
 80026b0:	f88e 0006 	strb.w	r0, [lr, #6]
     Txbuf[8]= (uint8_t)(((out_lowpass[3]<<2) & 0b1111111100000000)>>8);
 80026b4:	f88e 1008 	strb.w	r1, [lr, #8]
     Txbuf[9]= (uint8_t)( (out_lowpass[4]<<2) & 0b0000000011111111);
 80026b8:	f88e 2009 	strb.w	r2, [lr, #9]
     Txbuf[12]=(uint8_t)(((out_lowpass[5]<<2) & 0b1111111100000000)>>8);
 80026bc:	f88e 300c 	strb.w	r3, [lr, #12]
     Txbuf[10]=(uint8_t)(((out_lowpass[4]<<2) & 0b1111111100000000)>>8);
 80026c0:	1212      	asrs	r2, r2, #8
     Txbuf[13]=253;
 80026c2:	23fd      	movs	r3, #253	; 0xfd
  	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==0){
 80026c4:	2108      	movs	r1, #8
 80026c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
     Txbuf[0]=254;
 80026ca:	f88e c000 	strb.w	ip, [lr]
     Txbuf[2]= (uint8_t)(((out_lowpass[0]<<2) & 0b1111111100000000)>>8);
 80026ce:	f88e 6002 	strb.w	r6, [lr, #2]
     Txbuf[4]= (uint8_t)(((out_lowpass[1]<<2) & 0b1111111100000000)>>8);
 80026d2:	f88e 5004 	strb.w	r5, [lr, #4]
     Txbuf[10]=(uint8_t)(((out_lowpass[4]<<2) & 0b1111111100000000)>>8);
 80026d6:	f88e 200a 	strb.w	r2, [lr, #10]
     Txbuf[13]=253;
 80026da:	f88e 300d 	strb.w	r3, [lr, #13]
  	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==0){
 80026de:	f7fe fba1 	bl	8000e24 <HAL_GPIO_ReadPin>
 80026e2:	b9d0      	cbnz	r0, 800271a <main+0x732>
  	  xprintf(" out1=%d",out_lowpass[0]);
 80026e4:	8821      	ldrh	r1, [r4, #0]
 80026e6:	4834      	ldr	r0, [pc, #208]	; (80027b8 <main+0x7d0>)
 80026e8:	f000 fada 	bl	8002ca0 <xprintf>
  	  xprintf(" out2=%d",out_lowpass[1]);
 80026ec:	8861      	ldrh	r1, [r4, #2]
 80026ee:	4833      	ldr	r0, [pc, #204]	; (80027bc <main+0x7d4>)
 80026f0:	f000 fad6 	bl	8002ca0 <xprintf>
  	  xprintf(" out3=%d",out_lowpass[2]);
 80026f4:	88a1      	ldrh	r1, [r4, #4]
 80026f6:	4832      	ldr	r0, [pc, #200]	; (80027c0 <main+0x7d8>)
 80026f8:	f000 fad2 	bl	8002ca0 <xprintf>
  	  xprintf(" out4=%d",out_lowpass[3]);
 80026fc:	88e1      	ldrh	r1, [r4, #6]
 80026fe:	4831      	ldr	r0, [pc, #196]	; (80027c4 <main+0x7dc>)
 8002700:	f000 face 	bl	8002ca0 <xprintf>
  	  xprintf(" out5=%d",out_lowpass[4]);
 8002704:	8921      	ldrh	r1, [r4, #8]
 8002706:	4830      	ldr	r0, [pc, #192]	; (80027c8 <main+0x7e0>)
 8002708:	f000 faca 	bl	8002ca0 <xprintf>
  	  xprintf(" out6=%d",out_lowpass[5]);
 800270c:	482f      	ldr	r0, [pc, #188]	; (80027cc <main+0x7e4>)
 800270e:	8961      	ldrh	r1, [r4, #10]
 8002710:	f000 fac6 	bl	8002ca0 <xprintf>
  	  xprintf("\r\n");
 8002714:	482e      	ldr	r0, [pc, #184]	; (80027d0 <main+0x7e8>)
 8002716:	f000 fac3 	bl	8002ca0 <xprintf>
  	  if(mofumofu>5000){
 800271a:	4c2e      	ldr	r4, [pc, #184]	; (80027d4 <main+0x7ec>)
 800271c:	8823      	ldrh	r3, [r4, #0]
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d917      	bls.n	8002756 <main+0x76e>
  		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_12);
 8002726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800272a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272e:	f7fe fb84 	bl	8000e3a <HAL_GPIO_TogglePin>
  		  mofumofu=0;
 8002732:	2300      	movs	r3, #0
  	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==1){
 8002734:	2108      	movs	r1, #8
 8002736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  	  else{mofumofu++;}
 800273a:	8023      	strh	r3, [r4, #0]
  	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==1){
 800273c:	f7fe fb72 	bl	8000e24 <HAL_GPIO_ReadPin>
 8002740:	2801      	cmp	r0, #1
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,0);
 8002742:	bf0c      	ite	eq
 8002744:	2200      	moveq	r2, #0
  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 8002746:	2201      	movne	r2, #1
 8002748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800274c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002750:	f7fe fb6e 	bl	8000e30 <HAL_GPIO_WritePin>
 8002754:	e66d      	b.n	8002432 <main+0x44a>
  	  else{mofumofu++;}
 8002756:	3301      	adds	r3, #1
 8002758:	e7ec      	b.n	8002734 <main+0x74c>
 800275a:	bf00      	nop
 800275c:	20000216 	.word	0x20000216
 8002760:	20000204 	.word	0x20000204
 8002764:	200001b8 	.word	0x200001b8
 8002768:	200001fa 	.word	0x200001fa
 800276c:	2000018e 	.word	0x2000018e
 8002770:	200001c6 	.word	0x200001c6
 8002774:	2000021e 	.word	0x2000021e
 8002778:	20000196 	.word	0x20000196
 800277c:	200001f0 	.word	0x200001f0
 8002780:	20000236 	.word	0x20000236
 8002784:	200001da 	.word	0x200001da
 8002788:	200001e4 	.word	0x200001e4
 800278c:	20000180 	.word	0x20000180
 8002790:	20000214 	.word	0x20000214
 8002794:	200001bc 	.word	0x200001bc
 8002798:	200001ae 	.word	0x200001ae
 800279c:	2000018c 	.word	0x2000018c
 80027a0:	2000020e 	.word	0x2000020e
 80027a4:	2000021a 	.word	0x2000021a
 80027a8:	2000018a 	.word	0x2000018a
 80027ac:	200001d0 	.word	0x200001d0
 80027b0:	20000210 	.word	0x20000210
 80027b4:	200001a2 	.word	0x200001a2
 80027b8:	0800309a 	.word	0x0800309a
 80027bc:	080030a6 	.word	0x080030a6
 80027c0:	080030af 	.word	0x080030af
 80027c4:	080030b8 	.word	0x080030b8
 80027c8:	080030c1 	.word	0x080030c1
 80027cc:	080030ca 	.word	0x080030ca
 80027d0:	080030a3 	.word	0x080030a3
 80027d4:	200001ee 	.word	0x200001ee
 80027d8:	08001f41 	.word	0x08001f41
 80027dc:	20000218 	.word	0x20000218
 80027e0:	200001d8 	.word	0x200001d8
 80027e4:	2000021c 	.word	0x2000021c
 80027e8:	200001a0 	.word	0x200001a0
 80027ec:	20000212 	.word	0x20000212
 80027f0:	20000228 	.word	0x20000228

080027f4 <_Error_Handler>:
{
 80027f4:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80027f6:	2201      	movs	r2, #1
 80027f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002800:	f7fe fb16 	bl	8000e30 <HAL_GPIO_WritePin>
 8002804:	e7f7      	b.n	80027f6 <_Error_Handler+0x2>
	...

08002808 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_MspInit+0x78>)
{
 800280a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280c:	699a      	ldr	r2, [r3, #24]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	619a      	str	r2, [r3, #24]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800281c:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002820:	f7fe f912 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	4611      	mov	r1, r2
 8002828:	f06f 000b 	mvn.w	r0, #11
 800282c:	f7fe f91e 	bl	8000a6c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002830:	2200      	movs	r2, #0
 8002832:	4611      	mov	r1, r2
 8002834:	f06f 000a 	mvn.w	r0, #10
 8002838:	f7fe f918 	bl	8000a6c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	4611      	mov	r1, r2
 8002840:	f06f 0009 	mvn.w	r0, #9
 8002844:	f7fe f912 	bl	8000a6c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002848:	2200      	movs	r2, #0
 800284a:	4611      	mov	r1, r2
 800284c:	f06f 0004 	mvn.w	r0, #4
 8002850:	f7fe f90c 	bl	8000a6c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	4611      	mov	r1, r2
 8002858:	f06f 0003 	mvn.w	r0, #3
 800285c:	f7fe f906 	bl	8000a6c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	4611      	mov	r1, r2
 8002864:	f06f 0001 	mvn.w	r0, #1
 8002868:	f7fe f900 	bl	8000a6c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	4611      	mov	r1, r2
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	f7fe f8fa 	bl	8000a6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002878:	b003      	add	sp, #12
 800287a:	f85d fb04 	ldr.w	pc, [sp], #4
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000

08002884 <NMI_Handler>:
 8002884:	4770      	bx	lr

08002886 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002886:	e7fe      	b.n	8002886 <HardFault_Handler>

08002888 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002888:	e7fe      	b.n	8002888 <MemManage_Handler>

0800288a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800288a:	e7fe      	b.n	800288a <BusFault_Handler>

0800288c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800288c:	e7fe      	b.n	800288c <UsageFault_Handler>

0800288e <SVC_Handler>:
 800288e:	4770      	bx	lr

08002890 <DebugMon_Handler>:
 8002890:	4770      	bx	lr

08002892 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002892:	4770      	bx	lr

08002894 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002896:	f7fd fcbd 	bl	8000214 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800289a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800289e:	f7fe b948 	b.w	8000b32 <HAL_SYSTICK_IRQHandler>
	...

080028a4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028a4:	4801      	ldr	r0, [pc, #4]	; (80028ac <DMA1_Channel1_IRQHandler+0x8>)
 80028a6:	f7fe b9ba 	b.w	8000c1e <HAL_DMA_IRQHandler>
 80028aa:	bf00      	nop
 80028ac:	200000e0 	.word	0x200000e0

080028b0 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80028b0:	4801      	ldr	r0, [pc, #4]	; (80028b8 <DMA1_Channel2_IRQHandler+0x8>)
 80028b2:	f7fe b9b4 	b.w	8000c1e <HAL_DMA_IRQHandler>
 80028b6:	bf00      	nop
 80028b8:	2000013c 	.word	0x2000013c

080028bc <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80028bc:	4801      	ldr	r0, [pc, #4]	; (80028c4 <DMA1_Channel4_IRQHandler+0x8>)
 80028be:	f7fe b9ae 	b.w	8000c1e <HAL_DMA_IRQHandler>
 80028c2:	bf00      	nop
 80028c4:	20000240 	.word	0x20000240

080028c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c8:	4915      	ldr	r1, [pc, #84]	; (8002920 <SystemInit+0x58>)
 80028ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80028ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <SystemInit+0x5c>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80028e0:	6858      	ldr	r0, [r3, #4]
 80028e2:	4a11      	ldr	r2, [pc, #68]	; (8002928 <SystemInit+0x60>)
 80028e4:	4002      	ands	r2, r0
 80028e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80028ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028f2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002902:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002906:	f022 020f 	bic.w	r2, r2, #15
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800290c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800290e:	4a07      	ldr	r2, [pc, #28]	; (800292c <SystemInit+0x64>)
 8002910:	4002      	ands	r2, r0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800291c:	608b      	str	r3, [r1, #8]
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00
 8002924:	40021000 	.word	0x40021000
 8002928:	f87fc00c 	.word	0xf87fc00c
 800292c:	ff00fccc 	.word	0xff00fccc

08002930 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002930:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8002932:	480d      	ldr	r0, [pc, #52]	; (8002968 <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 19200;
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <MX_USART1_UART_Init+0x3c>)
 8002936:	f44f 4e96 	mov.w	lr, #19200	; 0x4b00
 800293a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800293e:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002940:	2300      	movs	r3, #0
 8002942:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002944:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002946:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002948:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800294c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002950:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002952:	f7ff f909 	bl	8001b68 <HAL_UART_Init>
 8002956:	b128      	cbz	r0, 8002964 <MX_USART1_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002958:	2147      	movs	r1, #71	; 0x47
 800295a:	4805      	ldr	r0, [pc, #20]	; (8002970 <MX_USART1_UART_Init+0x40>)
  }

}
 800295c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002960:	f7ff bf48 	b.w	80027f4 <_Error_Handler>
 8002964:	bd08      	pop	{r3, pc}
 8002966:	bf00      	nop
 8002968:	20000284 	.word	0x20000284
 800296c:	40013800 	.word	0x40013800
 8002970:	080030eb 	.word	0x080030eb

08002974 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002974:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8002976:	480d      	ldr	r0, [pc, #52]	; (80029ac <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <MX_USART2_UART_Init+0x3c>)
 800297a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800297e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002982:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002984:	2300      	movs	r3, #0
 8002986:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002988:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800298a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800298c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002992:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002994:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002996:	f7ff f8e7 	bl	8001b68 <HAL_UART_Init>
 800299a:	b128      	cbz	r0, 80029a8 <MX_USART2_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 800299c:	215c      	movs	r1, #92	; 0x5c
 800299e:	4805      	ldr	r0, [pc, #20]	; (80029b4 <MX_USART2_UART_Init+0x40>)
  }

}
 80029a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80029a4:	f7ff bf26 	b.w	80027f4 <_Error_Handler>
 80029a8:	bd08      	pop	{r3, pc}
 80029aa:	bf00      	nop
 80029ac:	200002f4 	.word	0x200002f4
 80029b0:	40004400 	.word	0x40004400
 80029b4:	080030eb 	.word	0x080030eb

080029b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029b8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80029ba:	6803      	ldr	r3, [r0, #0]
 80029bc:	4a2b      	ldr	r2, [pc, #172]	; (8002a6c <HAL_UART_MspInit+0xb4>)
 80029be:	4293      	cmp	r3, r2
{
 80029c0:	b089      	sub	sp, #36	; 0x24
 80029c2:	4605      	mov	r5, r0
  if(uartHandle->Instance==USART1)
 80029c4:	d133      	bne.n	8002a2e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029c6:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80029c8:	4c2a      	ldr	r4, [pc, #168]	; (8002a74 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029d0:	619a      	str	r2, [r3, #24]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e6:	2301      	movs	r3, #1
 80029e8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029f2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f7fe f95a 	bl	8000cb0 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029fc:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <HAL_UART_MspInit+0xc0>)
 80029fe:	2310      	movs	r3, #16
 8002a00:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a04:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a06:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a08:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a0a:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002a0c:	2220      	movs	r2, #32
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0e:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a10:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a12:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002a14:	61a2      	str	r2, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a16:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a18:	f7fe f890 	bl	8000b3c <HAL_DMA_Init>
 8002a1c:	b118      	cbz	r0, 8002a26 <HAL_UART_MspInit+0x6e>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002a1e:	2184      	movs	r1, #132	; 0x84
 8002a20:	4816      	ldr	r0, [pc, #88]	; (8002a7c <HAL_UART_MspInit+0xc4>)
 8002a22:	f7ff fee7 	bl	80027f4 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002a26:	662c      	str	r4, [r5, #96]	; 0x60
 8002a28:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a2a:	b009      	add	sp, #36	; 0x24
 8002a2c:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==USART2)
 8002a2e:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <HAL_UART_MspInit+0xc8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d1fa      	bne.n	8002a2a <HAL_UART_MspInit+0x72>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a34:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <HAL_UART_MspInit+0xb8>)
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a3c:	61da      	str	r2, [r3, #28]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002a48:	f248 0304 	movw	r3, #32772	; 0x8004
 8002a4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a52:	2301      	movs	r3, #1
 8002a54:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a56:	2303      	movs	r3, #3
 8002a58:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a5c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a62:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	f7fe f924 	bl	8000cb0 <HAL_GPIO_Init>
}
 8002a68:	e7df      	b.n	8002a2a <HAL_UART_MspInit+0x72>
 8002a6a:	bf00      	nop
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	40021000 	.word	0x40021000
 8002a74:	20000240 	.word	0x20000240
 8002a78:	40020044 	.word	0x40020044
 8002a7c:	080030eb 	.word	0x080030eb
 8002a80:	40004400 	.word	0x40004400

08002a84 <init_xprintf>:
/* Put a character                              */
/*----------------------------------------------*/


void init_xprintf(UART_HandleTypeDef *handler){
	huart_xprintf = handler;
 8002a84:	4b01      	ldr	r3, [pc, #4]	; (8002a8c <init_xprintf+0x8>)
 8002a86:	6018      	str	r0, [r3, #0]
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	200001d4 	.word	0x200001d4

08002a90 <uart_putc>:
	    HAL_UART_Receive(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
void uart_putc(uint8_t c)
	{
 8002a90:	b507      	push	{r0, r1, r2, lr}
	 char buf[1];
	 buf[0] = c;
 8002a92:	a902      	add	r1, sp, #8
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8002a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
	 buf[0] = c;
 8002a98:	f801 0d04 	strb.w	r0, [r1, #-4]!
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8002a9c:	4803      	ldr	r0, [pc, #12]	; (8002aac <uart_putc+0x1c>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	6800      	ldr	r0, [r0, #0]
 8002aa2:	f7fe ffd6 	bl	8001a52 <HAL_UART_Transmit>
	}
 8002aa6:	b003      	add	sp, #12
 8002aa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aac:	200001d4 	.word	0x200001d4

08002ab0 <xputc>:
	    }
	}

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8002ab0:	280a      	cmp	r0, #10
{
 8002ab2:	b510      	push	{r4, lr}
 8002ab4:	4604      	mov	r4, r0
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8002ab6:	d102      	bne.n	8002abe <xputc+0xe>
 8002ab8:	200d      	movs	r0, #13
 8002aba:	f7ff fff9 	bl	8002ab0 <xputc>

	if (outptr) {
 8002abe:	4a07      	ldr	r2, [pc, #28]	; (8002adc <xputc+0x2c>)
 8002ac0:	6813      	ldr	r3, [r2, #0]
 8002ac2:	b11b      	cbz	r3, 8002acc <xputc+0x1c>
		*outptr++ = (unsigned char)c;
 8002ac4:	1c59      	adds	r1, r3, #1
 8002ac6:	701c      	strb	r4, [r3, #0]
 8002ac8:	6011      	str	r1, [r2, #0]
		return;
 8002aca:	bd10      	pop	{r4, pc}
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <xputc+0x30>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	b11b      	cbz	r3, 8002ada <xputc+0x2a>
 8002ad2:	4620      	mov	r0, r4
}
 8002ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (xfunc_out) xfunc_out((unsigned char)c);
 8002ad8:	4718      	bx	r3
 8002ada:	bd10      	pop	{r4, pc}
 8002adc:	20000024 	.word	0x20000024
 8002ae0:	20000368 	.word	0x20000368

08002ae4 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	1e44      	subs	r4, r0, #1
	while (*str)
 8002ae8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002aec:	b900      	cbnz	r0, 8002af0 <xputs+0xc>
		xputc(*str++);
}
 8002aee:	bd10      	pop	{r4, pc}
		xputc(*str++);
 8002af0:	f7ff ffde 	bl	8002ab0 <xputc>
 8002af4:	e7f8      	b.n	8002ae8 <xputs+0x4>

08002af6 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8002af6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002afa:	4602      	mov	r2, r0
 8002afc:	460d      	mov	r5, r1
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 8002afe:	7810      	ldrb	r0, [r2, #0]
		if (!c) break;				/* End of format? */
 8002b00:	2800      	cmp	r0, #0
 8002b02:	f000 80ca 	beq.w	8002c9a <xvprintf+0x1a4>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8002b06:	2825      	cmp	r0, #37	; 0x25
 8002b08:	d004      	beq.n	8002b14 <xvprintf+0x1e>
		c = *fmt++;					/* Get a char */
 8002b0a:	1c57      	adds	r7, r2, #1
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8002b0c:	f7ff ffd0 	bl	8002ab0 <xputc>
 8002b10:	462c      	mov	r4, r5
 8002b12:	e052      	b.n	8002bba <xvprintf+0xc4>
		c = *fmt++;					/* Get first char of the sequense */
 8002b14:	7853      	ldrb	r3, [r2, #1]
		if (c == '0') {				/* Flag: '0' padded */
 8002b16:	2b30      	cmp	r3, #48	; 0x30
 8002b18:	d128      	bne.n	8002b6c <xvprintf+0x76>
			f = 1; c = *fmt++;
 8002b1a:	7893      	ldrb	r3, [r2, #2]
 8002b1c:	1cd7      	adds	r7, r2, #3
 8002b1e:	2601      	movs	r6, #1
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8002b20:	f04f 0800 	mov.w	r8, #0
			w = w * 10 + c - '0';
 8002b24:	210a      	movs	r1, #10
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8002b26:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002b2a:	2a09      	cmp	r2, #9
 8002b2c:	d927      	bls.n	8002b7e <xvprintf+0x88>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8002b2e:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8002b32:	2a4c      	cmp	r2, #76	; 0x4c
			f |= 4; c = *fmt++;
 8002b34:	bf02      	ittt	eq
 8002b36:	783b      	ldrbeq	r3, [r7, #0]
 8002b38:	f046 0604 	orreq.w	r6, r6, #4
 8002b3c:	3701      	addeq	r7, #1
		if (!c) break;				/* End of format? */
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80ab 	beq.w	8002c9a <xvprintf+0x1a4>
		if (d >= 'a') d -= 0x20;
 8002b44:	2b60      	cmp	r3, #96	; 0x60
 8002b46:	bf86      	itte	hi
 8002b48:	f1a3 0220 	subhi.w	r2, r3, #32
 8002b4c:	b2d2      	uxtbhi	r2, r2
 8002b4e:	461a      	movls	r2, r3
		switch (d) {				/* Type is... */
 8002b50:	2a4f      	cmp	r2, #79	; 0x4f
 8002b52:	d035      	beq.n	8002bc0 <xvprintf+0xca>
 8002b54:	d81a      	bhi.n	8002b8c <xvprintf+0x96>
 8002b56:	2a43      	cmp	r2, #67	; 0x43
 8002b58:	f000 8088 	beq.w	8002c6c <xvprintf+0x176>
 8002b5c:	2a44      	cmp	r2, #68	; 0x44
 8002b5e:	f000 808e 	beq.w	8002c7e <xvprintf+0x188>
 8002b62:	2a42      	cmp	r2, #66	; 0x42
 8002b64:	f000 8089 	beq.w	8002c7a <xvprintf+0x184>
			xputc(c); continue;
 8002b68:	4618      	mov	r0, r3
 8002b6a:	e7cf      	b.n	8002b0c <xvprintf+0x16>
			if (c == '-') {			/* Flag: left justified */
 8002b6c:	2b2d      	cmp	r3, #45	; 0x2d
		c = *fmt++;					/* Get first char of the sequense */
 8002b6e:	bf19      	ittee	ne
 8002b70:	1c97      	addne	r7, r2, #2
		f = 0;
 8002b72:	2600      	movne	r6, #0
				f = 2; c = *fmt++;
 8002b74:	1cd7      	addeq	r7, r2, #3
 8002b76:	7893      	ldrbeq	r3, [r2, #2]
 8002b78:	bf08      	it	eq
 8002b7a:	2602      	moveq	r6, #2
 8002b7c:	e7d0      	b.n	8002b20 <xvprintf+0x2a>
			w = w * 10 + c - '0';
 8002b7e:	fb01 3808 	mla	r8, r1, r8, r3
 8002b82:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8002b86:	f817 3b01 	ldrb.w	r3, [r7], #1
 8002b8a:	e7cc      	b.n	8002b26 <xvprintf+0x30>
		switch (d) {				/* Type is... */
 8002b8c:	2a55      	cmp	r2, #85	; 0x55
 8002b8e:	d076      	beq.n	8002c7e <xvprintf+0x188>
 8002b90:	2a58      	cmp	r2, #88	; 0x58
 8002b92:	d070      	beq.n	8002c76 <xvprintf+0x180>
 8002b94:	2a53      	cmp	r2, #83	; 0x53
 8002b96:	d1e7      	bne.n	8002b68 <xvprintf+0x72>
			p = va_arg(arp, char*);
 8002b98:	f8d5 9000 	ldr.w	r9, [r5]
 8002b9c:	1d2c      	adds	r4, r5, #4
			for (j = 0; p[j]; j++) ;
 8002b9e:	464b      	mov	r3, r9
 8002ba0:	eba3 0509 	sub.w	r5, r3, r9
 8002ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ba8:	2a00      	cmp	r2, #0
 8002baa:	d1f9      	bne.n	8002ba0 <xvprintf+0xaa>
			while (!(f & 2) && j++ < w) xputc(' ');
 8002bac:	07b0      	lsls	r0, r6, #30
 8002bae:	d552      	bpl.n	8002c56 <xvprintf+0x160>
			xputs(p);
 8002bb0:	4648      	mov	r0, r9
 8002bb2:	f7ff ff97 	bl	8002ae4 <xputs>
			while (j++ < w) xputc(' ');
 8002bb6:	45a8      	cmp	r8, r5
 8002bb8:	d853      	bhi.n	8002c62 <xvprintf+0x16c>
			xputc(c); continue;
 8002bba:	4625      	mov	r5, r4
 8002bbc:	463a      	mov	r2, r7
 8002bbe:	e79e      	b.n	8002afe <xvprintf+0x8>
			r = 8; break;
 8002bc0:	2008      	movs	r0, #8
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8002bc2:	2a44      	cmp	r2, #68	; 0x44
 8002bc4:	6829      	ldr	r1, [r5, #0]
 8002bc6:	f105 0404 	add.w	r4, r5, #4
 8002bca:	d104      	bne.n	8002bd6 <xvprintf+0xe0>
		if (d == 'D' && (v & 0x80000000)) {
 8002bcc:	2900      	cmp	r1, #0
			v = 0 - v;
 8002bce:	bfbc      	itt	lt
 8002bd0:	4249      	neglt	r1, r1
			f |= 8;
 8002bd2:	f046 0608 	orrlt.w	r6, r6, #8
 8002bd6:	2b78      	cmp	r3, #120	; 0x78
 8002bd8:	bf0c      	ite	eq
 8002bda:	f04f 0c27 	moveq.w	ip, #39	; 0x27
 8002bde:	f04f 0c07 	movne.w	ip, #7
		}
		i = 0;
 8002be2:	2200      	movs	r2, #0
		do {
			d = (char)(v % r); v /= r;
 8002be4:	fbb1 fef0 	udiv	lr, r1, r0
 8002be8:	fb00 151e 	mls	r5, r0, lr, r1
 8002bec:	b2eb      	uxtb	r3, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8002bee:	2d09      	cmp	r5, #9
 8002bf0:	bf84      	itt	hi
 8002bf2:	4463      	addhi	r3, ip
 8002bf4:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 8002bf6:	3330      	adds	r3, #48	; 0x30
			d = (char)(v % r); v /= r;
 8002bf8:	4671      	mov	r1, lr
			s[i++] = d + '0';
 8002bfa:	1c55      	adds	r5, r2, #1
 8002bfc:	f80d 3002 	strb.w	r3, [sp, r2]
		} while (v && i < sizeof(s));
 8002c00:	f1be 0f00 	cmp.w	lr, #0
 8002c04:	d002      	beq.n	8002c0c <xvprintf+0x116>
 8002c06:	2d10      	cmp	r5, #16
 8002c08:	d13b      	bne.n	8002c82 <xvprintf+0x18c>
 8002c0a:	220f      	movs	r2, #15
		if (f & 8) s[i++] = '-';
 8002c0c:	0731      	lsls	r1, r6, #28
 8002c0e:	d505      	bpl.n	8002c1c <xvprintf+0x126>
 8002c10:	ab04      	add	r3, sp, #16
 8002c12:	441d      	add	r5, r3
 8002c14:	232d      	movs	r3, #45	; 0x2d
 8002c16:	f805 3c10 	strb.w	r3, [r5, #-16]
 8002c1a:	1c95      	adds	r5, r2, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8002c1c:	f016 0f01 	tst.w	r6, #1
 8002c20:	bf14      	ite	ne
 8002c22:	f04f 0a30 	movne.w	sl, #48	; 0x30
 8002c26:	f04f 0a20 	moveq.w	sl, #32
		while (!(f & 2) && j++ < w) xputc(d);
 8002c2a:	07b3      	lsls	r3, r6, #30
		j = i; d = (f & 1) ? '0' : ' ';
 8002c2c:	46a9      	mov	r9, r5
		while (!(f & 2) && j++ < w) xputc(d);
 8002c2e:	d52e      	bpl.n	8002c8e <xvprintf+0x198>
		do xputc(s[--i]); while(i);
 8002c30:	3d01      	subs	r5, #1
 8002c32:	f81d 0005 	ldrb.w	r0, [sp, r5]
 8002c36:	f7ff ff3b 	bl	8002ab0 <xputc>
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	d1f8      	bne.n	8002c30 <xvprintf+0x13a>
		while (j++ < w) xputc(' ');
 8002c3e:	45c8      	cmp	r8, r9
 8002c40:	d9bb      	bls.n	8002bba <xvprintf+0xc4>
 8002c42:	2020      	movs	r0, #32
 8002c44:	f7ff ff34 	bl	8002ab0 <xputc>
 8002c48:	f109 0901 	add.w	r9, r9, #1
 8002c4c:	e7f7      	b.n	8002c3e <xvprintf+0x148>
			while (!(f & 2) && j++ < w) xputc(' ');
 8002c4e:	2020      	movs	r0, #32
 8002c50:	f7ff ff2e 	bl	8002ab0 <xputc>
 8002c54:	4635      	mov	r5, r6
 8002c56:	4545      	cmp	r5, r8
 8002c58:	f105 0601 	add.w	r6, r5, #1
 8002c5c:	d3f7      	bcc.n	8002c4e <xvprintf+0x158>
 8002c5e:	4635      	mov	r5, r6
 8002c60:	e7a6      	b.n	8002bb0 <xvprintf+0xba>
			while (j++ < w) xputc(' ');
 8002c62:	2020      	movs	r0, #32
 8002c64:	f7ff ff24 	bl	8002ab0 <xputc>
 8002c68:	3501      	adds	r5, #1
 8002c6a:	e7a4      	b.n	8002bb6 <xvprintf+0xc0>
			xputc((char)va_arg(arp, int)); continue;
 8002c6c:	7828      	ldrb	r0, [r5, #0]
 8002c6e:	1d2c      	adds	r4, r5, #4
 8002c70:	f7ff ff1e 	bl	8002ab0 <xputc>
 8002c74:	e7a1      	b.n	8002bba <xvprintf+0xc4>
			r = 16; break;
 8002c76:	2010      	movs	r0, #16
 8002c78:	e7a3      	b.n	8002bc2 <xvprintf+0xcc>
			r = 2; break;
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	e7a1      	b.n	8002bc2 <xvprintf+0xcc>
			r = 10; break;
 8002c7e:	200a      	movs	r0, #10
 8002c80:	e79f      	b.n	8002bc2 <xvprintf+0xcc>
 8002c82:	462a      	mov	r2, r5
 8002c84:	e7ae      	b.n	8002be4 <xvprintf+0xee>
		while (!(f & 2) && j++ < w) xputc(d);
 8002c86:	4650      	mov	r0, sl
 8002c88:	f7ff ff12 	bl	8002ab0 <xputc>
 8002c8c:	46b1      	mov	r9, r6
 8002c8e:	45c1      	cmp	r9, r8
 8002c90:	f109 0601 	add.w	r6, r9, #1
 8002c94:	d3f7      	bcc.n	8002c86 <xvprintf+0x190>
 8002c96:	46b1      	mov	r9, r6
 8002c98:	e7ca      	b.n	8002c30 <xvprintf+0x13a>
	}
}
 8002c9a:	b004      	add	sp, #16
 8002c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002ca0 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8002ca0:	b40f      	push	{r0, r1, r2, r3}
 8002ca2:	b507      	push	{r0, r1, r2, lr}
 8002ca4:	a904      	add	r1, sp, #16
 8002ca6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list arp;


	va_start(arp, fmt);
 8002caa:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 8002cac:	f7ff ff23 	bl	8002af6 <xvprintf>
	va_end(arp);
}
 8002cb0:	b003      	add	sp, #12
 8002cb2:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cb6:	b004      	add	sp, #16
 8002cb8:	4770      	bx	lr
	...

08002cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cf4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002cc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002cc2:	e003      	b.n	8002ccc <LoopCopyDataInit>

08002cc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002cc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002cc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002cca:	3104      	adds	r1, #4

08002ccc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ccc:	480b      	ldr	r0, [pc, #44]	; (8002cfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002cd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002cd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002cd4:	d3f6      	bcc.n	8002cc4 <CopyDataInit>
	ldr	r2, =_sbss
 8002cd6:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002cd8:	e002      	b.n	8002ce0 <LoopFillZerobss>

08002cda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002cda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002cdc:	f842 3b04 	str.w	r3, [r2], #4

08002ce0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <LoopForever+0x16>)
	cmp	r2, r3
 8002ce2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ce4:	d3f9      	bcc.n	8002cda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ce6:	f7ff fdef 	bl	80028c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cea:	f000 f811 	bl	8002d10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cee:	f7ff f97b 	bl	8001fe8 <main>

08002cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cf2:	e7fe      	b.n	8002cf2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cf4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002cf8:	08003104 	.word	0x08003104
	ldr	r0, =_sdata
 8002cfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d00:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002d04:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002d08:	2000036c 	.word	0x2000036c

08002d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d0c:	e7fe      	b.n	8002d0c <ADC1_2_IRQHandler>
	...

08002d10 <__libc_init_array>:
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	4e0d      	ldr	r6, [pc, #52]	; (8002d48 <__libc_init_array+0x38>)
 8002d14:	4c0d      	ldr	r4, [pc, #52]	; (8002d4c <__libc_init_array+0x3c>)
 8002d16:	1ba4      	subs	r4, r4, r6
 8002d18:	10a4      	asrs	r4, r4, #2
 8002d1a:	2500      	movs	r5, #0
 8002d1c:	42a5      	cmp	r5, r4
 8002d1e:	d109      	bne.n	8002d34 <__libc_init_array+0x24>
 8002d20:	4e0b      	ldr	r6, [pc, #44]	; (8002d50 <__libc_init_array+0x40>)
 8002d22:	4c0c      	ldr	r4, [pc, #48]	; (8002d54 <__libc_init_array+0x44>)
 8002d24:	f000 f988 	bl	8003038 <_init>
 8002d28:	1ba4      	subs	r4, r4, r6
 8002d2a:	10a4      	asrs	r4, r4, #2
 8002d2c:	2500      	movs	r5, #0
 8002d2e:	42a5      	cmp	r5, r4
 8002d30:	d105      	bne.n	8002d3e <__libc_init_array+0x2e>
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d38:	4798      	blx	r3
 8002d3a:	3501      	adds	r5, #1
 8002d3c:	e7ee      	b.n	8002d1c <__libc_init_array+0xc>
 8002d3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d42:	4798      	blx	r3
 8002d44:	3501      	adds	r5, #1
 8002d46:	e7f2      	b.n	8002d2e <__libc_init_array+0x1e>
 8002d48:	080030fc 	.word	0x080030fc
 8002d4c:	080030fc 	.word	0x080030fc
 8002d50:	080030fc 	.word	0x080030fc
 8002d54:	08003100 	.word	0x08003100

08002d58 <swapfunc>:
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	b530      	push	{r4, r5, lr}
 8002d5c:	dc0a      	bgt.n	8002d74 <swapfunc+0x1c>
 8002d5e:	0892      	lsrs	r2, r2, #2
 8002d60:	3a01      	subs	r2, #1
 8002d62:	6803      	ldr	r3, [r0, #0]
 8002d64:	680c      	ldr	r4, [r1, #0]
 8002d66:	f840 4b04 	str.w	r4, [r0], #4
 8002d6a:	2a00      	cmp	r2, #0
 8002d6c:	f841 3b04 	str.w	r3, [r1], #4
 8002d70:	dcf6      	bgt.n	8002d60 <swapfunc+0x8>
 8002d72:	bd30      	pop	{r4, r5, pc}
 8002d74:	4603      	mov	r3, r0
 8002d76:	780d      	ldrb	r5, [r1, #0]
 8002d78:	781c      	ldrb	r4, [r3, #0]
 8002d7a:	f803 5b01 	strb.w	r5, [r3], #1
 8002d7e:	f801 4b01 	strb.w	r4, [r1], #1
 8002d82:	1ad4      	subs	r4, r2, r3
 8002d84:	4404      	add	r4, r0
 8002d86:	2c00      	cmp	r4, #0
 8002d88:	dcf5      	bgt.n	8002d76 <swapfunc+0x1e>
 8002d8a:	bd30      	pop	{r4, r5, pc}

08002d8c <med3.isra.1>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	460c      	mov	r4, r1
 8002d90:	4615      	mov	r5, r2
 8002d92:	4607      	mov	r7, r0
 8002d94:	461e      	mov	r6, r3
 8002d96:	4798      	blx	r3
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	da0a      	bge.n	8002db6 <med3.isra.1+0x2a>
 8002da0:	47b0      	blx	r6
 8002da2:	2800      	cmp	r0, #0
 8002da4:	db05      	blt.n	8002db2 <med3.isra.1+0x26>
 8002da6:	4629      	mov	r1, r5
 8002da8:	4638      	mov	r0, r7
 8002daa:	47b0      	blx	r6
 8002dac:	2800      	cmp	r0, #0
 8002dae:	db0a      	blt.n	8002dc6 <med3.isra.1+0x3a>
 8002db0:	463c      	mov	r4, r7
 8002db2:	4620      	mov	r0, r4
 8002db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002db6:	47b0      	blx	r6
 8002db8:	2800      	cmp	r0, #0
 8002dba:	dcfa      	bgt.n	8002db2 <med3.isra.1+0x26>
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	4638      	mov	r0, r7
 8002dc0:	47b0      	blx	r6
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	dbf4      	blt.n	8002db0 <med3.isra.1+0x24>
 8002dc6:	462c      	mov	r4, r5
 8002dc8:	e7f3      	b.n	8002db2 <med3.isra.1+0x26>

08002dca <qsort>:
 8002dca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	4606      	mov	r6, r0
 8002dd2:	468b      	mov	fp, r1
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	07b2      	lsls	r2, r6, #30
 8002dda:	d113      	bne.n	8002e04 <qsort+0x3a>
 8002ddc:	07a3      	lsls	r3, r4, #30
 8002dde:	d111      	bne.n	8002e04 <qsort+0x3a>
 8002de0:	f1b4 0804 	subs.w	r8, r4, #4
 8002de4:	bf18      	it	ne
 8002de6:	f04f 0801 	movne.w	r8, #1
 8002dea:	1933      	adds	r3, r6, r4
 8002dec:	f1bb 0f06 	cmp.w	fp, #6
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	d829      	bhi.n	8002e48 <qsort+0x7e>
 8002df4:	461f      	mov	r7, r3
 8002df6:	fb04 6b0b 	mla	fp, r4, fp, r6
 8002dfa:	455f      	cmp	r7, fp
 8002dfc:	f080 8119 	bcs.w	8003032 <qsort+0x268>
 8002e00:	46b9      	mov	r9, r7
 8002e02:	e01d      	b.n	8002e40 <qsort+0x76>
 8002e04:	f04f 0802 	mov.w	r8, #2
 8002e08:	e7ef      	b.n	8002dea <qsort+0x20>
 8002e0a:	4643      	mov	r3, r8
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	4651      	mov	r1, sl
 8002e10:	4648      	mov	r0, r9
 8002e12:	f7ff ffa1 	bl	8002d58 <swapfunc>
 8002e16:	e012      	b.n	8002e3e <qsort+0x74>
 8002e18:	eba9 0a04 	sub.w	sl, r9, r4
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	4650      	mov	r0, sl
 8002e20:	9b00      	ldr	r3, [sp, #0]
 8002e22:	4798      	blx	r3
 8002e24:	2800      	cmp	r0, #0
 8002e26:	dd0d      	ble.n	8002e44 <qsort+0x7a>
 8002e28:	f1b8 0f00 	cmp.w	r8, #0
 8002e2c:	d1ed      	bne.n	8002e0a <qsort+0x40>
 8002e2e:	f8d9 3000 	ldr.w	r3, [r9]
 8002e32:	f8da 2000 	ldr.w	r2, [sl]
 8002e36:	f8c9 2000 	str.w	r2, [r9]
 8002e3a:	f8ca 3000 	str.w	r3, [sl]
 8002e3e:	46d1      	mov	r9, sl
 8002e40:	454e      	cmp	r6, r9
 8002e42:	d3e9      	bcc.n	8002e18 <qsort+0x4e>
 8002e44:	4427      	add	r7, r4
 8002e46:	e7d8      	b.n	8002dfa <qsort+0x30>
 8002e48:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8002e4c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002e50:	f1bb 0f07 	cmp.w	fp, #7
 8002e54:	fb04 6505 	mla	r5, r4, r5, r6
 8002e58:	9301      	str	r3, [sp, #4]
 8002e5a:	d024      	beq.n	8002ea6 <qsort+0xdc>
 8002e5c:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8002e60:	fb04 6903 	mla	r9, r4, r3, r6
 8002e64:	d951      	bls.n	8002f0a <qsort+0x140>
 8002e66:	ea4f 07db 	mov.w	r7, fp, lsr #3
 8002e6a:	4367      	muls	r7, r4
 8002e6c:	19f1      	adds	r1, r6, r7
 8002e6e:	19ca      	adds	r2, r1, r7
 8002e70:	9b00      	ldr	r3, [sp, #0]
 8002e72:	4630      	mov	r0, r6
 8002e74:	f7ff ff8a 	bl	8002d8c <med3.isra.1>
 8002e78:	19ea      	adds	r2, r5, r7
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	9b00      	ldr	r3, [sp, #0]
 8002e7e:	4682      	mov	sl, r0
 8002e80:	1be8      	subs	r0, r5, r7
 8002e82:	f7ff ff83 	bl	8002d8c <med3.isra.1>
 8002e86:	4605      	mov	r5, r0
 8002e88:	eba9 0047 	sub.w	r0, r9, r7, lsl #1
 8002e8c:	464a      	mov	r2, r9
 8002e8e:	9b00      	ldr	r3, [sp, #0]
 8002e90:	19c1      	adds	r1, r0, r7
 8002e92:	f7ff ff7b 	bl	8002d8c <med3.isra.1>
 8002e96:	4681      	mov	r9, r0
 8002e98:	4629      	mov	r1, r5
 8002e9a:	9b00      	ldr	r3, [sp, #0]
 8002e9c:	464a      	mov	r2, r9
 8002e9e:	4650      	mov	r0, sl
 8002ea0:	f7ff ff74 	bl	8002d8c <med3.isra.1>
 8002ea4:	4605      	mov	r5, r0
 8002ea6:	f1b8 0f00 	cmp.w	r8, #0
 8002eaa:	d130      	bne.n	8002f0e <qsort+0x144>
 8002eac:	6833      	ldr	r3, [r6, #0]
 8002eae:	682a      	ldr	r2, [r5, #0]
 8002eb0:	6032      	str	r2, [r6, #0]
 8002eb2:	602b      	str	r3, [r5, #0]
 8002eb4:	9b01      	ldr	r3, [sp, #4]
 8002eb6:	1937      	adds	r7, r6, r4
 8002eb8:	fb04 6503 	mla	r5, r4, r3, r6
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	9302      	str	r3, [sp, #8]
 8002ec0:	46a9      	mov	r9, r5
 8002ec2:	9701      	str	r7, [sp, #4]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9a02      	ldr	r2, [sp, #8]
 8002ec8:	eba2 0a04 	sub.w	sl, r2, r4
 8002ecc:	4555      	cmp	r5, sl
 8002ece:	f0c0 80aa 	bcc.w	8003026 <qsort+0x25c>
 8002ed2:	9303      	str	r3, [sp, #12]
 8002ed4:	4631      	mov	r1, r6
 8002ed6:	9b00      	ldr	r3, [sp, #0]
 8002ed8:	4650      	mov	r0, sl
 8002eda:	4798      	blx	r3
 8002edc:	2800      	cmp	r0, #0
 8002ede:	9b03      	ldr	r3, [sp, #12]
 8002ee0:	dc31      	bgt.n	8002f46 <qsort+0x17c>
 8002ee2:	d10e      	bne.n	8002f02 <qsort+0x138>
 8002ee4:	f1b8 0f00 	cmp.w	r8, #0
 8002ee8:	d118      	bne.n	8002f1c <qsort+0x152>
 8002eea:	9b01      	ldr	r3, [sp, #4]
 8002eec:	9901      	ldr	r1, [sp, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8da 2000 	ldr.w	r2, [sl]
 8002ef4:	600a      	str	r2, [r1, #0]
 8002ef6:	f8ca 3000 	str.w	r3, [sl]
 8002efa:	9b01      	ldr	r3, [sp, #4]
 8002efc:	4423      	add	r3, r4
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	2301      	movs	r3, #1
 8002f02:	9a02      	ldr	r2, [sp, #8]
 8002f04:	4422      	add	r2, r4
 8002f06:	9202      	str	r2, [sp, #8]
 8002f08:	e7dd      	b.n	8002ec6 <qsort+0xfc>
 8002f0a:	46b2      	mov	sl, r6
 8002f0c:	e7c4      	b.n	8002e98 <qsort+0xce>
 8002f0e:	4643      	mov	r3, r8
 8002f10:	4622      	mov	r2, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	4630      	mov	r0, r6
 8002f16:	f7ff ff1f 	bl	8002d58 <swapfunc>
 8002f1a:	e7cb      	b.n	8002eb4 <qsort+0xea>
 8002f1c:	4643      	mov	r3, r8
 8002f1e:	4622      	mov	r2, r4
 8002f20:	4651      	mov	r1, sl
 8002f22:	9801      	ldr	r0, [sp, #4]
 8002f24:	f7ff ff18 	bl	8002d58 <swapfunc>
 8002f28:	e7e7      	b.n	8002efa <qsort+0x130>
 8002f2a:	d10b      	bne.n	8002f44 <qsort+0x17a>
 8002f2c:	f1b8 0f00 	cmp.w	r8, #0
 8002f30:	d11d      	bne.n	8002f6e <qsort+0x1a4>
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	f8d9 2000 	ldr.w	r2, [r9]
 8002f38:	602a      	str	r2, [r5, #0]
 8002f3a:	f8c9 3000 	str.w	r3, [r9]
 8002f3e:	eba9 0904 	sub.w	r9, r9, r4
 8002f42:	2301      	movs	r3, #1
 8002f44:	1b2d      	subs	r5, r5, r4
 8002f46:	4555      	cmp	r5, sl
 8002f48:	d36d      	bcc.n	8003026 <qsort+0x25c>
 8002f4a:	9303      	str	r3, [sp, #12]
 8002f4c:	4631      	mov	r1, r6
 8002f4e:	9b00      	ldr	r3, [sp, #0]
 8002f50:	4628      	mov	r0, r5
 8002f52:	4798      	blx	r3
 8002f54:	2800      	cmp	r0, #0
 8002f56:	9b03      	ldr	r3, [sp, #12]
 8002f58:	dae7      	bge.n	8002f2a <qsort+0x160>
 8002f5a:	f1b8 0f00 	cmp.w	r8, #0
 8002f5e:	d00d      	beq.n	8002f7c <qsort+0x1b2>
 8002f60:	4643      	mov	r3, r8
 8002f62:	4622      	mov	r2, r4
 8002f64:	4629      	mov	r1, r5
 8002f66:	4650      	mov	r0, sl
 8002f68:	f7ff fef6 	bl	8002d58 <swapfunc>
 8002f6c:	e00c      	b.n	8002f88 <qsort+0x1be>
 8002f6e:	4643      	mov	r3, r8
 8002f70:	4622      	mov	r2, r4
 8002f72:	4649      	mov	r1, r9
 8002f74:	4628      	mov	r0, r5
 8002f76:	f7ff feef 	bl	8002d58 <swapfunc>
 8002f7a:	e7e0      	b.n	8002f3e <qsort+0x174>
 8002f7c:	f8da 3000 	ldr.w	r3, [sl]
 8002f80:	682a      	ldr	r2, [r5, #0]
 8002f82:	f8ca 2000 	str.w	r2, [sl]
 8002f86:	602b      	str	r3, [r5, #0]
 8002f88:	1b2d      	subs	r5, r5, r4
 8002f8a:	e7b9      	b.n	8002f00 <qsort+0x136>
 8002f8c:	4643      	mov	r3, r8
 8002f8e:	4622      	mov	r2, r4
 8002f90:	4649      	mov	r1, r9
 8002f92:	4628      	mov	r0, r5
 8002f94:	f7ff fee0 	bl	8002d58 <swapfunc>
 8002f98:	e010      	b.n	8002fbc <qsort+0x1f2>
 8002f9a:	eba5 0904 	sub.w	r9, r5, r4
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	4648      	mov	r0, r9
 8002fa2:	9b00      	ldr	r3, [sp, #0]
 8002fa4:	4798      	blx	r3
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	dd0b      	ble.n	8002fc2 <qsort+0x1f8>
 8002faa:	f1b8 0f00 	cmp.w	r8, #0
 8002fae:	d1ed      	bne.n	8002f8c <qsort+0x1c2>
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	f8d9 2000 	ldr.w	r2, [r9]
 8002fb6:	602a      	str	r2, [r5, #0]
 8002fb8:	f8c9 3000 	str.w	r3, [r9]
 8002fbc:	464d      	mov	r5, r9
 8002fbe:	42ae      	cmp	r6, r5
 8002fc0:	d3eb      	bcc.n	8002f9a <qsort+0x1d0>
 8002fc2:	4427      	add	r7, r4
 8002fc4:	455f      	cmp	r7, fp
 8002fc6:	d234      	bcs.n	8003032 <qsort+0x268>
 8002fc8:	463d      	mov	r5, r7
 8002fca:	e7f8      	b.n	8002fbe <qsort+0x1f4>
 8002fcc:	9b01      	ldr	r3, [sp, #4]
 8002fce:	eb06 070b 	add.w	r7, r6, fp
 8002fd2:	1b9a      	subs	r2, r3, r6
 8002fd4:	ebaa 0b03 	sub.w	fp, sl, r3
 8002fd8:	455a      	cmp	r2, fp
 8002fda:	bfa8      	it	ge
 8002fdc:	465a      	movge	r2, fp
 8002fde:	b12a      	cbz	r2, 8002fec <qsort+0x222>
 8002fe0:	4643      	mov	r3, r8
 8002fe2:	ebaa 0102 	sub.w	r1, sl, r2
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	f7ff feb6 	bl	8002d58 <swapfunc>
 8002fec:	eba7 0209 	sub.w	r2, r7, r9
 8002ff0:	eba9 0505 	sub.w	r5, r9, r5
 8002ff4:	1b12      	subs	r2, r2, r4
 8002ff6:	42aa      	cmp	r2, r5
 8002ff8:	bf28      	it	cs
 8002ffa:	462a      	movcs	r2, r5
 8002ffc:	b122      	cbz	r2, 8003008 <qsort+0x23e>
 8002ffe:	4643      	mov	r3, r8
 8003000:	1ab9      	subs	r1, r7, r2
 8003002:	4650      	mov	r0, sl
 8003004:	f7ff fea8 	bl	8002d58 <swapfunc>
 8003008:	455c      	cmp	r4, fp
 800300a:	d206      	bcs.n	800301a <qsort+0x250>
 800300c:	fbbb f1f4 	udiv	r1, fp, r4
 8003010:	9b00      	ldr	r3, [sp, #0]
 8003012:	4622      	mov	r2, r4
 8003014:	4630      	mov	r0, r6
 8003016:	f7ff fed8 	bl	8002dca <qsort>
 800301a:	42ac      	cmp	r4, r5
 800301c:	d209      	bcs.n	8003032 <qsort+0x268>
 800301e:	fbb5 fbf4 	udiv	fp, r5, r4
 8003022:	1b7e      	subs	r6, r7, r5
 8003024:	e6d8      	b.n	8002dd8 <qsort+0xe>
 8003026:	fb04 fb0b 	mul.w	fp, r4, fp
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ce      	bne.n	8002fcc <qsort+0x202>
 800302e:	44b3      	add	fp, r6
 8003030:	e7c8      	b.n	8002fc4 <qsort+0x1fa>
 8003032:	b005      	add	sp, #20
 8003034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003038 <_init>:
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	bf00      	nop
 800303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303e:	bc08      	pop	{r3}
 8003040:	469e      	mov	lr, r3
 8003042:	4770      	bx	lr

08003044 <_fini>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	bf00      	nop
 8003048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	469e      	mov	lr, r3
 800304e:	4770      	bx	lr
