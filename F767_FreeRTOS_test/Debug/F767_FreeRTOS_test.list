
F767_FreeRTOS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d48  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002fd8  08002fd8  00012fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003eac  2000000c  08002fe8  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  20003eb8  08002fe8  00023eb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002008c  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000408a  00000000  00000000  000400c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009ec1  00000000  00000000  00044150  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e78  00000000  00000000  0004e018  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001200  00000000  00000000  0004ee90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000085ff  00000000  00000000  00050090  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005c58  00000000  00000000  0005868f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005e2e7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002904  00000000  00000000  0005e364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000000c 	.word	0x2000000c
 800021c:	00000000 	.word	0x00000000
 8000220:	08002f30 	.word	0x08002f30

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000010 	.word	0x20000010
 800023c:	08002f30 	.word	0x08002f30

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b97a 	b.w	800054c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	468c      	mov	ip, r1
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	9e08      	ldr	r6, [sp, #32]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d151      	bne.n	8000324 <__udivmoddi4+0xb4>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d96d      	bls.n	8000362 <__udivmoddi4+0xf2>
 8000286:	fab2 fe82 	clz	lr, r2
 800028a:	f1be 0f00 	cmp.w	lr, #0
 800028e:	d00b      	beq.n	80002a8 <__udivmoddi4+0x38>
 8000290:	f1ce 0c20 	rsb	ip, lr, #32
 8000294:	fa01 f50e 	lsl.w	r5, r1, lr
 8000298:	fa20 fc0c 	lsr.w	ip, r0, ip
 800029c:	fa02 f70e 	lsl.w	r7, r2, lr
 80002a0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002a4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ac:	0c25      	lsrs	r5, r4, #16
 80002ae:	fbbc f8fa 	udiv	r8, ip, sl
 80002b2:	fa1f f987 	uxth.w	r9, r7
 80002b6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002be:	fb08 f309 	mul.w	r3, r8, r9
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x6c>
 80002c6:	19ed      	adds	r5, r5, r7
 80002c8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002cc:	f080 8123 	bcs.w	8000516 <__udivmoddi4+0x2a6>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	f240 8120 	bls.w	8000516 <__udivmoddi4+0x2a6>
 80002d6:	f1a8 0802 	sub.w	r8, r8, #2
 80002da:	443d      	add	r5, r7
 80002dc:	1aed      	subs	r5, r5, r3
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002e4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	fb00 f909 	mul.w	r9, r0, r9
 80002f0:	45a1      	cmp	r9, r4
 80002f2:	d909      	bls.n	8000308 <__udivmoddi4+0x98>
 80002f4:	19e4      	adds	r4, r4, r7
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	f080 810a 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 80002fe:	45a1      	cmp	r9, r4
 8000300:	f240 8107 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000304:	3802      	subs	r0, #2
 8000306:	443c      	add	r4, r7
 8000308:	eba4 0409 	sub.w	r4, r4, r9
 800030c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000310:	2100      	movs	r1, #0
 8000312:	2e00      	cmp	r6, #0
 8000314:	d061      	beq.n	80003da <__udivmoddi4+0x16a>
 8000316:	fa24 f40e 	lsr.w	r4, r4, lr
 800031a:	2300      	movs	r3, #0
 800031c:	6034      	str	r4, [r6, #0]
 800031e:	6073      	str	r3, [r6, #4]
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	428b      	cmp	r3, r1
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0xc8>
 8000328:	2e00      	cmp	r6, #0
 800032a:	d054      	beq.n	80003d6 <__udivmoddi4+0x166>
 800032c:	2100      	movs	r1, #0
 800032e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000332:	4608      	mov	r0, r1
 8000334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000338:	fab3 f183 	clz	r1, r3
 800033c:	2900      	cmp	r1, #0
 800033e:	f040 808e 	bne.w	800045e <__udivmoddi4+0x1ee>
 8000342:	42ab      	cmp	r3, r5
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xdc>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80fa 	bhi.w	8000540 <__udivmoddi4+0x2d0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb65 0503 	sbc.w	r5, r5, r3
 8000352:	2001      	movs	r0, #1
 8000354:	46ac      	mov	ip, r5
 8000356:	2e00      	cmp	r6, #0
 8000358:	d03f      	beq.n	80003da <__udivmoddi4+0x16a>
 800035a:	e886 1010 	stmia.w	r6, {r4, ip}
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	b912      	cbnz	r2, 800036a <__udivmoddi4+0xfa>
 8000364:	2701      	movs	r7, #1
 8000366:	fbb7 f7f2 	udiv	r7, r7, r2
 800036a:	fab7 fe87 	clz	lr, r7
 800036e:	f1be 0f00 	cmp.w	lr, #0
 8000372:	d134      	bne.n	80003de <__udivmoddi4+0x16e>
 8000374:	1beb      	subs	r3, r5, r7
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	2101      	movs	r1, #1
 800037e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000382:	0c25      	lsrs	r5, r4, #16
 8000384:	fb02 3318 	mls	r3, r2, r8, r3
 8000388:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800038c:	fb0c f308 	mul.w	r3, ip, r8
 8000390:	42ab      	cmp	r3, r5
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x134>
 8000394:	19ed      	adds	r5, r5, r7
 8000396:	f108 30ff 	add.w	r0, r8, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x132>
 800039c:	42ab      	cmp	r3, r5
 800039e:	f200 80d1 	bhi.w	8000544 <__udivmoddi4+0x2d4>
 80003a2:	4680      	mov	r8, r0
 80003a4:	1aed      	subs	r5, r5, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ac:	fb02 5510 	mls	r5, r2, r0, r5
 80003b0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003b4:	fb0c fc00 	mul.w	ip, ip, r0
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x15c>
 80003bc:	19e4      	adds	r4, r4, r7
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x15a>
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	f200 80b8 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 040c 	sub.w	r4, r4, ip
 80003d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003d4:	e79d      	b.n	8000312 <__udivmoddi4+0xa2>
 80003d6:	4631      	mov	r1, r6
 80003d8:	4630      	mov	r0, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	f1ce 0420 	rsb	r4, lr, #32
 80003e2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ea:	fa20 f804 	lsr.w	r8, r0, r4
 80003ee:	0c3a      	lsrs	r2, r7, #16
 80003f0:	fa25 f404 	lsr.w	r4, r5, r4
 80003f4:	ea48 0803 	orr.w	r8, r8, r3
 80003f8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003fc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000400:	fb02 4411 	mls	r4, r2, r1, r4
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800040c:	fb01 f30c 	mul.w	r3, r1, ip
 8000410:	42ab      	cmp	r3, r5
 8000412:	fa00 f40e 	lsl.w	r4, r0, lr
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x1bc>
 8000418:	19ed      	adds	r5, r5, r7
 800041a:	f101 30ff 	add.w	r0, r1, #4294967295
 800041e:	f080 808a 	bcs.w	8000536 <__udivmoddi4+0x2c6>
 8000422:	42ab      	cmp	r3, r5
 8000424:	f240 8087 	bls.w	8000536 <__udivmoddi4+0x2c6>
 8000428:	3902      	subs	r1, #2
 800042a:	443d      	add	r5, r7
 800042c:	1aeb      	subs	r3, r5, r3
 800042e:	fa1f f588 	uxth.w	r5, r8
 8000432:	fbb3 f0f2 	udiv	r0, r3, r2
 8000436:	fb02 3310 	mls	r3, r2, r0, r3
 800043a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043e:	fb00 f30c 	mul.w	r3, r0, ip
 8000442:	42ab      	cmp	r3, r5
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x1e6>
 8000446:	19ed      	adds	r5, r5, r7
 8000448:	f100 38ff 	add.w	r8, r0, #4294967295
 800044c:	d26f      	bcs.n	800052e <__udivmoddi4+0x2be>
 800044e:	42ab      	cmp	r3, r5
 8000450:	d96d      	bls.n	800052e <__udivmoddi4+0x2be>
 8000452:	3802      	subs	r0, #2
 8000454:	443d      	add	r5, r7
 8000456:	1aeb      	subs	r3, r5, r3
 8000458:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045c:	e78f      	b.n	800037e <__udivmoddi4+0x10e>
 800045e:	f1c1 0720 	rsb	r7, r1, #32
 8000462:	fa22 f807 	lsr.w	r8, r2, r7
 8000466:	408b      	lsls	r3, r1
 8000468:	fa05 f401 	lsl.w	r4, r5, r1
 800046c:	ea48 0303 	orr.w	r3, r8, r3
 8000470:	fa20 fe07 	lsr.w	lr, r0, r7
 8000474:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000478:	40fd      	lsrs	r5, r7
 800047a:	ea4e 0e04 	orr.w	lr, lr, r4
 800047e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000482:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000486:	fb0c 5519 	mls	r5, ip, r9, r5
 800048a:	fa1f f883 	uxth.w	r8, r3
 800048e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000492:	fb09 f408 	mul.w	r4, r9, r8
 8000496:	42ac      	cmp	r4, r5
 8000498:	fa02 f201 	lsl.w	r2, r2, r1
 800049c:	fa00 fa01 	lsl.w	sl, r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x244>
 80004a2:	18ed      	adds	r5, r5, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d243      	bcs.n	8000532 <__udivmoddi4+0x2c2>
 80004aa:	42ac      	cmp	r4, r5
 80004ac:	d941      	bls.n	8000532 <__udivmoddi4+0x2c2>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	441d      	add	r5, r3
 80004b4:	1b2d      	subs	r5, r5, r4
 80004b6:	fa1f fe8e 	uxth.w	lr, lr
 80004ba:	fbb5 f0fc 	udiv	r0, r5, ip
 80004be:	fb0c 5510 	mls	r5, ip, r0, r5
 80004c2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45a0      	cmp	r8, r4
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x26e>
 80004ce:	18e4      	adds	r4, r4, r3
 80004d0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004d4:	d229      	bcs.n	800052a <__udivmoddi4+0x2ba>
 80004d6:	45a0      	cmp	r8, r4
 80004d8:	d927      	bls.n	800052a <__udivmoddi4+0x2ba>
 80004da:	3802      	subs	r0, #2
 80004dc:	441c      	add	r4, r3
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba4 0408 	sub.w	r4, r4, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454c      	cmp	r4, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	464d      	mov	r5, r9
 80004f0:	d315      	bcc.n	800051e <__udivmoddi4+0x2ae>
 80004f2:	d012      	beq.n	800051a <__udivmoddi4+0x2aa>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x29c>
 80004f6:	ebba 030e 	subs.w	r3, sl, lr
 80004fa:	eb64 0405 	sbc.w	r4, r4, r5
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40cb      	lsrs	r3, r1
 8000504:	431f      	orrs	r7, r3
 8000506:	40cc      	lsrs	r4, r1
 8000508:	6037      	str	r7, [r6, #0]
 800050a:	6074      	str	r4, [r6, #4]
 800050c:	2100      	movs	r1, #0
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	4618      	mov	r0, r3
 8000514:	e6f8      	b.n	8000308 <__udivmoddi4+0x98>
 8000516:	4690      	mov	r8, r2
 8000518:	e6e0      	b.n	80002dc <__udivmoddi4+0x6c>
 800051a:	45c2      	cmp	sl, r8
 800051c:	d2ea      	bcs.n	80004f4 <__udivmoddi4+0x284>
 800051e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000522:	eb69 0503 	sbc.w	r5, r9, r3
 8000526:	3801      	subs	r0, #1
 8000528:	e7e4      	b.n	80004f4 <__udivmoddi4+0x284>
 800052a:	4628      	mov	r0, r5
 800052c:	e7d7      	b.n	80004de <__udivmoddi4+0x26e>
 800052e:	4640      	mov	r0, r8
 8000530:	e791      	b.n	8000456 <__udivmoddi4+0x1e6>
 8000532:	4681      	mov	r9, r0
 8000534:	e7be      	b.n	80004b4 <__udivmoddi4+0x244>
 8000536:	4601      	mov	r1, r0
 8000538:	e778      	b.n	800042c <__udivmoddi4+0x1bc>
 800053a:	3802      	subs	r0, #2
 800053c:	443c      	add	r4, r7
 800053e:	e745      	b.n	80003cc <__udivmoddi4+0x15c>
 8000540:	4608      	mov	r0, r1
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xe6>
 8000544:	f1a8 0802 	sub.w	r8, r8, #2
 8000548:	443d      	add	r5, r7
 800054a:	e72b      	b.n	80003a4 <__udivmoddi4+0x134>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_Init+0x20>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000552:	2003      	movs	r0, #3
{
 8000554:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000556:	6813      	ldr	r3, [r2, #0]
 8000558:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055e:	f000 f81b 	bl	8000598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000562:	2000      	movs	r0, #0
 8000564:	f002 fa78 	bl	8002a58 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000568:	f002 fa45 	bl	80029f6 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800056c:	2000      	movs	r0, #0
 800056e:	bd08      	pop	{r3, pc}
 8000570:	40023c00 	.word	0x40023c00

08000574 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000574:	4a03      	ldr	r2, [pc, #12]	; (8000584 <HAL_IncTick+0x10>)
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <HAL_IncTick+0x14>)
 8000578:	6811      	ldr	r1, [r2, #0]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	440b      	add	r3, r1
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20003d78 	.word	0x20003d78
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800058c:	4b01      	ldr	r3, [pc, #4]	; (8000594 <HAL_GetTick+0x8>)
 800058e:	6818      	ldr	r0, [r3, #0]
}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20003d78 	.word	0x20003d78

08000598 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800059a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800059c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800059e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a6:	041b      	lsls	r3, r3, #16
 80005a8:	0c1b      	lsrs	r3, r3, #16
 80005aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80005b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005b4:	60d3      	str	r3, [r2, #12]
 80005b6:	4770      	bx	lr
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	68dc      	ldr	r4, [r3, #12]
 80005c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	bf28      	it	cs
 80005d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d8:	bf8c      	ite	hi
 80005da:	3c03      	subhi	r4, #3
 80005dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005de:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80005e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80005e8:	ea01 0103 	and.w	r1, r1, r3
 80005ec:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	fa05 f404 	lsl.w	r4, r5, r4
 80005f4:	f104 34ff 	add.w	r4, r4, #4294967295
 80005f8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000604:	da05      	bge.n	8000612 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	f000 000f 	and.w	r0, r0, #15
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x6c>)
 800060e:	541a      	strb	r2, [r3, r0]
 8000610:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800061c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800062c:	0942      	lsrs	r2, r0, #5
 800062e:	2301      	movs	r3, #1
 8000630:	f000 001f 	and.w	r0, r0, #31
 8000634:	fa03 f000 	lsl.w	r0, r3, r0
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <HAL_NVIC_EnableIRQ+0x14>)
 800063a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100

08000644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	3801      	subs	r0, #1
 8000646:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064a:	d20a      	bcs.n	8000662 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	21f0      	movs	r1, #240	; 0xf0
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000652:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000654:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000662:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000672:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	bf0c      	ite	eq
 8000678:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800067c:	f022 0204 	bicne.w	r2, r2, #4
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4770      	bx	lr
 8000684:	e000e010 	.word	0xe000e010

08000688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068c:	680b      	ldr	r3, [r1, #0]
{
 800068e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000690:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000854 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000694:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000696:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000698:	4a6c      	ldr	r2, [pc, #432]	; (800084c <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800069a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000858 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 800069e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a2:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80006a4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006ac:	45b6      	cmp	lr, r6
 80006ae:	f040 80b3 	bne.w	8000818 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006b2:	684c      	ldr	r4, [r1, #4]
 80006b4:	f024 0710 	bic.w	r7, r4, #16
 80006b8:	2f02      	cmp	r7, #2
 80006ba:	d116      	bne.n	80006ea <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80006bc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006c0:	f003 0b07 	and.w	fp, r3, #7
 80006c4:	f04f 0c0f 	mov.w	ip, #15
 80006c8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80006cc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80006d0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006d4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006d8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80006dc:	690d      	ldr	r5, [r1, #16]
 80006de:	fa05 f50b 	lsl.w	r5, r5, fp
 80006e2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80006e6:	f8ca 5020 	str.w	r5, [sl, #32]
 80006ea:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80006ee:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006f0:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006f4:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80006f8:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006fc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006fe:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000702:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000704:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000706:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800070a:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800070e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000712:	d811      	bhi.n	8000738 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000714:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000716:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800071a:	68cf      	ldr	r7, [r1, #12]
 800071c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000720:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000724:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000726:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000728:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800072c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000730:	409f      	lsls	r7, r3
 8000732:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000736:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000738:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800073a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800073c:	688f      	ldr	r7, [r1, #8]
 800073e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000742:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000744:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000746:	00e5      	lsls	r5, r4, #3
 8000748:	d566      	bpl.n	8000818 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800074e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000752:	f003 0e03 	and.w	lr, r3, #3
 8000756:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800075e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000762:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 800076a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800076e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000772:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000776:	9503      	str	r5, [sp, #12]
 8000778:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800077a:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 800077e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000782:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000786:	4d32      	ldr	r5, [pc, #200]	; (8000850 <HAL_GPIO_Init+0x1c8>)
 8000788:	42a8      	cmp	r0, r5
 800078a:	d04c      	beq.n	8000826 <HAL_GPIO_Init+0x19e>
 800078c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000790:	42a8      	cmp	r0, r5
 8000792:	d04a      	beq.n	800082a <HAL_GPIO_Init+0x1a2>
 8000794:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000798:	42a8      	cmp	r0, r5
 800079a:	d048      	beq.n	800082e <HAL_GPIO_Init+0x1a6>
 800079c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a0:	42a8      	cmp	r0, r5
 80007a2:	d046      	beq.n	8000832 <HAL_GPIO_Init+0x1aa>
 80007a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a8:	42a8      	cmp	r0, r5
 80007aa:	d044      	beq.n	8000836 <HAL_GPIO_Init+0x1ae>
 80007ac:	4548      	cmp	r0, r9
 80007ae:	d044      	beq.n	800083a <HAL_GPIO_Init+0x1b2>
 80007b0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007b4:	42a8      	cmp	r0, r5
 80007b6:	d042      	beq.n	800083e <HAL_GPIO_Init+0x1b6>
 80007b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007bc:	42a8      	cmp	r0, r5
 80007be:	d040      	beq.n	8000842 <HAL_GPIO_Init+0x1ba>
 80007c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c4:	42a8      	cmp	r0, r5
 80007c6:	d03e      	beq.n	8000846 <HAL_GPIO_Init+0x1be>
 80007c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007cc:	42a8      	cmp	r0, r5
 80007ce:	bf14      	ite	ne
 80007d0:	250a      	movne	r5, #10
 80007d2:	2509      	moveq	r5, #9
 80007d4:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007d8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007dc:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80007e0:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80007e2:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 80007e6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e8:	bf0c      	ite	eq
 80007ea:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ec:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ee:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80007f2:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80007f4:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80007f6:	bf0c      	ite	eq
 80007f8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007fa:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007fc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000800:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000802:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000804:	bf0c      	ite	eq
 8000806:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000808:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800080a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800080c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800080e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000810:	bf54      	ite	pl
 8000812:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000814:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000816:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000818:	3301      	adds	r3, #1
 800081a:	2b10      	cmp	r3, #16
 800081c:	f47f af3f 	bne.w	800069e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000820:	b005      	add	sp, #20
 8000822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000826:	2500      	movs	r5, #0
 8000828:	e7d4      	b.n	80007d4 <HAL_GPIO_Init+0x14c>
 800082a:	2501      	movs	r5, #1
 800082c:	e7d2      	b.n	80007d4 <HAL_GPIO_Init+0x14c>
 800082e:	2502      	movs	r5, #2
 8000830:	e7d0      	b.n	80007d4 <HAL_GPIO_Init+0x14c>
 8000832:	2503      	movs	r5, #3
 8000834:	e7ce      	b.n	80007d4 <HAL_GPIO_Init+0x14c>
 8000836:	2504      	movs	r5, #4
 8000838:	e7cc      	b.n	80007d4 <HAL_GPIO_Init+0x14c>
 800083a:	2505      	movs	r5, #5
 800083c:	e7ca      	b.n	80007d4 <HAL_GPIO_Init+0x14c>
 800083e:	2506      	movs	r5, #6
 8000840:	e7c8      	b.n	80007d4 <HAL_GPIO_Init+0x14c>
 8000842:	2507      	movs	r5, #7
 8000844:	e7c6      	b.n	80007d4 <HAL_GPIO_Init+0x14c>
 8000846:	2508      	movs	r5, #8
 8000848:	e7c4      	b.n	80007d4 <HAL_GPIO_Init+0x14c>
 800084a:	bf00      	nop
 800084c:	40013c00 	.word	0x40013c00
 8000850:	40020000 	.word	0x40020000
 8000854:	40023800 	.word	0x40023800
 8000858:	40021400 	.word	0x40021400

0800085c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800085c:	b10a      	cbz	r2, 8000862 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800085e:	6181      	str	r1, [r0, #24]
 8000860:	4770      	bx	lr
 8000862:	0409      	lsls	r1, r1, #16
 8000864:	e7fb      	b.n	800085e <HAL_GPIO_WritePin+0x2>

08000866 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000866:	6943      	ldr	r3, [r0, #20]
 8000868:	4059      	eors	r1, r3
 800086a:	6141      	str	r1, [r0, #20]
 800086c:	4770      	bx	lr
	...

08000870 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000872:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000876:	4c19      	ldr	r4, [pc, #100]	; (80008dc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800087c:	641a      	str	r2, [r3, #64]	; 0x40
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800088e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000890:	f7ff fe7c 	bl	800058c <HAL_GetTick>
 8000894:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000896:	6863      	ldr	r3, [r4, #4]
 8000898:	03da      	lsls	r2, r3, #15
 800089a:	d50c      	bpl.n	80008b6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008a4:	f7ff fe72 	bl	800058c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008a8:	4c0c      	ldr	r4, [pc, #48]	; (80008dc <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80008aa:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008ac:	6863      	ldr	r3, [r4, #4]
 80008ae:	039b      	lsls	r3, r3, #14
 80008b0:	d50a      	bpl.n	80008c8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80008b2:	2000      	movs	r0, #0
 80008b4:	e006      	b.n	80008c4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008b6:	f7ff fe69 	bl	800058c <HAL_GetTick>
 80008ba:	1b40      	subs	r0, r0, r5
 80008bc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008c0:	d9e9      	bls.n	8000896 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80008c2:	2003      	movs	r0, #3
}
 80008c4:	b003      	add	sp, #12
 80008c6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008c8:	f7ff fe60 	bl	800058c <HAL_GetTick>
 80008cc:	1b40      	subs	r0, r0, r5
 80008ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008d2:	d9eb      	bls.n	80008ac <HAL_PWREx_EnableOverDrive+0x3c>
 80008d4:	e7f5      	b.n	80008c2 <HAL_PWREx_EnableOverDrive+0x52>
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008e4:	4604      	mov	r4, r0
 80008e6:	b918      	cbnz	r0, 80008f0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008e8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008ea:	b002      	add	sp, #8
 80008ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008f0:	6803      	ldr	r3, [r0, #0]
 80008f2:	07d8      	lsls	r0, r3, #31
 80008f4:	d410      	bmi.n	8000918 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	0799      	lsls	r1, r3, #30
 80008fa:	d45e      	bmi.n	80009ba <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	0719      	lsls	r1, r3, #28
 8000900:	f100 80a3 	bmi.w	8000a4a <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	075a      	lsls	r2, r3, #29
 8000908:	f100 80c4 	bmi.w	8000a94 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800090c:	69a2      	ldr	r2, [r4, #24]
 800090e:	2a00      	cmp	r2, #0
 8000910:	f040 812e 	bne.w	8000b70 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000914:	2000      	movs	r0, #0
 8000916:	e7e8      	b.n	80008ea <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000918:	4b93      	ldr	r3, [pc, #588]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	f002 020c 	and.w	r2, r2, #12
 8000920:	2a04      	cmp	r2, #4
 8000922:	d007      	beq.n	8000934 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000924:	689a      	ldr	r2, [r3, #8]
 8000926:	f002 020c 	and.w	r2, r2, #12
 800092a:	2a08      	cmp	r2, #8
 800092c:	d10a      	bne.n	8000944 <HAL_RCC_OscConfig+0x64>
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	025a      	lsls	r2, r3, #9
 8000932:	d507      	bpl.n	8000944 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000934:	4b8c      	ldr	r3, [pc, #560]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	039b      	lsls	r3, r3, #14
 800093a:	d5dc      	bpl.n	80008f6 <HAL_RCC_OscConfig+0x16>
 800093c:	6863      	ldr	r3, [r4, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1d9      	bne.n	80008f6 <HAL_RCC_OscConfig+0x16>
 8000942:	e7d1      	b.n	80008e8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000944:	6863      	ldr	r3, [r4, #4]
 8000946:	4d88      	ldr	r5, [pc, #544]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
 8000948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800094c:	d111      	bne.n	8000972 <HAL_RCC_OscConfig+0x92>
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000954:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000956:	f7ff fe19 	bl	800058c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095a:	4d83      	ldr	r5, [pc, #524]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800095c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095e:	682b      	ldr	r3, [r5, #0]
 8000960:	039f      	lsls	r7, r3, #14
 8000962:	d4c8      	bmi.n	80008f6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000964:	f7ff fe12 	bl	800058c <HAL_GetTick>
 8000968:	1b80      	subs	r0, r0, r6
 800096a:	2864      	cmp	r0, #100	; 0x64
 800096c:	d9f7      	bls.n	800095e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800096e:	2003      	movs	r0, #3
 8000970:	e7bb      	b.n	80008ea <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000972:	b99b      	cbnz	r3, 800099c <HAL_RCC_OscConfig+0xbc>
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800097a:	602b      	str	r3, [r5, #0]
 800097c:	682b      	ldr	r3, [r5, #0]
 800097e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000982:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000984:	f7ff fe02 	bl	800058c <HAL_GetTick>
 8000988:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800098a:	682b      	ldr	r3, [r5, #0]
 800098c:	0398      	lsls	r0, r3, #14
 800098e:	d5b2      	bpl.n	80008f6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000990:	f7ff fdfc 	bl	800058c <HAL_GetTick>
 8000994:	1b80      	subs	r0, r0, r6
 8000996:	2864      	cmp	r0, #100	; 0x64
 8000998:	d9f7      	bls.n	800098a <HAL_RCC_OscConfig+0xaa>
 800099a:	e7e8      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800099c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	d103      	bne.n	80009ac <HAL_RCC_OscConfig+0xcc>
 80009a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a8:	602b      	str	r3, [r5, #0]
 80009aa:	e7d0      	b.n	800094e <HAL_RCC_OscConfig+0x6e>
 80009ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009b0:	602b      	str	r3, [r5, #0]
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009b8:	e7cc      	b.n	8000954 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009ba:	4b6b      	ldr	r3, [pc, #428]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	f012 0f0c 	tst.w	r2, #12
 80009c2:	d007      	beq.n	80009d4 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	f002 020c 	and.w	r2, r2, #12
 80009ca:	2a08      	cmp	r2, #8
 80009cc:	d111      	bne.n	80009f2 <HAL_RCC_OscConfig+0x112>
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	0259      	lsls	r1, r3, #9
 80009d2:	d40e      	bmi.n	80009f2 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d4:	4b64      	ldr	r3, [pc, #400]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	0792      	lsls	r2, r2, #30
 80009da:	d502      	bpl.n	80009e2 <HAL_RCC_OscConfig+0x102>
 80009dc:	68e2      	ldr	r2, [r4, #12]
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d182      	bne.n	80008e8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	6921      	ldr	r1, [r4, #16]
 80009e6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009ea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f0:	e784      	b.n	80008fc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009f2:	68e3      	ldr	r3, [r4, #12]
 80009f4:	4d5c      	ldr	r5, [pc, #368]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
 80009f6:	b1bb      	cbz	r3, 8000a28 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a00:	f7ff fdc4 	bl	800058c <HAL_GetTick>
 8000a04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a06:	682b      	ldr	r3, [r5, #0]
 8000a08:	079f      	lsls	r7, r3, #30
 8000a0a:	d507      	bpl.n	8000a1c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a0c:	682b      	ldr	r3, [r5, #0]
 8000a0e:	6922      	ldr	r2, [r4, #16]
 8000a10:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a18:	602b      	str	r3, [r5, #0]
 8000a1a:	e76f      	b.n	80008fc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a1c:	f7ff fdb6 	bl	800058c <HAL_GetTick>
 8000a20:	1b80      	subs	r0, r0, r6
 8000a22:	2802      	cmp	r0, #2
 8000a24:	d9ef      	bls.n	8000a06 <HAL_RCC_OscConfig+0x126>
 8000a26:	e7a2      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a28:	682b      	ldr	r3, [r5, #0]
 8000a2a:	f023 0301 	bic.w	r3, r3, #1
 8000a2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a30:	f7ff fdac 	bl	800058c <HAL_GetTick>
 8000a34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a36:	682b      	ldr	r3, [r5, #0]
 8000a38:	0798      	lsls	r0, r3, #30
 8000a3a:	f57f af5f 	bpl.w	80008fc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a3e:	f7ff fda5 	bl	800058c <HAL_GetTick>
 8000a42:	1b80      	subs	r0, r0, r6
 8000a44:	2802      	cmp	r0, #2
 8000a46:	d9f6      	bls.n	8000a36 <HAL_RCC_OscConfig+0x156>
 8000a48:	e791      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a4a:	6963      	ldr	r3, [r4, #20]
 8000a4c:	4d46      	ldr	r5, [pc, #280]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
 8000a4e:	b183      	cbz	r3, 8000a72 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000a50:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000a58:	f7ff fd98 	bl	800058c <HAL_GetTick>
 8000a5c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a60:	079b      	lsls	r3, r3, #30
 8000a62:	f53f af4f 	bmi.w	8000904 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a66:	f7ff fd91 	bl	800058c <HAL_GetTick>
 8000a6a:	1b80      	subs	r0, r0, r6
 8000a6c:	2802      	cmp	r0, #2
 8000a6e:	d9f6      	bls.n	8000a5e <HAL_RCC_OscConfig+0x17e>
 8000a70:	e77d      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a72:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a74:	f023 0301 	bic.w	r3, r3, #1
 8000a78:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000a7a:	f7ff fd87 	bl	800058c <HAL_GetTick>
 8000a7e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a80:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a82:	079f      	lsls	r7, r3, #30
 8000a84:	f57f af3e 	bpl.w	8000904 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a88:	f7ff fd80 	bl	800058c <HAL_GetTick>
 8000a8c:	1b80      	subs	r0, r0, r6
 8000a8e:	2802      	cmp	r0, #2
 8000a90:	d9f6      	bls.n	8000a80 <HAL_RCC_OscConfig+0x1a0>
 8000a92:	e76c      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a94:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
 8000a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a98:	00d0      	lsls	r0, r2, #3
 8000a9a:	d427      	bmi.n	8000aec <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000a9e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000aa4:	641a      	str	r2, [r3, #64]	; 0x40
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ab0:	4d2e      	ldr	r5, [pc, #184]	; (8000b6c <HAL_RCC_OscConfig+0x28c>)
 8000ab2:	682b      	ldr	r3, [r5, #0]
 8000ab4:	05d9      	lsls	r1, r3, #23
 8000ab6:	d51b      	bpl.n	8000af0 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab8:	68a3      	ldr	r3, [r4, #8]
 8000aba:	4d2b      	ldr	r5, [pc, #172]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d127      	bne.n	8000b10 <HAL_RCC_OscConfig+0x230>
 8000ac0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac8:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000acc:	f7ff fd5e 	bl	800058c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad0:	4f25      	ldr	r7, [pc, #148]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000ad2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ad6:	079b      	lsls	r3, r3, #30
 8000ad8:	d53f      	bpl.n	8000b5a <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	f43f af16 	beq.w	800090c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ae0:	4a21      	ldr	r2, [pc, #132]	; (8000b68 <HAL_RCC_OscConfig+0x288>)
 8000ae2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	e70f      	b.n	800090c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8000aec:	2600      	movs	r6, #0
 8000aee:	e7df      	b.n	8000ab0 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000af0:	682b      	ldr	r3, [r5, #0]
 8000af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000af8:	f7ff fd48 	bl	800058c <HAL_GetTick>
 8000afc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000afe:	682b      	ldr	r3, [r5, #0]
 8000b00:	05da      	lsls	r2, r3, #23
 8000b02:	d4d9      	bmi.n	8000ab8 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000b04:	f7ff fd42 	bl	800058c <HAL_GetTick>
 8000b08:	1bc0      	subs	r0, r0, r7
 8000b0a:	2864      	cmp	r0, #100	; 0x64
 8000b0c:	d9f7      	bls.n	8000afe <HAL_RCC_OscConfig+0x21e>
 8000b0e:	e72e      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b10:	b9ab      	cbnz	r3, 8000b3e <HAL_RCC_OscConfig+0x25e>
 8000b12:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b14:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b18:	f023 0301 	bic.w	r3, r3, #1
 8000b1c:	672b      	str	r3, [r5, #112]	; 0x70
 8000b1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b20:	f023 0304 	bic.w	r3, r3, #4
 8000b24:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b26:	f7ff fd31 	bl	800058c <HAL_GetTick>
 8000b2a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b2e:	0798      	lsls	r0, r3, #30
 8000b30:	d5d3      	bpl.n	8000ada <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f7ff fd2b 	bl	800058c <HAL_GetTick>
 8000b36:	1bc0      	subs	r0, r0, r7
 8000b38:	4540      	cmp	r0, r8
 8000b3a:	d9f7      	bls.n	8000b2c <HAL_RCC_OscConfig+0x24c>
 8000b3c:	e717      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b3e:	2b05      	cmp	r3, #5
 8000b40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b42:	d103      	bne.n	8000b4c <HAL_RCC_OscConfig+0x26c>
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	672b      	str	r3, [r5, #112]	; 0x70
 8000b4a:	e7b9      	b.n	8000ac0 <HAL_RCC_OscConfig+0x1e0>
 8000b4c:	f023 0301 	bic.w	r3, r3, #1
 8000b50:	672b      	str	r3, [r5, #112]	; 0x70
 8000b52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b54:	f023 0304 	bic.w	r3, r3, #4
 8000b58:	e7b5      	b.n	8000ac6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b5a:	f7ff fd17 	bl	800058c <HAL_GetTick>
 8000b5e:	eba0 0008 	sub.w	r0, r0, r8
 8000b62:	42a8      	cmp	r0, r5
 8000b64:	d9b6      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x1f4>
 8000b66:	e702      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b70:	4d24      	ldr	r5, [pc, #144]	; (8000c04 <HAL_RCC_OscConfig+0x324>)
 8000b72:	68ab      	ldr	r3, [r5, #8]
 8000b74:	f003 030c 	and.w	r3, r3, #12
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	f43f aeb5 	beq.w	80008e8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8000b7e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b80:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b86:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b88:	d12f      	bne.n	8000bea <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8000b8a:	f7ff fcff 	bl	800058c <HAL_GetTick>
 8000b8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	0199      	lsls	r1, r3, #6
 8000b94:	d423      	bmi.n	8000bde <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b96:	6a22      	ldr	r2, [r4, #32]
 8000b98:	69e3      	ldr	r3, [r4, #28]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b9e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ba2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ba4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ba8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000baa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000bae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bb0:	4c14      	ldr	r4, [pc, #80]	; (8000c04 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bb2:	0852      	lsrs	r2, r2, #1
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bbc:	682b      	ldr	r3, [r5, #0]
 8000bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fce2 	bl	800058c <HAL_GetTick>
 8000bc8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	019a      	lsls	r2, r3, #6
 8000bce:	f53f aea1 	bmi.w	8000914 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd2:	f7ff fcdb 	bl	800058c <HAL_GetTick>
 8000bd6:	1b40      	subs	r0, r0, r5
 8000bd8:	2802      	cmp	r0, #2
 8000bda:	d9f6      	bls.n	8000bca <HAL_RCC_OscConfig+0x2ea>
 8000bdc:	e6c7      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bde:	f7ff fcd5 	bl	800058c <HAL_GetTick>
 8000be2:	1b80      	subs	r0, r0, r6
 8000be4:	2802      	cmp	r0, #2
 8000be6:	d9d3      	bls.n	8000b90 <HAL_RCC_OscConfig+0x2b0>
 8000be8:	e6c1      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8000bea:	f7ff fccf 	bl	800058c <HAL_GetTick>
 8000bee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bf0:	682b      	ldr	r3, [r5, #0]
 8000bf2:	019b      	lsls	r3, r3, #6
 8000bf4:	f57f ae8e 	bpl.w	8000914 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bf8:	f7ff fcc8 	bl	800058c <HAL_GetTick>
 8000bfc:	1b00      	subs	r0, r0, r4
 8000bfe:	2802      	cmp	r0, #2
 8000c00:	d9f6      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x310>
 8000c02:	e6b4      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c08:	4913      	ldr	r1, [pc, #76]	; (8000c58 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c0a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c0c:	688b      	ldr	r3, [r1, #8]
 8000c0e:	f003 030c 	and.w	r3, r3, #12
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d003      	beq.n	8000c1e <HAL_RCC_GetSysClockFreq+0x16>
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d003      	beq.n	8000c22 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c1a:	4810      	ldr	r0, [pc, #64]	; (8000c5c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c1c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c1e:	4810      	ldr	r0, [pc, #64]	; (8000c60 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c20:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c22:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000c24:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c26:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000c2c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c30:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c34:	bf1a      	itte	ne
 8000c36:	480a      	ldrne	r0, [pc, #40]	; (8000c60 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c38:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c3a:	4808      	ldreq	r0, [pc, #32]	; (8000c5c <HAL_RCC_GetSysClockFreq+0x54>)
 8000c3c:	fba1 0100 	umull	r0, r1, r1, r0
 8000c40:	f7ff fafe 	bl	8000240 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c54:	bd08      	pop	{r3, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	00f42400 	.word	0x00f42400
 8000c60:	007a1200 	.word	0x007a1200

08000c64 <HAL_RCC_ClockConfig>:
{
 8000c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c68:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	b910      	cbnz	r0, 8000c74 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
 8000c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c74:	4a46      	ldr	r2, [pc, #280]	; (8000d90 <HAL_RCC_ClockConfig+0x12c>)
 8000c76:	6813      	ldr	r3, [r2, #0]
 8000c78:	f003 030f 	and.w	r3, r3, #15
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d328      	bcc.n	8000cd2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c80:	6821      	ldr	r1, [r4, #0]
 8000c82:	078f      	lsls	r7, r1, #30
 8000c84:	d430      	bmi.n	8000ce8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c86:	07c8      	lsls	r0, r1, #31
 8000c88:	d443      	bmi.n	8000d12 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c8a:	4a41      	ldr	r2, [pc, #260]	; (8000d90 <HAL_RCC_ClockConfig+0x12c>)
 8000c8c:	6813      	ldr	r3, [r2, #0]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	429d      	cmp	r5, r3
 8000c94:	d367      	bcc.n	8000d66 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c96:	6822      	ldr	r2, [r4, #0]
 8000c98:	0751      	lsls	r1, r2, #29
 8000c9a:	d470      	bmi.n	8000d7e <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c9c:	0713      	lsls	r3, r2, #28
 8000c9e:	d507      	bpl.n	8000cb0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ca0:	4a3c      	ldr	r2, [pc, #240]	; (8000d94 <HAL_RCC_ClockConfig+0x130>)
 8000ca2:	6921      	ldr	r1, [r4, #16]
 8000ca4:	6893      	ldr	r3, [r2, #8]
 8000ca6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000caa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cb0:	f7ff ffaa 	bl	8000c08 <HAL_RCC_GetSysClockFreq>
 8000cb4:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <HAL_RCC_ClockConfig+0x130>)
 8000cb6:	4a38      	ldr	r2, [pc, #224]	; (8000d98 <HAL_RCC_ClockConfig+0x134>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cbe:	5cd3      	ldrb	r3, [r2, r3]
 8000cc0:	40d8      	lsrs	r0, r3
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <HAL_RCC_ClockConfig+0x138>)
 8000cc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f001 fec6 	bl	8002a58 <HAL_InitTick>
  return HAL_OK;
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cd2:	6813      	ldr	r3, [r2, #0]
 8000cd4:	f023 030f 	bic.w	r3, r3, #15
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cdc:	6813      	ldr	r3, [r2, #0]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d1c3      	bne.n	8000c6e <HAL_RCC_ClockConfig+0xa>
 8000ce6:	e7cb      	b.n	8000c80 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce8:	f011 0f04 	tst.w	r1, #4
 8000cec:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <HAL_RCC_ClockConfig+0x130>)
 8000cee:	d003      	beq.n	8000cf8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000cf6:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf8:	070e      	lsls	r6, r1, #28
 8000cfa:	d503      	bpl.n	8000d04 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000d02:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	68a0      	ldr	r0, [r4, #8]
 8000d08:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d0c:	4302      	orrs	r2, r0
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	e7b9      	b.n	8000c86 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d12:	6861      	ldr	r1, [r4, #4]
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_RCC_ClockConfig+0x130>)
 8000d16:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d18:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d1a:	d11c      	bne.n	8000d56 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d20:	d0a5      	beq.n	8000c6e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d22:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d24:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d28:	4e1a      	ldr	r6, [pc, #104]	; (8000d94 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d2a:	f022 0203 	bic.w	r2, r2, #3
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000d32:	f7ff fc2b 	bl	800058c <HAL_GetTick>
 8000d36:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d38:	68b3      	ldr	r3, [r6, #8]
 8000d3a:	6862      	ldr	r2, [r4, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d44:	d0a1      	beq.n	8000c8a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d46:	f7ff fc21 	bl	800058c <HAL_GetTick>
 8000d4a:	1bc0      	subs	r0, r0, r7
 8000d4c:	4540      	cmp	r0, r8
 8000d4e:	d9f3      	bls.n	8000d38 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000d50:	2003      	movs	r0, #3
}
 8000d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d56:	2902      	cmp	r1, #2
 8000d58:	d102      	bne.n	8000d60 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d5a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000d5e:	e7df      	b.n	8000d20 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	f012 0f02 	tst.w	r2, #2
 8000d64:	e7dc      	b.n	8000d20 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d66:	6813      	ldr	r3, [r2, #0]
 8000d68:	f023 030f 	bic.w	r3, r3, #15
 8000d6c:	432b      	orrs	r3, r5
 8000d6e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d70:	6813      	ldr	r3, [r2, #0]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	429d      	cmp	r5, r3
 8000d78:	f47f af79 	bne.w	8000c6e <HAL_RCC_ClockConfig+0xa>
 8000d7c:	e78b      	b.n	8000c96 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d7e:	4905      	ldr	r1, [pc, #20]	; (8000d94 <HAL_RCC_ClockConfig+0x130>)
 8000d80:	68e0      	ldr	r0, [r4, #12]
 8000d82:	688b      	ldr	r3, [r1, #8]
 8000d84:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d88:	4303      	orrs	r3, r0
 8000d8a:	608b      	str	r3, [r1, #8]
 8000d8c:	e786      	b.n	8000c9c <HAL_RCC_ClockConfig+0x38>
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00
 8000d94:	40023800 	.word	0x40023800
 8000d98:	08002fa4 	.word	0x08002fa4
 8000d9c:	20000008 	.word	0x20000008

08000da0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000da0:	4b01      	ldr	r3, [pc, #4]	; (8000da8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008

08000dac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000db6:	5cd3      	ldrb	r3, [r2, r3]
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dba:	6810      	ldr	r0, [r2, #0]
}
 8000dbc:	40d8      	lsrs	r0, r3
 8000dbe:	4770      	bx	lr
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	08002fb4 	.word	0x08002fb4
 8000dc8:	20000008 	.word	0x20000008

08000dcc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dd6:	5cd3      	ldrb	r3, [r2, r3]
 8000dd8:	4a03      	ldr	r2, [pc, #12]	; (8000de8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dda:	6810      	ldr	r0, [r2, #0]
}
 8000ddc:	40d8      	lsrs	r0, r3
 8000dde:	4770      	bx	lr
 8000de0:	40023800 	.word	0x40023800
 8000de4:	08002fb4 	.word	0x08002fb4
 8000de8:	20000008 	.word	0x20000008

08000dec <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000dec:	230f      	movs	r3, #15
 8000dee:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_RCC_GetClockConfig+0x34>)
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	f002 0203 	and.w	r2, r2, #3
 8000df8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000e00:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000e08:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000e12:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_RCC_GetClockConfig+0x38>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	600b      	str	r3, [r1, #0]
 8000e1e:	4770      	bx	lr
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40023c00 	.word	0x40023c00

08000e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000e28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000e2c:	6802      	ldr	r2, [r0, #0]
{
 8000e2e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000e30:	f012 0601 	ands.w	r6, r2, #1
 8000e34:	d00b      	beq.n	8000e4e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000e36:	4bba      	ldr	r3, [pc, #744]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000e38:	6899      	ldr	r1, [r3, #8]
 8000e3a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8000e3e:	6099      	str	r1, [r3, #8]
 8000e40:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000e42:	6899      	ldr	r1, [r3, #8]
 8000e44:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8000e46:	fab6 f686 	clz	r6, r6
 8000e4a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000e4c:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000e4e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8000e52:	d012      	beq.n	8000e7a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e54:	49b2      	ldr	r1, [pc, #712]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000e56:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000e58:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000e5c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e60:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8000e64:	bf08      	it	eq
 8000e66:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e68:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000e6c:	bf16      	itet	ne
 8000e6e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8000e72:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000e74:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000e7a:	02d7      	lsls	r7, r2, #11
 8000e7c:	d510      	bpl.n	8000ea0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000e7e:	48a8      	ldr	r0, [pc, #672]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000e80:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e82:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000e86:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000e8a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000e8e:	ea43 0301 	orr.w	r3, r3, r1
 8000e92:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000e96:	f000 81a9 	beq.w	80011ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8000e9a:	2900      	cmp	r1, #0
 8000e9c:	bf08      	it	eq
 8000e9e:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8000ea0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8000ea4:	bf18      	it	ne
 8000ea6:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000ea8:	0690      	lsls	r0, r2, #26
 8000eaa:	d531      	bpl.n	8000f10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	4b9c      	ldr	r3, [pc, #624]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000eae:	4f9d      	ldr	r7, [pc, #628]	; (8001124 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec8:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000eca:	f7ff fb5f 	bl	800058c <HAL_GetTick>
 8000ece:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	05d9      	lsls	r1, r3, #23
 8000ed4:	f140 818c 	bpl.w	80011f0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ed8:	4f91      	ldr	r7, [pc, #580]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000edc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000ee0:	f040 8191 	bne.w	8001206 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ee4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ee6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000eea:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000eee:	4a8c      	ldr	r2, [pc, #560]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000ef0:	f040 81af 	bne.w	8001252 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8000ef4:	6891      	ldr	r1, [r2, #8]
 8000ef6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000efa:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000efe:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000f02:	4301      	orrs	r1, r0
 8000f04:	6091      	str	r1, [r2, #8]
 8000f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f0a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	06df      	lsls	r7, r3, #27
 8000f14:	d50c      	bpl.n	8000f30 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000f16:	4a82      	ldr	r2, [pc, #520]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f18:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000f1c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8000f20:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8000f24:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000f28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000f2a:	4301      	orrs	r1, r0
 8000f2c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f30:	0458      	lsls	r0, r3, #17
 8000f32:	d508      	bpl.n	8000f46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f34:	497a      	ldr	r1, [pc, #488]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f36:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000f38:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f3c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f40:	4302      	orrs	r2, r0
 8000f42:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000f46:	0419      	lsls	r1, r3, #16
 8000f48:	d508      	bpl.n	8000f5c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000f4a:	4975      	ldr	r1, [pc, #468]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f4c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000f4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f52:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000f56:	4302      	orrs	r2, r0
 8000f58:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000f5c:	03da      	lsls	r2, r3, #15
 8000f5e:	d508      	bpl.n	8000f72 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000f60:	496f      	ldr	r1, [pc, #444]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f62:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000f64:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f68:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000f6c:	4302      	orrs	r2, r0
 8000f6e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8000f72:	039f      	lsls	r7, r3, #14
 8000f74:	d508      	bpl.n	8000f88 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8000f76:	496a      	ldr	r1, [pc, #424]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f78:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8000f7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f7e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000f82:	4302      	orrs	r2, r0
 8000f84:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f88:	0658      	lsls	r0, r3, #25
 8000f8a:	d508      	bpl.n	8000f9e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f8c:	4964      	ldr	r1, [pc, #400]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f8e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000f90:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f94:	f022 0203 	bic.w	r2, r2, #3
 8000f98:	4302      	orrs	r2, r0
 8000f9a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000f9e:	0619      	lsls	r1, r3, #24
 8000fa0:	d508      	bpl.n	8000fb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000fa2:	495f      	ldr	r1, [pc, #380]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fa4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000fa6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000faa:	f022 020c 	bic.w	r2, r2, #12
 8000fae:	4302      	orrs	r2, r0
 8000fb0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000fb4:	05da      	lsls	r2, r3, #23
 8000fb6:	d508      	bpl.n	8000fca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000fb8:	4959      	ldr	r1, [pc, #356]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000fbc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fc0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000fc4:	4302      	orrs	r2, r0
 8000fc6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000fca:	059f      	lsls	r7, r3, #22
 8000fcc:	d508      	bpl.n	8000fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000fce:	4954      	ldr	r1, [pc, #336]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fd0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000fd2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fd6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000fda:	4302      	orrs	r2, r0
 8000fdc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000fe0:	0558      	lsls	r0, r3, #21
 8000fe2:	d508      	bpl.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000fe4:	494e      	ldr	r1, [pc, #312]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000fe8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ff0:	4302      	orrs	r2, r0
 8000ff2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8000ff6:	0519      	lsls	r1, r3, #20
 8000ff8:	d508      	bpl.n	800100c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8000ffa:	4949      	ldr	r1, [pc, #292]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ffe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001002:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001006:	4302      	orrs	r2, r0
 8001008:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800100c:	04da      	lsls	r2, r3, #19
 800100e:	d508      	bpl.n	8001022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001010:	4943      	ldr	r1, [pc, #268]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001012:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001014:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001018:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800101c:	4302      	orrs	r2, r0
 800101e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001022:	049f      	lsls	r7, r3, #18
 8001024:	d508      	bpl.n	8001038 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001026:	493e      	ldr	r1, [pc, #248]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001028:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800102a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800102e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001032:	4302      	orrs	r2, r0
 8001034:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001038:	0258      	lsls	r0, r3, #9
 800103a:	d508      	bpl.n	800104e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800103c:	4938      	ldr	r1, [pc, #224]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800103e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001040:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001044:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001048:	4302      	orrs	r2, r0
 800104a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800104e:	0299      	lsls	r1, r3, #10
 8001050:	d50c      	bpl.n	800106c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001052:	4833      	ldr	r0, [pc, #204]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001054:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001056:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 800105a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800105e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8001062:	bf08      	it	eq
 8001064:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001066:	430a      	orrs	r2, r1
 8001068:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 800106c:	f013 0f08 	tst.w	r3, #8
 8001070:	bf18      	it	ne
 8001072:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001074:	035a      	lsls	r2, r3, #13
 8001076:	d508      	bpl.n	800108a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001078:	4929      	ldr	r1, [pc, #164]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800107a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800107c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001080:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001084:	4302      	orrs	r2, r0
 8001086:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800108a:	021f      	lsls	r7, r3, #8
 800108c:	d509      	bpl.n	80010a2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800108e:	4924      	ldr	r1, [pc, #144]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001090:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001094:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001098:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800109c:	4302      	orrs	r2, r0
 800109e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80010a2:	0158      	lsls	r0, r3, #5
 80010a4:	d509      	bpl.n	80010ba <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80010a6:	491e      	ldr	r1, [pc, #120]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010a8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80010ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010b0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80010b4:	4302      	orrs	r2, r0
 80010b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80010ba:	0119      	lsls	r1, r3, #4
 80010bc:	d509      	bpl.n	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80010be:	4918      	ldr	r1, [pc, #96]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80010c4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80010c8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80010cc:	4302      	orrs	r2, r0
 80010ce:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80010d2:	00da      	lsls	r2, r3, #3
 80010d4:	d509      	bpl.n	80010ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80010d6:	4912      	ldr	r1, [pc, #72]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010d8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80010dc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80010e0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80010e4:	4302      	orrs	r2, r0
 80010e6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80010ea:	2e01      	cmp	r6, #1
 80010ec:	f000 80b5 	beq.w	800125a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80010f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010f4:	f000 80b1 	beq.w	800125a <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80010f8:	2d01      	cmp	r5, #1
 80010fa:	d175      	bne.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80010fc:	4d08      	ldr	r5, [pc, #32]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001104:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001106:	f7ff fa41 	bl	800058c <HAL_GetTick>
 800110a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	009f      	lsls	r7, r3, #2
 8001110:	f100 8127 	bmi.w	8001362 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001114:	6821      	ldr	r1, [r4, #0]
 8001116:	030e      	lsls	r6, r1, #12
 8001118:	d506      	bpl.n	8001128 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800111a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800111c:	b143      	cbz	r3, 8001130 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800111e:	e003      	b.n	8001128 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000
 8001128:	02cd      	lsls	r5, r1, #11
 800112a:	d51d      	bpl.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800112c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800112e:	b9db      	cbnz	r3, 8001168 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001130:	4a93      	ldr	r2, [pc, #588]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001132:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001136:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800113a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001142:	4303      	orrs	r3, r0
 8001144:	6960      	ldr	r0, [r4, #20]
 8001146:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800114a:	69a0      	ldr	r0, [r4, #24]
 800114c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001154:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001158:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800115a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800115e:	3801      	subs	r0, #1
 8001160:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001164:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001168:	0288      	lsls	r0, r1, #10
 800116a:	d515      	bpl.n	8001198 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800116c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800116e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001172:	d111      	bne.n	8001198 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001174:	4a82      	ldr	r2, [pc, #520]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001176:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800117a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800117e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001182:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001186:	4303      	orrs	r3, r0
 8001188:	6960      	ldr	r0, [r4, #20]
 800118a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800118e:	6a20      	ldr	r0, [r4, #32]
 8001190:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001198:	070a      	lsls	r2, r1, #28
 800119a:	d519      	bpl.n	80011d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800119c:	4978      	ldr	r1, [pc, #480]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800119e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80011a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80011a6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80011aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ae:	4313      	orrs	r3, r2
 80011b0:	6962      	ldr	r2, [r4, #20]
 80011b2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80011b6:	69e2      	ldr	r2, [r4, #28]
 80011b8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80011bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80011c0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80011c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80011ca:	4313      	orrs	r3, r2
 80011cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80011d0:	4c6b      	ldr	r4, [pc, #428]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011da:	f7ff f9d7 	bl	800058c <HAL_GetTick>
 80011de:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	f140 80c4 	bpl.w	8001370 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80011e8:	2000      	movs	r0, #0
 80011ea:	e009      	b.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1; 
 80011ec:	2601      	movs	r6, #1
 80011ee:	e657      	b.n	8000ea0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f0:	f7ff f9cc 	bl	800058c <HAL_GetTick>
 80011f4:	eba0 0008 	sub.w	r0, r0, r8
 80011f8:	2864      	cmp	r0, #100	; 0x64
 80011fa:	f67f ae69 	bls.w	8000ed0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80011fe:	2003      	movs	r0, #3
}
 8001200:	b003      	add	sp, #12
 8001202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001206:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001208:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800120c:	4293      	cmp	r3, r2
 800120e:	f43f ae69 	beq.w	8000ee4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001214:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800121a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800121e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001220:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001222:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001226:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001228:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800122a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800122c:	07da      	lsls	r2, r3, #31
 800122e:	f57f ae59 	bpl.w	8000ee4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001232:	f7ff f9ab 	bl	800058c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001236:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800123a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800123e:	079b      	lsls	r3, r3, #30
 8001240:	f53f ae50 	bmi.w	8000ee4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff f9a2 	bl	800058c <HAL_GetTick>
 8001248:	eba0 0008 	sub.w	r0, r0, r8
 800124c:	4548      	cmp	r0, r9
 800124e:	d9f5      	bls.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001250:	e7d5      	b.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001252:	6891      	ldr	r1, [r2, #8]
 8001254:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001258:	e654      	b.n	8000f04 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 800125a:	4e49      	ldr	r6, [pc, #292]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800125c:	6833      	ldr	r3, [r6, #0]
 800125e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001262:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001264:	f7ff f992 	bl	800058c <HAL_GetTick>
 8001268:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800126a:	6833      	ldr	r3, [r6, #0]
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	d472      	bmi.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001270:	6822      	ldr	r2, [r4, #0]
 8001272:	07d7      	lsls	r7, r2, #31
 8001274:	d512      	bpl.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001276:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001278:	b983      	cbnz	r3, 800129c <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800127a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800127e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001282:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001286:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800128a:	430b      	orrs	r3, r1
 800128c:	6861      	ldr	r1, [r4, #4]
 800128e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001292:	68a1      	ldr	r1, [r4, #8]
 8001294:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001298:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800129c:	0316      	lsls	r6, r2, #12
 800129e:	d503      	bpl.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80012a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80012a6:	d005      	beq.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80012a8:	02d0      	lsls	r0, r2, #11
 80012aa:	d51e      	bpl.n	80012ea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80012ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b2:	d11a      	bne.n	80012ea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80012b4:	4932      	ldr	r1, [pc, #200]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80012b6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80012ba:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80012be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80012c6:	4303      	orrs	r3, r0
 80012c8:	6860      	ldr	r0, [r4, #4]
 80012ca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80012ce:	68e0      	ldr	r0, [r4, #12]
 80012d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80012d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80012d8:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80012dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012de:	f020 001f 	bic.w	r0, r0, #31
 80012e2:	3b01      	subs	r3, #1
 80012e4:	4303      	orrs	r3, r0
 80012e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80012ea:	01d1      	lsls	r1, r2, #7
 80012ec:	d511      	bpl.n	8001312 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80012ee:	4924      	ldr	r1, [pc, #144]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80012f0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80012f4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80012f8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80012fc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001300:	4303      	orrs	r3, r0
 8001302:	6860      	ldr	r0, [r4, #4]
 8001304:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001308:	6920      	ldr	r0, [r4, #16]
 800130a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800130e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001312:	0192      	lsls	r2, r2, #6
 8001314:	d50d      	bpl.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001316:	6923      	ldr	r3, [r4, #16]
 8001318:	6862      	ldr	r2, [r4, #4]
 800131a:	041b      	lsls	r3, r3, #16
 800131c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001320:	68e2      	ldr	r2, [r4, #12]
 8001322:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001326:	68a2      	ldr	r2, [r4, #8]
 8001328:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800132e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001332:	4e13      	ldr	r6, [pc, #76]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001334:	6833      	ldr	r3, [r6, #0]
 8001336:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800133a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800133c:	f7ff f926 	bl	800058c <HAL_GetTick>
 8001340:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001342:	6833      	ldr	r3, [r6, #0]
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	f53f aed7 	bmi.w	80010f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800134a:	f7ff f91f 	bl	800058c <HAL_GetTick>
 800134e:	1bc0      	subs	r0, r0, r7
 8001350:	2864      	cmp	r0, #100	; 0x64
 8001352:	d9f6      	bls.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001354:	e753      	b.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001356:	f7ff f919 	bl	800058c <HAL_GetTick>
 800135a:	1bc0      	subs	r0, r0, r7
 800135c:	2864      	cmp	r0, #100	; 0x64
 800135e:	d984      	bls.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001360:	e74d      	b.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001362:	f7ff f913 	bl	800058c <HAL_GetTick>
 8001366:	1b80      	subs	r0, r0, r6
 8001368:	2864      	cmp	r0, #100	; 0x64
 800136a:	f67f aecf 	bls.w	800110c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800136e:	e746      	b.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001370:	f7ff f90c 	bl	800058c <HAL_GetTick>
 8001374:	1b40      	subs	r0, r0, r5
 8001376:	2864      	cmp	r0, #100	; 0x64
 8001378:	f67f af32 	bls.w	80011e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 800137c:	e73f      	b.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_TIM_Base_MspInit>:
 8001384:	4770      	bx	lr

08001386 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001386:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 8001388:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	f042 0201 	orr.w	r2, r2, #1
 8001390:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]
}
 800139a:	4770      	bx	lr

0800139c <HAL_TIM_OC_DelayElapsedCallback>:
 800139c:	4770      	bx	lr

0800139e <HAL_TIM_IC_CaptureCallback>:
 800139e:	4770      	bx	lr

080013a0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80013a0:	4770      	bx	lr

080013a2 <HAL_TIM_TriggerCallback>:
 80013a2:	4770      	bx	lr

080013a4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013a4:	6803      	ldr	r3, [r0, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	0791      	lsls	r1, r2, #30
{
 80013aa:	b510      	push	{r4, lr}
 80013ac:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013ae:	d50f      	bpl.n	80013d0 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	0792      	lsls	r2, r2, #30
 80013b4:	d50c      	bpl.n	80013d0 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013b6:	f06f 0202 	mvn.w	r2, #2
 80013ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013bc:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80013be:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013c0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80013c2:	0799      	lsls	r1, r3, #30
 80013c4:	f000 8085 	beq.w	80014d2 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013c8:	f7ff ffe9 	bl	800139e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013cc:	2300      	movs	r3, #0
 80013ce:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	0752      	lsls	r2, r2, #29
 80013d6:	d510      	bpl.n	80013fa <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	0750      	lsls	r0, r2, #29
 80013dc:	d50d      	bpl.n	80013fa <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80013de:	f06f 0204 	mvn.w	r2, #4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80013e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013e6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80013e8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013ea:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80013ec:	f413 7f40 	tst.w	r3, #768	; 0x300
 80013f0:	d075      	beq.n	80014de <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80013f2:	f7ff ffd4 	bl	800139e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013f6:	2300      	movs	r3, #0
 80013f8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	691a      	ldr	r2, [r3, #16]
 80013fe:	0711      	lsls	r1, r2, #28
 8001400:	d50f      	bpl.n	8001422 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	0712      	lsls	r2, r2, #28
 8001406:	d50c      	bpl.n	8001422 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001408:	f06f 0208 	mvn.w	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800140c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800140e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001410:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001412:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001414:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001416:	079b      	lsls	r3, r3, #30
 8001418:	d067      	beq.n	80014ea <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800141a:	f7ff ffc0 	bl	800139e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800141e:	2300      	movs	r3, #0
 8001420:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	06d0      	lsls	r0, r2, #27
 8001428:	d510      	bpl.n	800144c <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	06d1      	lsls	r1, r2, #27
 800142e:	d50d      	bpl.n	800144c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001430:	f06f 0210 	mvn.w	r2, #16
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001434:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001438:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800143a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800143c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800143e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001442:	d058      	beq.n	80014f6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001444:	f7ff ffab 	bl	800139e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001448:	2300      	movs	r3, #0
 800144a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	07d2      	lsls	r2, r2, #31
 8001452:	d508      	bpl.n	8001466 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	07d0      	lsls	r0, r2, #31
 8001458:	d505      	bpl.n	8001466 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800145a:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800145e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001460:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001462:	f001 fabd 	bl	80029e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	0611      	lsls	r1, r2, #24
 800146c:	d508      	bpl.n	8001480 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	0612      	lsls	r2, r2, #24
 8001472:	d505      	bpl.n	8001480 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001474:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001478:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800147a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800147c:	f000 f8c5 	bl	800160a <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	05d0      	lsls	r0, r2, #23
 8001486:	d508      	bpl.n	800149a <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	0611      	lsls	r1, r2, #24
 800148c:	d505      	bpl.n	800149a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800148e:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001492:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001494:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001496:	f000 f8b8 	bl	800160a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	691a      	ldr	r2, [r3, #16]
 800149e:	0652      	lsls	r2, r2, #25
 80014a0:	d508      	bpl.n	80014b4 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	0650      	lsls	r0, r2, #25
 80014a6:	d505      	bpl.n	80014b4 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80014ac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014ae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80014b0:	f7ff ff77 	bl	80013a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	0691      	lsls	r1, r2, #26
 80014ba:	d522      	bpl.n	8001502 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	0692      	lsls	r2, r2, #26
 80014c0:	d51f      	bpl.n	8001502 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014c2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 80014c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014c8:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80014ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80014ce:	f000 b89b 	b.w	8001608 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014d2:	f7ff ff63 	bl	800139c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff ff62 	bl	80013a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80014dc:	e776      	b.n	80013cc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014de:	f7ff ff5d 	bl	800139c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff ff5c 	bl	80013a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80014e8:	e785      	b.n	80013f6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ea:	f7ff ff57 	bl	800139c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff ff56 	bl	80013a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80014f4:	e793      	b.n	800141e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014f6:	f7ff ff51 	bl	800139c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fa:	4620      	mov	r0, r4
 80014fc:	f7ff ff50 	bl	80013a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001500:	e7a2      	b.n	8001448 <HAL_TIM_IRQHandler+0xa4>
 8001502:	bd10      	pop	{r4, pc}

08001504 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001504:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001506:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001508:	4290      	cmp	r0, r2
 800150a:	d012      	beq.n	8001532 <TIM_Base_SetConfig+0x2e>
 800150c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001510:	d00f      	beq.n	8001532 <TIM_Base_SetConfig+0x2e>
 8001512:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001516:	4290      	cmp	r0, r2
 8001518:	d00b      	beq.n	8001532 <TIM_Base_SetConfig+0x2e>
 800151a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800151e:	4290      	cmp	r0, r2
 8001520:	d007      	beq.n	8001532 <TIM_Base_SetConfig+0x2e>
 8001522:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001526:	4290      	cmp	r0, r2
 8001528:	d003      	beq.n	8001532 <TIM_Base_SetConfig+0x2e>
 800152a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800152e:	4290      	cmp	r0, r2
 8001530:	d11d      	bne.n	800156e <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001532:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001538:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800153a:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <TIM_Base_SetConfig+0xc4>)
 800153c:	4290      	cmp	r0, r2
 800153e:	d104      	bne.n	800154a <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001544:	68ca      	ldr	r2, [r1, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	e028      	b.n	800159c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800154a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800154e:	d0f7      	beq.n	8001540 <TIM_Base_SetConfig+0x3c>
 8001550:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <TIM_Base_SetConfig+0xc8>)
 8001552:	4290      	cmp	r0, r2
 8001554:	d0f4      	beq.n	8001540 <TIM_Base_SetConfig+0x3c>
 8001556:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800155a:	4290      	cmp	r0, r2
 800155c:	d0f0      	beq.n	8001540 <TIM_Base_SetConfig+0x3c>
 800155e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001562:	4290      	cmp	r0, r2
 8001564:	d0ec      	beq.n	8001540 <TIM_Base_SetConfig+0x3c>
 8001566:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800156a:	4290      	cmp	r0, r2
 800156c:	d0e8      	beq.n	8001540 <TIM_Base_SetConfig+0x3c>
 800156e:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <TIM_Base_SetConfig+0xcc>)
 8001570:	4290      	cmp	r0, r2
 8001572:	d0e5      	beq.n	8001540 <TIM_Base_SetConfig+0x3c>
 8001574:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001578:	4290      	cmp	r0, r2
 800157a:	d0e1      	beq.n	8001540 <TIM_Base_SetConfig+0x3c>
 800157c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001580:	4290      	cmp	r0, r2
 8001582:	d0dd      	beq.n	8001540 <TIM_Base_SetConfig+0x3c>
 8001584:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001588:	4290      	cmp	r0, r2
 800158a:	d0d9      	beq.n	8001540 <TIM_Base_SetConfig+0x3c>
 800158c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001590:	4290      	cmp	r0, r2
 8001592:	d0d5      	beq.n	8001540 <TIM_Base_SetConfig+0x3c>
 8001594:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001598:	4290      	cmp	r0, r2
 800159a:	d0d1      	beq.n	8001540 <TIM_Base_SetConfig+0x3c>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800159c:	694a      	ldr	r2, [r1, #20]
 800159e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015a2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80015a4:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015a6:	688b      	ldr	r3, [r1, #8]
 80015a8:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80015aa:	680b      	ldr	r3, [r1, #0]
 80015ac:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <TIM_Base_SetConfig+0xc4>)
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d006      	beq.n	80015c2 <TIM_Base_SetConfig+0xbe>
 80015b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015b8:	4298      	cmp	r0, r3
 80015ba:	d002      	beq.n	80015c2 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80015bc:	2301      	movs	r3, #1
 80015be:	6143      	str	r3, [r0, #20]
}
 80015c0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80015c2:	690b      	ldr	r3, [r1, #16]
 80015c4:	6303      	str	r3, [r0, #48]	; 0x30
 80015c6:	e7f9      	b.n	80015bc <TIM_Base_SetConfig+0xb8>
 80015c8:	40010000 	.word	0x40010000
 80015cc:	40000400 	.word	0x40000400
 80015d0:	40014000 	.word	0x40014000

080015d4 <HAL_TIM_Base_Init>:
{ 
 80015d4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80015d6:	4604      	mov	r4, r0
 80015d8:	b1a0      	cbz	r0, 8001604 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80015da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015e2:	b91b      	cbnz	r3, 80015ec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80015e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80015e8:	f7ff fecc 	bl	8001384 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80015ec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80015ee:	6820      	ldr	r0, [r4, #0]
 80015f0:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 80015f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80015f6:	f7ff ff85 	bl	8001504 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80015fa:	2301      	movs	r3, #1
  return HAL_OK;
 80015fc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80015fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001602:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001604:	2001      	movs	r0, #1
}
 8001606:	bd10      	pop	{r4, pc}

08001608 <HAL_TIMEx_CommutationCallback>:
 8001608:	4770      	bx	lr

0800160a <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800160a:	4770      	bx	lr

0800160c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800160c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001610:	9d06      	ldr	r5, [sp, #24]
 8001612:	4604      	mov	r4, r0
 8001614:	460f      	mov	r7, r1
 8001616:	4616      	mov	r6, r2
 8001618:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800161a:	6821      	ldr	r1, [r4, #0]
 800161c:	69ca      	ldr	r2, [r1, #28]
 800161e:	ea37 0302 	bics.w	r3, r7, r2
 8001622:	bf0c      	ite	eq
 8001624:	2201      	moveq	r2, #1
 8001626:	2200      	movne	r2, #0
 8001628:	42b2      	cmp	r2, r6
 800162a:	d002      	beq.n	8001632 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800162c:	2000      	movs	r0, #0
}
 800162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001632:	1c6b      	adds	r3, r5, #1
 8001634:	d0f2      	beq.n	800161c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001636:	b99d      	cbnz	r5, 8001660 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001638:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800163a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001642:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800164c:	2320      	movs	r3, #32
 800164e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001652:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001656:	2300      	movs	r3, #0
 8001658:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800165c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001660:	f7fe ff94 	bl	800058c <HAL_GetTick>
 8001664:	eba0 0008 	sub.w	r0, r0, r8
 8001668:	4285      	cmp	r5, r0
 800166a:	d8d6      	bhi.n	800161a <UART_WaitOnFlagUntilTimeout+0xe>
 800166c:	e7e4      	b.n	8001638 <UART_WaitOnFlagUntilTimeout+0x2c>

0800166e <HAL_UART_Transmit>:
{
 800166e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001672:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001674:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8001678:	4604      	mov	r4, r0
 800167a:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 800167c:	2b20      	cmp	r3, #32
{
 800167e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001680:	d14c      	bne.n	800171c <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001682:	2900      	cmp	r1, #0
 8001684:	d048      	beq.n	8001718 <HAL_UART_Transmit+0xaa>
 8001686:	2a00      	cmp	r2, #0
 8001688:	d046      	beq.n	8001718 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800168a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800168e:	2b01      	cmp	r3, #1
 8001690:	d044      	beq.n	800171c <HAL_UART_Transmit+0xae>
 8001692:	2301      	movs	r3, #1
 8001694:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001698:	2300      	movs	r3, #0
 800169a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800169c:	2321      	movs	r3, #33	; 0x21
 800169e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80016a2:	f7fe ff73 	bl	800058c <HAL_GetTick>
 80016a6:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80016a8:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80016ac:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80016b0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80016b4:	b292      	uxth	r2, r2
 80016b6:	b962      	cbnz	r2, 80016d2 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016b8:	9700      	str	r7, [sp, #0]
 80016ba:	4633      	mov	r3, r6
 80016bc:	2140      	movs	r1, #64	; 0x40
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff ffa4 	bl	800160c <UART_WaitOnFlagUntilTimeout>
 80016c4:	b998      	cbnz	r0, 80016ee <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80016c6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80016c8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 80016cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 80016d0:	e00e      	b.n	80016f0 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80016d2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016d6:	2200      	movs	r2, #0
 80016d8:	9700      	str	r7, [sp, #0]
 80016da:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 80016dc:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016de:	4620      	mov	r0, r4
      huart->TxXferCount--;
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016e6:	4633      	mov	r3, r6
 80016e8:	f7ff ff90 	bl	800160c <UART_WaitOnFlagUntilTimeout>
 80016ec:	b118      	cbz	r0, 80016f6 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80016ee:	2003      	movs	r0, #3
}
 80016f0:	b002      	add	sp, #8
 80016f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016f6:	68a3      	ldr	r3, [r4, #8]
 80016f8:	6822      	ldr	r2, [r4, #0]
 80016fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016fe:	d107      	bne.n	8001710 <HAL_UART_Transmit+0xa2>
 8001700:	6923      	ldr	r3, [r4, #16]
 8001702:	b92b      	cbnz	r3, 8001710 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001704:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800170c:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 800170e:	e7cf      	b.n	80016b0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001710:	782b      	ldrb	r3, [r5, #0]
 8001712:	3501      	adds	r5, #1
 8001714:	6293      	str	r3, [r2, #40]	; 0x28
 8001716:	e7cb      	b.n	80016b0 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001718:	2001      	movs	r0, #1
 800171a:	e7e9      	b.n	80016f0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800171c:	2002      	movs	r0, #2
 800171e:	e7e7      	b.n	80016f0 <HAL_UART_Transmit+0x82>

08001720 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001720:	b538      	push	{r3, r4, r5, lr}
 8001722:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001724:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001726:	69c3      	ldr	r3, [r0, #28]
 8001728:	6921      	ldr	r1, [r4, #16]
 800172a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800172c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800172e:	430a      	orrs	r2, r1
 8001730:	6961      	ldr	r1, [r4, #20]
 8001732:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001734:	4993      	ldr	r1, [pc, #588]	; (8001984 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001736:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001738:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800173a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800173c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800173e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001740:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001742:	686a      	ldr	r2, [r5, #4]
 8001744:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001748:	430a      	orrs	r2, r1
 800174a:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800174c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800174e:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001750:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001752:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8001756:	430a      	orrs	r2, r1
 8001758:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800175a:	4a8b      	ldr	r2, [pc, #556]	; (8001988 <UART_SetConfig+0x268>)
 800175c:	4295      	cmp	r5, r2
 800175e:	d119      	bne.n	8001794 <UART_SetConfig+0x74>
 8001760:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001764:	4989      	ldr	r1, [pc, #548]	; (800198c <UART_SetConfig+0x26c>)
 8001766:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800176a:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800176e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001772:	5c8a      	ldrb	r2, [r1, r2]
 8001774:	f040 80b3 	bne.w	80018de <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8001778:	2a08      	cmp	r2, #8
 800177a:	f200 80ad 	bhi.w	80018d8 <UART_SetConfig+0x1b8>
 800177e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001782:	0026      	.short	0x0026
 8001784:	00e9007b 	.word	0x00e9007b
 8001788:	00f500ab 	.word	0x00f500ab
 800178c:	00ab00ab 	.word	0x00ab00ab
 8001790:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001794:	4a7e      	ldr	r2, [pc, #504]	; (8001990 <UART_SetConfig+0x270>)
 8001796:	4295      	cmp	r5, r2
 8001798:	d107      	bne.n	80017aa <UART_SetConfig+0x8a>
 800179a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800179e:	497d      	ldr	r1, [pc, #500]	; (8001994 <UART_SetConfig+0x274>)
 80017a0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80017a4:	f002 020c 	and.w	r2, r2, #12
 80017a8:	e7e1      	b.n	800176e <UART_SetConfig+0x4e>
 80017aa:	4a7b      	ldr	r2, [pc, #492]	; (8001998 <UART_SetConfig+0x278>)
 80017ac:	4295      	cmp	r5, r2
 80017ae:	d12b      	bne.n	8001808 <UART_SetConfig+0xe8>
 80017b0:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80017b4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80017b8:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80017bc:	2a10      	cmp	r2, #16
 80017be:	f000 80d2 	beq.w	8001966 <UART_SetConfig+0x246>
 80017c2:	d816      	bhi.n	80017f2 <UART_SetConfig+0xd2>
 80017c4:	b9da      	cbnz	r2, 80017fe <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ca:	f040 809f 	bne.w	800190c <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80017ce:	f7ff faed 	bl	8000dac <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80017d2:	6861      	ldr	r1, [r4, #4]
 80017d4:	084a      	lsrs	r2, r1, #1
 80017d6:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017e0:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80017e2:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017e6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80017ea:	6821      	ldr	r1, [r4, #0]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60cb      	str	r3, [r1, #12]
 80017f0:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017f2:	2a20      	cmp	r2, #32
 80017f4:	f000 80ab 	beq.w	800194e <UART_SetConfig+0x22e>
 80017f8:	2a30      	cmp	r2, #48	; 0x30
 80017fa:	f000 80ba 	beq.w	8001972 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001802:	d069      	beq.n	80018d8 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001804:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8001806:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001808:	4a64      	ldr	r2, [pc, #400]	; (800199c <UART_SetConfig+0x27c>)
 800180a:	4295      	cmp	r5, r2
 800180c:	d10e      	bne.n	800182c <UART_SetConfig+0x10c>
 800180e:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8001812:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001816:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800181a:	2a40      	cmp	r2, #64	; 0x40
 800181c:	f000 80a3 	beq.w	8001966 <UART_SetConfig+0x246>
 8001820:	d9d0      	bls.n	80017c4 <UART_SetConfig+0xa4>
 8001822:	2a80      	cmp	r2, #128	; 0x80
 8001824:	f000 8093 	beq.w	800194e <UART_SetConfig+0x22e>
 8001828:	2ac0      	cmp	r2, #192	; 0xc0
 800182a:	e7e6      	b.n	80017fa <UART_SetConfig+0xda>
 800182c:	4a5c      	ldr	r2, [pc, #368]	; (80019a0 <UART_SetConfig+0x280>)
 800182e:	4295      	cmp	r5, r2
 8001830:	d110      	bne.n	8001854 <UART_SetConfig+0x134>
 8001832:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8001836:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800183a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800183e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001842:	f000 8090 	beq.w	8001966 <UART_SetConfig+0x246>
 8001846:	d9bd      	bls.n	80017c4 <UART_SetConfig+0xa4>
 8001848:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800184c:	d07f      	beq.n	800194e <UART_SetConfig+0x22e>
 800184e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001852:	e7d2      	b.n	80017fa <UART_SetConfig+0xda>
 8001854:	4a53      	ldr	r2, [pc, #332]	; (80019a4 <UART_SetConfig+0x284>)
 8001856:	4295      	cmp	r5, r2
 8001858:	d117      	bne.n	800188a <UART_SetConfig+0x16a>
 800185a:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800185e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001862:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001866:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800186a:	d07c      	beq.n	8001966 <UART_SetConfig+0x246>
 800186c:	d807      	bhi.n	800187e <UART_SetConfig+0x15e>
 800186e:	2a00      	cmp	r2, #0
 8001870:	d1c5      	bne.n	80017fe <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001876:	d154      	bne.n	8001922 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001878:	f7ff faa8 	bl	8000dcc <HAL_RCC_GetPCLK2Freq>
 800187c:	e7a9      	b.n	80017d2 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800187e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001882:	d064      	beq.n	800194e <UART_SetConfig+0x22e>
 8001884:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8001888:	e7b7      	b.n	80017fa <UART_SetConfig+0xda>
 800188a:	4a47      	ldr	r2, [pc, #284]	; (80019a8 <UART_SetConfig+0x288>)
 800188c:	4295      	cmp	r5, r2
 800188e:	d10f      	bne.n	80018b0 <UART_SetConfig+0x190>
 8001890:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001894:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001898:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800189c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80018a0:	d061      	beq.n	8001966 <UART_SetConfig+0x246>
 80018a2:	d98f      	bls.n	80017c4 <UART_SetConfig+0xa4>
 80018a4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80018a8:	d051      	beq.n	800194e <UART_SetConfig+0x22e>
 80018aa:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80018ae:	e7a4      	b.n	80017fa <UART_SetConfig+0xda>
 80018b0:	4a3e      	ldr	r2, [pc, #248]	; (80019ac <UART_SetConfig+0x28c>)
 80018b2:	4295      	cmp	r5, r2
 80018b4:	d1a3      	bne.n	80017fe <UART_SetConfig+0xde>
 80018b6:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80018ba:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80018be:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80018c2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80018c6:	d04e      	beq.n	8001966 <UART_SetConfig+0x246>
 80018c8:	f67f af7c 	bls.w	80017c4 <UART_SetConfig+0xa4>
 80018cc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80018d0:	d03d      	beq.n	800194e <UART_SetConfig+0x22e>
 80018d2:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80018d6:	e790      	b.n	80017fa <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 80018d8:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80018da:	2300      	movs	r3, #0
 80018dc:	e781      	b.n	80017e2 <UART_SetConfig+0xc2>
    switch (clocksource)
 80018de:	2a08      	cmp	r2, #8
 80018e0:	d890      	bhi.n	8001804 <UART_SetConfig+0xe4>
 80018e2:	a301      	add	r3, pc, #4	; (adr r3, 80018e8 <UART_SetConfig+0x1c8>)
 80018e4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80018e8:	0800190d 	.word	0x0800190d
 80018ec:	08001923 	.word	0x08001923
 80018f0:	08001929 	.word	0x08001929
 80018f4:	08001805 	.word	0x08001805
 80018f8:	0800193f 	.word	0x0800193f
 80018fc:	08001805 	.word	0x08001805
 8001900:	08001805 	.word	0x08001805
 8001904:	08001805 	.word	0x08001805
 8001908:	08001945 	.word	0x08001945
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800190c:	f7ff fa4e 	bl	8000dac <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001910:	6863      	ldr	r3, [r4, #4]
 8001912:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001916:	fbb0 f0f3 	udiv	r0, r0, r3
 800191a:	b280      	uxth	r0, r0
 800191c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800191e:	2000      	movs	r0, #0
      break;
 8001920:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001922:	f7ff fa53 	bl	8000dcc <HAL_RCC_GetPCLK2Freq>
 8001926:	e7f3      	b.n	8001910 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001928:	6862      	ldr	r2, [r4, #4]
 800192a:	0853      	lsrs	r3, r2, #1
 800192c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001930:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001934:	fbb3 f3f2 	udiv	r3, r3, r2
 8001938:	b29b      	uxth	r3, r3
 800193a:	60eb      	str	r3, [r5, #12]
 800193c:	e7ef      	b.n	800191e <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800193e:	f7ff f963 	bl	8000c08 <HAL_RCC_GetSysClockFreq>
 8001942:	e7e5      	b.n	8001910 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001944:	6862      	ldr	r2, [r4, #4]
 8001946:	0853      	lsrs	r3, r2, #1
 8001948:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800194c:	e7f2      	b.n	8001934 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800194e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001952:	d1e9      	bne.n	8001928 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001954:	6860      	ldr	r0, [r4, #4]
 8001956:	0843      	lsrs	r3, r0, #1
 8001958:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800195c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001960:	fbb3 f3f0 	udiv	r3, r3, r0
 8001964:	e73b      	b.n	80017de <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800196a:	d1e8      	bne.n	800193e <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800196c:	f7ff f94c 	bl	8000c08 <HAL_RCC_GetSysClockFreq>
 8001970:	e72f      	b.n	80017d2 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001976:	d1e5      	bne.n	8001944 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001978:	6860      	ldr	r0, [r4, #4]
 800197a:	0843      	lsrs	r3, r0, #1
 800197c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001980:	e7ee      	b.n	8001960 <UART_SetConfig+0x240>
 8001982:	bf00      	nop
 8001984:	efff69f3 	.word	0xefff69f3
 8001988:	40011000 	.word	0x40011000
 800198c:	08002f70 	.word	0x08002f70
 8001990:	40004400 	.word	0x40004400
 8001994:	08002f74 	.word	0x08002f74
 8001998:	40004800 	.word	0x40004800
 800199c:	40004c00 	.word	0x40004c00
 80019a0:	40005000 	.word	0x40005000
 80019a4:	40011400 	.word	0x40011400
 80019a8:	40007800 	.word	0x40007800
 80019ac:	40007c00 	.word	0x40007c00

080019b0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019b2:	07da      	lsls	r2, r3, #31
{
 80019b4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019b6:	d506      	bpl.n	80019c6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80019b8:	6801      	ldr	r1, [r0, #0]
 80019ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80019bc:	684a      	ldr	r2, [r1, #4]
 80019be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80019c2:	4322      	orrs	r2, r4
 80019c4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80019c6:	079c      	lsls	r4, r3, #30
 80019c8:	d506      	bpl.n	80019d8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80019ca:	6801      	ldr	r1, [r0, #0]
 80019cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80019ce:	684a      	ldr	r2, [r1, #4]
 80019d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019d4:	4322      	orrs	r2, r4
 80019d6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019d8:	0759      	lsls	r1, r3, #29
 80019da:	d506      	bpl.n	80019ea <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019dc:	6801      	ldr	r1, [r0, #0]
 80019de:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80019e0:	684a      	ldr	r2, [r1, #4]
 80019e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019e6:	4322      	orrs	r2, r4
 80019e8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80019ea:	071a      	lsls	r2, r3, #28
 80019ec:	d506      	bpl.n	80019fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80019ee:	6801      	ldr	r1, [r0, #0]
 80019f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80019f2:	684a      	ldr	r2, [r1, #4]
 80019f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019f8:	4322      	orrs	r2, r4
 80019fa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80019fc:	06dc      	lsls	r4, r3, #27
 80019fe:	d506      	bpl.n	8001a0e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a00:	6801      	ldr	r1, [r0, #0]
 8001a02:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001a04:	688a      	ldr	r2, [r1, #8]
 8001a06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a0a:	4322      	orrs	r2, r4
 8001a0c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a0e:	0699      	lsls	r1, r3, #26
 8001a10:	d506      	bpl.n	8001a20 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a12:	6801      	ldr	r1, [r0, #0]
 8001a14:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001a16:	688a      	ldr	r2, [r1, #8]
 8001a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a1c:	4322      	orrs	r2, r4
 8001a1e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a20:	065a      	lsls	r2, r3, #25
 8001a22:	d510      	bpl.n	8001a46 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a24:	6801      	ldr	r1, [r0, #0]
 8001a26:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001a28:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a2a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a2e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001a32:	ea42 0204 	orr.w	r2, r2, r4
 8001a36:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a38:	d105      	bne.n	8001a46 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a3a:	684a      	ldr	r2, [r1, #4]
 8001a3c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a3e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001a42:	4322      	orrs	r2, r4
 8001a44:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a46:	061b      	lsls	r3, r3, #24
 8001a48:	d506      	bpl.n	8001a58 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a4a:	6802      	ldr	r2, [r0, #0]
 8001a4c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a4e:	6853      	ldr	r3, [r2, #4]
 8001a50:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6053      	str	r3, [r2, #4]
 8001a58:	bd10      	pop	{r4, pc}

08001a5a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001a5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a5c:	2500      	movs	r5, #0
{
 8001a5e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a60:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001a62:	f7fe fd93 	bl	800058c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a66:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8001a68:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	0712      	lsls	r2, r2, #28
 8001a6e:	d409      	bmi.n	8001a84 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8001a70:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001a72:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001a74:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001a78:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8001a7c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8001a80:	b003      	add	sp, #12
 8001a82:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a84:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001a88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	9200      	str	r2, [sp, #0]
 8001a90:	462a      	mov	r2, r5
 8001a92:	f7ff fdbb 	bl	800160c <UART_WaitOnFlagUntilTimeout>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d0ea      	beq.n	8001a70 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	e7f0      	b.n	8001a80 <UART_CheckIdleState+0x26>

08001a9e <HAL_UART_Init>:
{
 8001a9e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	b360      	cbz	r0, 8001afe <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001aa4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001aa8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001aac:	b91b      	cbnz	r3, 8001ab6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001aae:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001ab2:	f001 f885 	bl	8002bc0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001ab6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ab8:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001aba:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8001abc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001ac0:	6813      	ldr	r3, [r2, #0]
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ac8:	f7ff fe2a 	bl	8001720 <UART_SetConfig>
 8001acc:	2801      	cmp	r0, #1
 8001ace:	d016      	beq.n	8001afe <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ad2:	b113      	cbz	r3, 8001ada <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7ff ff6b 	bl	80019b0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ada:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001adc:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ae4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aec:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
}
 8001af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001af8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001afa:	f7ff bfae 	b.w	8001a5a <UART_CheckIdleState>
}
 8001afe:	2001      	movs	r0, #1
 8001b00:	bd10      	pop	{r4, pc}

08001b02 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b02:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001b04:	f000 fbf0 	bl	80022e8 <vTaskStartScheduler>
  
  return osOK;
}
 8001b08:	2000      	movs	r0, #0
 8001b0a:	bd08      	pop	{r3, pc}

08001b0c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001b0c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b0e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8001b12:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b14:	8a02      	ldrh	r2, [r0, #16]
{
 8001b16:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8001b18:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b1a:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 8001b1e:	bf14      	ite	ne
 8001b20:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001b22:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b24:	a803      	add	r0, sp, #12
 8001b26:	9400      	str	r4, [sp, #0]
 8001b28:	9001      	str	r0, [sp, #4]
 8001b2a:	4628      	mov	r0, r5
 8001b2c:	f000 fb0c 	bl	8002148 <xTaskCreate>
 8001b30:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001b32:	bf0c      	ite	eq
 8001b34:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001b36:	2000      	movne	r0, #0
}
 8001b38:	b005      	add	sp, #20
 8001b3a:	bd30      	pop	{r4, r5, pc}

08001b3c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8001b3c:	b530      	push	{r4, r5, lr}

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8001b3e:	2300      	movs	r3, #0
{
 8001b40:	b085      	sub	sp, #20
 8001b42:	4604      	mov	r4, r0
 8001b44:	4615      	mov	r5, r2
  ret.value.signals = 0;  
 8001b46:	9302      	str	r3, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b48:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 8001b4c:	b110      	cbz	r0, 8001b54 <osSignalWait+0x18>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8001b4e:	2382      	movs	r3, #130	; 0x82
    }
    else if(ret.value.signals < 0)
    {
      ret.status =  osErrorValue;     
    }
    else  ret.status =  osEventSignal;
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	e007      	b.n	8001b64 <osSignalWait+0x28>
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8001b54:	4613      	mov	r3, r2
 8001b56:	aa02      	add	r2, sp, #8
 8001b58:	f000 fda2 	bl	80026a0 <xTaskNotifyWait>
 8001b5c:	2801      	cmp	r0, #1
 8001b5e:	d00b      	beq.n	8001b78 <osSignalWait+0x3c>
      if(ticks == 0)  ret.status = osOK;
 8001b60:	b945      	cbnz	r5, 8001b74 <osSignalWait+0x38>
 8001b62:	9501      	str	r5, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8001b64:	ab04      	add	r3, sp, #16
 8001b66:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8001b6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001b6e:	4620      	mov	r0, r4
 8001b70:	b005      	add	sp, #20
 8001b72:	bd30      	pop	{r4, r5, pc}
      else  ret.status = osEventTimeout;
 8001b74:	2340      	movs	r3, #64	; 0x40
 8001b76:	e7eb      	b.n	8001b50 <osSignalWait+0x14>
    else if(ret.value.signals < 0)
 8001b78:	9b02      	ldr	r3, [sp, #8]
 8001b7a:	2b00      	cmp	r3, #0
      ret.status =  osErrorValue;     
 8001b7c:	bfb4      	ite	lt
 8001b7e:	2386      	movlt	r3, #134	; 0x86
    else  ret.status =  osEventSignal;
 8001b80:	2308      	movge	r3, #8
 8001b82:	e7e5      	b.n	8001b50 <osSignalWait+0x14>

08001b84 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001b84:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b86:	f000 fd7b 	bl	8002680 <xTaskGetSchedulerState>
 8001b8a:	2801      	cmp	r0, #1
 8001b8c:	d003      	beq.n	8001b96 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001b8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001b92:	f000 b90f 	b.w	8001db4 <xPortSysTickHandler>
 8001b96:	bd08      	pop	{r3, pc}

08001b98 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b98:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ba0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ba2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ba4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ba6:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ba8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001baa:	6003      	str	r3, [r0, #0]
 8001bac:	4770      	bx	lr

08001bae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	6103      	str	r3, [r0, #16]
 8001bb2:	4770      	bx	lr

08001bb4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bb4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001bb6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001bb8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001bba:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001bc0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001bc2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bc4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	6003      	str	r3, [r0, #0]
 8001bca:	4770      	bx	lr

08001bcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001bcc:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001bce:	1c53      	adds	r3, r2, #1
{
 8001bd0:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001bd2:	d10a      	bne.n	8001bea <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001bd4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bda:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001bdc:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bde:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001be0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001be2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001be4:	3301      	adds	r3, #1
 8001be6:	6003      	str	r3, [r0, #0]
 8001be8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bea:	f100 0308 	add.w	r3, r0, #8
 8001bee:	685c      	ldr	r4, [r3, #4]
 8001bf0:	6825      	ldr	r5, [r4, #0]
 8001bf2:	42aa      	cmp	r2, r5
 8001bf4:	d3ef      	bcc.n	8001bd6 <vListInsert+0xa>
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	e7f9      	b.n	8001bee <vListInsert+0x22>

08001bfa <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bfa:	6841      	ldr	r1, [r0, #4]
 8001bfc:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001bfe:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c00:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c02:	6882      	ldr	r2, [r0, #8]
 8001c04:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c0a:	bf08      	it	eq
 8001c0c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c0e:	2200      	movs	r2, #0
 8001c10:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	3801      	subs	r0, #1
 8001c16:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001c18:	4770      	bx	lr
	...

08001c1c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <prvTaskExitError+0x34>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	d00a      	beq.n	8001c3a <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c28:	b672      	cpsid	i
 8001c2a:	f383 8811 	msr	BASEPRI, r3
 8001c2e:	f3bf 8f6f 	isb	sy
 8001c32:	f3bf 8f4f 	dsb	sy
 8001c36:	b662      	cpsie	i
 8001c38:	e7fe      	b.n	8001c38 <prvTaskExitError+0x1c>
 8001c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3e:	b672      	cpsid	i
 8001c40:	f383 8811 	msr	BASEPRI, r3
 8001c44:	f3bf 8f6f 	isb	sy
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	b662      	cpsie	i
 8001c4e:	e7fe      	b.n	8001c4e <prvTaskExitError+0x32>
 8001c50:	20000004 	.word	0x20000004

08001c54 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <prvPortStartFirstTask+0x1c>)
 8001c56:	6800      	ldr	r0, [r0, #0]
 8001c58:	6800      	ldr	r0, [r0, #0]
 8001c5a:	f380 8808 	msr	MSP, r0
 8001c5e:	b662      	cpsie	i
 8001c60:	b661      	cpsie	f
 8001c62:	f3bf 8f4f 	dsb	sy
 8001c66:	f3bf 8f6f 	isb	sy
 8001c6a:	df00      	svc	0
 8001c6c:	bf00      	nop
 8001c6e:	0000      	.short	0x0000
 8001c70:	e000ed08 	.word	0xe000ed08

08001c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001c84 <vPortEnableVFP+0x10>
 8001c78:	6801      	ldr	r1, [r0, #0]
 8001c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001c7e:	6001      	str	r1, [r0, #0]
 8001c80:	4770      	bx	lr
 8001c82:	0000      	.short	0x0000
 8001c84:	e000ed88 	.word	0xe000ed88

08001c88 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001c8c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001c90:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8001c94:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001c96:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001c9a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001c9c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001c9e:	f06f 0302 	mvn.w	r3, #2
 8001ca2:	6203      	str	r3, [r0, #32]
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	08001c1d 	.word	0x08001c1d
 8001cac:	00000000 	.word	0x00000000

08001cb0 <SVC_Handler>:
	__asm volatile (
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <pxCurrentTCBConst2>)
 8001cb2:	6819      	ldr	r1, [r3, #0]
 8001cb4:	6808      	ldr	r0, [r1, #0]
 8001cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cba:	f380 8809 	msr	PSP, r0
 8001cbe:	f3bf 8f6f 	isb	sy
 8001cc2:	f04f 0000 	mov.w	r0, #0
 8001cc6:	f380 8811 	msr	BASEPRI, r0
 8001cca:	4770      	bx	lr
 8001ccc:	f3af 8000 	nop.w

08001cd0 <pxCurrentTCBConst2>:
 8001cd0:	20003c48 	.word	0x20003c48

08001cd4 <vPortEnterCritical>:
 8001cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd8:	b672      	cpsid	i
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f3bf 8f4f 	dsb	sy
 8001ce6:	b662      	cpsie	i
	uxCriticalNesting++;
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <vPortEnterCritical+0x44>)
 8001cea:	6813      	ldr	r3, [r2, #0]
 8001cec:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001cee:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001cf2:	d10f      	bne.n	8001d14 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <vPortEnterCritical+0x48>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001cfc:	d00a      	beq.n	8001d14 <vPortEnterCritical+0x40>
 8001cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d02:	b672      	cpsid	i
 8001d04:	f383 8811 	msr	BASEPRI, r3
 8001d08:	f3bf 8f6f 	isb	sy
 8001d0c:	f3bf 8f4f 	dsb	sy
 8001d10:	b662      	cpsie	i
 8001d12:	e7fe      	b.n	8001d12 <vPortEnterCritical+0x3e>
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000004 	.word	0x20000004
 8001d1c:	e000ed04 	.word	0xe000ed04

08001d20 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001d20:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <vPortExitCritical+0x28>)
 8001d22:	6813      	ldr	r3, [r2, #0]
 8001d24:	b953      	cbnz	r3, 8001d3c <vPortExitCritical+0x1c>
 8001d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2a:	b672      	cpsid	i
 8001d2c:	f383 8811 	msr	BASEPRI, r3
 8001d30:	f3bf 8f6f 	isb	sy
 8001d34:	f3bf 8f4f 	dsb	sy
 8001d38:	b662      	cpsie	i
 8001d3a:	e7fe      	b.n	8001d3a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001d40:	b90b      	cbnz	r3, 8001d46 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d42:	f383 8811 	msr	BASEPRI, r3
 8001d46:	4770      	bx	lr
 8001d48:	20000004 	.word	0x20000004
 8001d4c:	00000000 	.word	0x00000000

08001d50 <PendSV_Handler>:
	__asm volatile
 8001d50:	f3ef 8009 	mrs	r0, PSP
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <pxCurrentTCBConst>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f01e 0f10 	tst.w	lr, #16
 8001d60:	bf08      	it	eq
 8001d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d6a:	6010      	str	r0, [r2, #0]
 8001d6c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001d74:	b672      	cpsid	i
 8001d76:	f380 8811 	msr	BASEPRI, r0
 8001d7a:	f3bf 8f4f 	dsb	sy
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	b662      	cpsie	i
 8001d84:	f000 fc40 	bl	8002608 <vTaskSwitchContext>
 8001d88:	f04f 0000 	mov.w	r0, #0
 8001d8c:	f380 8811 	msr	BASEPRI, r0
 8001d90:	bc08      	pop	{r3}
 8001d92:	6819      	ldr	r1, [r3, #0]
 8001d94:	6808      	ldr	r0, [r1, #0]
 8001d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d9a:	f01e 0f10 	tst.w	lr, #16
 8001d9e:	bf08      	it	eq
 8001da0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001da4:	f380 8809 	msr	PSP, r0
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop

08001db0 <pxCurrentTCBConst>:
 8001db0:	20003c48 	.word	0x20003c48

08001db4 <xPortSysTickHandler>:
{
 8001db4:	b508      	push	{r3, lr}
	__asm volatile
 8001db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dba:	b672      	cpsid	i
 8001dbc:	f383 8811 	msr	BASEPRI, r3
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8001dca:	f000 fad5 	bl	8002378 <xTaskIncrementTick>
 8001dce:	b118      	cbz	r0, 8001dd8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd4:	4b02      	ldr	r3, [pc, #8]	; (8001de0 <xPortSysTickHandler+0x2c>)
 8001dd6:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f383 8811 	msr	BASEPRI, r3
 8001dde:	bd08      	pop	{r3, pc}
 8001de0:	e000ed04 	.word	0xe000ed04

08001de4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <vPortSetupTimerInterrupt+0x1c>)
 8001de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <vPortSetupTimerInterrupt+0x20>)
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001df6:	2207      	movs	r2, #7
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <vPortSetupTimerInterrupt+0x24>)
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000008 	.word	0x20000008
 8001e04:	e000e014 	.word	0xe000e014
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <xPortStartScheduler+0x90>)
{
 8001e0e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001e10:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e12:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001e18:	22ff      	movs	r2, #255	; 0xff
 8001e1a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001e1c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001e1e:	4a20      	ldr	r2, [pc, #128]	; (8001ea0 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001e26:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001e2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e2e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001e30:	2207      	movs	r2, #7
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <xPortStartScheduler+0x98>)
 8001e34:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e36:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001e3a:	1e54      	subs	r4, r2, #1
 8001e3c:	0600      	lsls	r0, r0, #24
 8001e3e:	d423      	bmi.n	8001e88 <xPortStartScheduler+0x7c>
 8001e40:	b101      	cbz	r1, 8001e44 <xPortStartScheduler+0x38>
 8001e42:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001e48:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001e4c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001e4e:	9b01      	ldr	r3, [sp, #4]
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <xPortStartScheduler+0x90>)
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <xPortStartScheduler+0x9c>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001e5e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001e66:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001e68:	f7ff ffbc 	bl	8001de4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <xPortStartScheduler+0xa0>)
 8001e70:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8001e72:	f7ff feff 	bl	8001c74 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <xPortStartScheduler+0xa4>)
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001e7e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001e80:	f7ff fee8 	bl	8001c54 <prvPortStartFirstTask>
	prvTaskExitError();
 8001e84:	f7ff feca 	bl	8001c1c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001e88:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	0052      	lsls	r2, r2, #1
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f88d 2003 	strb.w	r2, [sp, #3]
 8001e96:	4622      	mov	r2, r4
 8001e98:	e7cd      	b.n	8001e36 <xPortStartScheduler+0x2a>
 8001e9a:	bf00      	nop
 8001e9c:	e000e400 	.word	0xe000e400
 8001ea0:	20000028 	.word	0x20000028
 8001ea4:	2000002c 	.word	0x2000002c
 8001ea8:	e000ed20 	.word	0xe000ed20
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	e000ef34 	.word	0xe000ef34

08001eb4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <prvInsertBlockIntoFreeList+0x40>)
{
 8001eb6:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4282      	cmp	r2, r0
 8001ebc:	d318      	bcc.n	8001ef0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ebe:	685c      	ldr	r4, [r3, #4]
 8001ec0:	1919      	adds	r1, r3, r4
 8001ec2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ec4:	bf01      	itttt	eq
 8001ec6:	6841      	ldreq	r1, [r0, #4]
 8001ec8:	4618      	moveq	r0, r3
 8001eca:	1909      	addeq	r1, r1, r4
 8001ecc:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001ece:	6844      	ldr	r4, [r0, #4]
 8001ed0:	1901      	adds	r1, r0, r4
 8001ed2:	428a      	cmp	r2, r1
 8001ed4:	d107      	bne.n	8001ee6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ed6:	4908      	ldr	r1, [pc, #32]	; (8001ef8 <prvInsertBlockIntoFreeList+0x44>)
 8001ed8:	6809      	ldr	r1, [r1, #0]
 8001eda:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001edc:	bf1f      	itttt	ne
 8001ede:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001ee0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ee2:	1909      	addne	r1, r1, r4
 8001ee4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ee6:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ee8:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001eea:	bf18      	it	ne
 8001eec:	6018      	strne	r0, [r3, #0]
 8001eee:	bd10      	pop	{r4, pc}
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	e7e1      	b.n	8001eb8 <prvInsertBlockIntoFreeList+0x4>
 8001ef4:	20003c40 	.word	0x20003c40
 8001ef8:	20000030 	.word	0x20000030

08001efc <pvPortMalloc>:
{
 8001efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f00:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001f02:	f000 fa31 	bl	8002368 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001f06:	4940      	ldr	r1, [pc, #256]	; (8002008 <pvPortMalloc+0x10c>)
 8001f08:	4d40      	ldr	r5, [pc, #256]	; (800200c <pvPortMalloc+0x110>)
 8001f0a:	680b      	ldr	r3, [r1, #0]
 8001f0c:	bb0b      	cbnz	r3, 8001f52 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001f0e:	4a40      	ldr	r2, [pc, #256]	; (8002010 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001f10:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f12:	4e40      	ldr	r6, [pc, #256]	; (8002014 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001f14:	bf1b      	ittet	ne
 8001f16:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001f18:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001f1c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f20:	f020 0007 	bicne.w	r0, r0, #7
 8001f24:	bf1c      	itt	ne
 8001f26:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001f28:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8001f2a:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001f2c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f2e:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001f30:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8001f32:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f34:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8001f38:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 8001f3a:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001f3c:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8001f3e:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001f40:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f42:	4b35      	ldr	r3, [pc, #212]	; (8002018 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001f44:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f46:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f48:	4b34      	ldr	r3, [pc, #208]	; (800201c <pvPortMalloc+0x120>)
 8001f4a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001f4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f50:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001f52:	682f      	ldr	r7, [r5, #0]
 8001f54:	4227      	tst	r7, r4
 8001f56:	d116      	bne.n	8001f86 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001f58:	2c00      	cmp	r4, #0
 8001f5a:	d042      	beq.n	8001fe2 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8001f5c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f60:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001f62:	bf1c      	itt	ne
 8001f64:	f023 0307 	bicne.w	r3, r3, #7
 8001f68:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001f6a:	b163      	cbz	r3, 8001f86 <pvPortMalloc+0x8a>
 8001f6c:	4a2b      	ldr	r2, [pc, #172]	; (800201c <pvPortMalloc+0x120>)
 8001f6e:	6816      	ldr	r6, [r2, #0]
 8001f70:	4690      	mov	r8, r2
 8001f72:	42b3      	cmp	r3, r6
 8001f74:	d807      	bhi.n	8001f86 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001f76:	4a27      	ldr	r2, [pc, #156]	; (8002014 <pvPortMalloc+0x118>)
 8001f78:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f7a:	6868      	ldr	r0, [r5, #4]
 8001f7c:	4283      	cmp	r3, r0
 8001f7e:	d804      	bhi.n	8001f8a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001f80:	6809      	ldr	r1, [r1, #0]
 8001f82:	428d      	cmp	r5, r1
 8001f84:	d107      	bne.n	8001f96 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001f86:	2400      	movs	r4, #0
 8001f88:	e02b      	b.n	8001fe2 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f8a:	682c      	ldr	r4, [r5, #0]
 8001f8c:	2c00      	cmp	r4, #0
 8001f8e:	d0f7      	beq.n	8001f80 <pvPortMalloc+0x84>
 8001f90:	462a      	mov	r2, r5
 8001f92:	4625      	mov	r5, r4
 8001f94:	e7f1      	b.n	8001f7a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f96:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001f98:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f9a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001f9c:	1ac2      	subs	r2, r0, r3
 8001f9e:	2a10      	cmp	r2, #16
 8001fa0:	d911      	bls.n	8001fc6 <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001fa2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001fa4:	0741      	lsls	r1, r0, #29
 8001fa6:	d00a      	beq.n	8001fbe <pvPortMalloc+0xc2>
	__asm volatile
 8001fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fac:	b672      	cpsid	i
 8001fae:	f383 8811 	msr	BASEPRI, r3
 8001fb2:	f3bf 8f6f 	isb	sy
 8001fb6:	f3bf 8f4f 	dsb	sy
 8001fba:	b662      	cpsie	i
 8001fbc:	e7fe      	b.n	8001fbc <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001fbe:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001fc0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001fc2:	f7ff ff77 	bl	8001eb4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001fc6:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001fc8:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001fca:	4913      	ldr	r1, [pc, #76]	; (8002018 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001fcc:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001fce:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001fd0:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8001fd2:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001fd4:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001fd8:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001fda:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001fdc:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001fde:	bf38      	it	cc
 8001fe0:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8001fe2:	f000 fa5d 	bl	80024a0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001fe6:	0763      	lsls	r3, r4, #29
 8001fe8:	d00a      	beq.n	8002000 <pvPortMalloc+0x104>
 8001fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fee:	b672      	cpsid	i
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	b662      	cpsie	i
 8001ffe:	e7fe      	b.n	8001ffe <pvPortMalloc+0x102>
}
 8002000:	4620      	mov	r0, r4
 8002002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002006:	bf00      	nop
 8002008:	20000030 	.word	0x20000030
 800200c:	20003c34 	.word	0x20003c34
 8002010:	20000034 	.word	0x20000034
 8002014:	20003c40 	.word	0x20003c40
 8002018:	20003c3c 	.word	0x20003c3c
 800201c:	20003c38 	.word	0x20003c38

08002020 <vPortFree>:
{
 8002020:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002022:	4604      	mov	r4, r0
 8002024:	2800      	cmp	r0, #0
 8002026:	d032      	beq.n	800208e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002028:	4a19      	ldr	r2, [pc, #100]	; (8002090 <vPortFree+0x70>)
 800202a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	4213      	tst	r3, r2
 8002032:	d10a      	bne.n	800204a <vPortFree+0x2a>
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	b672      	cpsid	i
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	b662      	cpsie	i
 8002048:	e7fe      	b.n	8002048 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800204a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800204e:	b151      	cbz	r1, 8002066 <vPortFree+0x46>
 8002050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002054:	b672      	cpsid	i
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	b662      	cpsie	i
 8002064:	e7fe      	b.n	8002064 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002066:	ea23 0302 	bic.w	r3, r3, r2
 800206a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800206e:	f000 f97b 	bl	8002368 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <vPortFree+0x74>)
 8002074:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002078:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800207c:	6811      	ldr	r1, [r2, #0]
 800207e:	440b      	add	r3, r1
 8002080:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002082:	f7ff ff17 	bl	8001eb4 <prvInsertBlockIntoFreeList>
}
 8002086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800208a:	f000 ba09 	b.w	80024a0 <xTaskResumeAll>
 800208e:	bd10      	pop	{r4, pc}
 8002090:	20003c34 	.word	0x20003c34
 8002094:	20003c38 	.word	0x20003c38

08002098 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002098:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <prvResetNextTaskUnblockTime+0x1c>)
 800209a:	6813      	ldr	r3, [r2, #0]
 800209c:	6819      	ldr	r1, [r3, #0]
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <prvResetNextTaskUnblockTime+0x20>)
 80020a0:	b919      	cbnz	r1, 80020aa <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80020a2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020ae:	68d2      	ldr	r2, [r2, #12]
 80020b0:	6852      	ldr	r2, [r2, #4]
 80020b2:	e7f8      	b.n	80020a6 <prvResetNextTaskUnblockTime+0xe>
 80020b4:	20003c4c 	.word	0x20003c4c
 80020b8:	20003d24 	.word	0x20003d24

080020bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <prvAddCurrentTaskToDelayedList+0x70>)
{
 80020c0:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020c2:	4e1b      	ldr	r6, [pc, #108]	; (8002130 <prvAddCurrentTaskToDelayedList+0x74>)
{
 80020c4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80020c6:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020c8:	6830      	ldr	r0, [r6, #0]
 80020ca:	3004      	adds	r0, #4
 80020cc:	f7ff fd95 	bl	8001bfa <uxListRemove>
 80020d0:	4633      	mov	r3, r6
 80020d2:	b940      	cbnz	r0, 80020e6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80020d4:	6831      	ldr	r1, [r6, #0]
 80020d6:	2001      	movs	r0, #1
 80020d8:	4e16      	ldr	r6, [pc, #88]	; (8002134 <prvAddCurrentTaskToDelayedList+0x78>)
 80020da:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80020dc:	6832      	ldr	r2, [r6, #0]
 80020de:	4088      	lsls	r0, r1
 80020e0:	ea22 0200 	bic.w	r2, r2, r0
 80020e4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80020e6:	1c62      	adds	r2, r4, #1
 80020e8:	d107      	bne.n	80020fa <prvAddCurrentTaskToDelayedList+0x3e>
 80020ea:	b137      	cbz	r7, 80020fa <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	4812      	ldr	r0, [pc, #72]	; (8002138 <prvAddCurrentTaskToDelayedList+0x7c>)
 80020f0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80020f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020f6:	f7ff bd5d 	b.w	8001bb4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80020fa:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80020fc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80020fe:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002100:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002102:	d907      	bls.n	8002114 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <prvAddCurrentTaskToDelayedList+0x80>)
 8002106:	6810      	ldr	r0, [r2, #0]
 8002108:	6819      	ldr	r1, [r3, #0]
}
 800210a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800210e:	3104      	adds	r1, #4
 8002110:	f7ff bd5c 	b.w	8001bcc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <prvAddCurrentTaskToDelayedList+0x84>)
 8002116:	6810      	ldr	r0, [r2, #0]
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	3104      	adds	r1, #4
 800211c:	f7ff fd56 	bl	8001bcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <prvAddCurrentTaskToDelayedList+0x88>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4294      	cmp	r4, r2
 8002126:	d200      	bcs.n	800212a <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8002128:	601c      	str	r4, [r3, #0]
 800212a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800212c:	20003d6c 	.word	0x20003d6c
 8002130:	20003c48 	.word	0x20003c48
 8002134:	20003cf4 	.word	0x20003cf4
 8002138:	20003d44 	.word	0x20003d44
 800213c:	20003c50 	.word	0x20003c50
 8002140:	20003c4c 	.word	0x20003c4c
 8002144:	20003d24 	.word	0x20003d24

08002148 <xTaskCreate>:
	{
 8002148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800214c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002150:	4680      	mov	r8, r0
 8002152:	460f      	mov	r7, r1
 8002154:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002156:	4650      	mov	r0, sl
	{
 8002158:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800215a:	f7ff fecf 	bl	8001efc <pvPortMalloc>
			if( pxStack != NULL )
 800215e:	4605      	mov	r5, r0
 8002160:	2800      	cmp	r0, #0
 8002162:	f000 8096 	beq.w	8002292 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002166:	2054      	movs	r0, #84	; 0x54
 8002168:	f7ff fec8 	bl	8001efc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800216c:	4604      	mov	r4, r0
 800216e:	2800      	cmp	r0, #0
 8002170:	f000 808c 	beq.w	800228c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002174:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002178:	6305      	str	r5, [r0, #48]	; 0x30
 800217a:	1e7b      	subs	r3, r7, #1
 800217c:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002180:	4455      	add	r5, sl
 8002182:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002184:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002188:	7859      	ldrb	r1, [r3, #1]
 800218a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800218e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002192:	b109      	cbz	r1, 8002198 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002194:	42bb      	cmp	r3, r7
 8002196:	d1f7      	bne.n	8002188 <xTaskCreate+0x40>
 8002198:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800219a:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800219e:	1d27      	adds	r7, r4, #4
 80021a0:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021a2:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021a6:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 80021a8:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 80021ac:	bf28      	it	cs
 80021ae:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80021b0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80021b2:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021b4:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021b8:	f7ff fcf9 	bl	8001bae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021bc:	f104 0018 	add.w	r0, r4, #24
 80021c0:	f7ff fcf5 	bl	8001bae <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80021c4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021c8:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021ca:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021cc:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021ce:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021d0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021d2:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80021d4:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021d8:	f7ff fd56 	bl	8001c88 <pxPortInitialiseStack>
 80021dc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80021de:	b106      	cbz	r6, 80021e2 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80021e0:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80021e2:	f7ff fd77 	bl	8001cd4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80021e6:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80021e8:	4e32      	ldr	r6, [pc, #200]	; (80022b4 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80022e0 <xTaskCreate+0x198>
 80021f0:	3201      	adds	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80021f4:	6835      	ldr	r5, [r6, #0]
 80021f6:	2d00      	cmp	r5, #0
 80021f8:	d14e      	bne.n	8002298 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80021fa:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d11d      	bne.n	800223e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002202:	eb08 0005 	add.w	r0, r8, r5
 8002206:	3514      	adds	r5, #20
 8002208:	f7ff fcc6 	bl	8001b98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800220c:	2d8c      	cmp	r5, #140	; 0x8c
 800220e:	d1f8      	bne.n	8002202 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002210:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80022e4 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002214:	4d28      	ldr	r5, [pc, #160]	; (80022b8 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002216:	4648      	mov	r0, r9
 8002218:	f7ff fcbe 	bl	8001b98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800221c:	4628      	mov	r0, r5
 800221e:	f7ff fcbb 	bl	8001b98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002222:	4826      	ldr	r0, [pc, #152]	; (80022bc <xTaskCreate+0x174>)
 8002224:	f7ff fcb8 	bl	8001b98 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002228:	4825      	ldr	r0, [pc, #148]	; (80022c0 <xTaskCreate+0x178>)
 800222a:	f7ff fcb5 	bl	8001b98 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800222e:	4825      	ldr	r0, [pc, #148]	; (80022c4 <xTaskCreate+0x17c>)
 8002230:	f7ff fcb2 	bl	8001b98 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <xTaskCreate+0x180>)
 8002236:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <xTaskCreate+0x184>)
 800223c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800223e:	4a24      	ldr	r2, [pc, #144]	; (80022d0 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002240:	2501      	movs	r5, #1
 8002242:	4924      	ldr	r1, [pc, #144]	; (80022d4 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002244:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002246:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002248:	3301      	adds	r3, #1
 800224a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800224c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800224e:	fa05 f302 	lsl.w	r3, r5, r2
 8002252:	4303      	orrs	r3, r0
 8002254:	2014      	movs	r0, #20
 8002256:	600b      	str	r3, [r1, #0]
 8002258:	4639      	mov	r1, r7
 800225a:	fb00 8002 	mla	r0, r0, r2, r8
 800225e:	f7ff fca9 	bl	8001bb4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002262:	f7ff fd5d 	bl	8001d20 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <xTaskCreate+0x190>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b163      	cbz	r3, 8002286 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800226c:	6833      	ldr	r3, [r6, #0]
 800226e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002270:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002272:	429a      	cmp	r2, r3
 8002274:	d207      	bcs.n	8002286 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8002276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <xTaskCreate+0x194>)
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f3bf 8f4f 	dsb	sy
 8002282:	f3bf 8f6f 	isb	sy
	}
 8002286:	4628      	mov	r0, r5
 8002288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800228c:	4628      	mov	r0, r5
 800228e:	f7ff fec7 	bl	8002020 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002292:	f04f 35ff 	mov.w	r5, #4294967295
 8002296:	e7f6      	b.n	8002286 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <xTaskCreate+0x190>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ce      	bne.n	800223e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022a0:	6833      	ldr	r3, [r6, #0]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d8c9      	bhi.n	800223e <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 80022aa:	6034      	str	r4, [r6, #0]
 80022ac:	e7c7      	b.n	800223e <xTaskCreate+0xf6>
 80022ae:	bf00      	nop
 80022b0:	20003ce0 	.word	0x20003ce0
 80022b4:	20003c48 	.word	0x20003c48
 80022b8:	20003d0c 	.word	0x20003d0c
 80022bc:	20003d2c 	.word	0x20003d2c
 80022c0:	20003d58 	.word	0x20003d58
 80022c4:	20003d44 	.word	0x20003d44
 80022c8:	20003c4c 	.word	0x20003c4c
 80022cc:	20003c50 	.word	0x20003c50
 80022d0:	20003cf0 	.word	0x20003cf0
 80022d4:	20003cf4 	.word	0x20003cf4
 80022d8:	20003d40 	.word	0x20003d40
 80022dc:	e000ed04 	.word	0xe000ed04
 80022e0:	20003c54 	.word	0x20003c54
 80022e4:	20003cf8 	.word	0x20003cf8

080022e8 <vTaskStartScheduler>:
{
 80022e8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <vTaskStartScheduler+0x68>)
 80022ec:	2400      	movs	r4, #0
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	4918      	ldr	r1, [pc, #96]	; (8002354 <vTaskStartScheduler+0x6c>)
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	4623      	mov	r3, r4
 80022f6:	9400      	str	r4, [sp, #0]
 80022f8:	4817      	ldr	r0, [pc, #92]	; (8002358 <vTaskStartScheduler+0x70>)
 80022fa:	f7ff ff25 	bl	8002148 <xTaskCreate>
	if( xReturn == pdPASS )
 80022fe:	2801      	cmp	r0, #1
 8002300:	d116      	bne.n	8002330 <vTaskStartScheduler+0x48>
 8002302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002306:	b672      	cpsid	i
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8002316:	f04f 32ff 	mov.w	r2, #4294967295
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <vTaskStartScheduler+0x74>)
 800231c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <vTaskStartScheduler+0x78>)
 8002320:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <vTaskStartScheduler+0x7c>)
 8002324:	601c      	str	r4, [r3, #0]
}
 8002326:	b002      	add	sp, #8
 8002328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800232c:	f7ff bd6e 	b.w	8001e0c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002330:	3001      	adds	r0, #1
 8002332:	d10a      	bne.n	800234a <vTaskStartScheduler+0x62>
 8002334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002338:	b672      	cpsid	i
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	b662      	cpsie	i
 8002348:	e7fe      	b.n	8002348 <vTaskStartScheduler+0x60>
}
 800234a:	b002      	add	sp, #8
 800234c:	bd10      	pop	{r4, pc}
 800234e:	bf00      	nop
 8002350:	20003d20 	.word	0x20003d20
 8002354:	08002f81 	.word	0x08002f81
 8002358:	08002595 	.word	0x08002595
 800235c:	20003d24 	.word	0x20003d24
 8002360:	20003d40 	.word	0x20003d40
 8002364:	20003d6c 	.word	0x20003d6c

08002368 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002368:	4a02      	ldr	r2, [pc, #8]	; (8002374 <vTaskSuspendAll+0xc>)
 800236a:	6813      	ldr	r3, [r2, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20003cec 	.word	0x20003cec

08002378 <xTaskIncrementTick>:
{
 8002378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800237c:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <xTaskIncrementTick+0xfc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d155      	bne.n	8002430 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002384:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <xTaskIncrementTick+0x100>)
 8002386:	681c      	ldr	r4, [r3, #0]
 8002388:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800238a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800238c:	b9cc      	cbnz	r4, 80023c2 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <xTaskIncrementTick+0x104>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	b152      	cbz	r2, 80023ac <xTaskIncrementTick+0x34>
 8002396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239a:	b672      	cpsid	i
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	b662      	cpsie	i
 80023aa:	e7fe      	b.n	80023aa <xTaskIncrementTick+0x32>
 80023ac:	4a34      	ldr	r2, [pc, #208]	; (8002480 <xTaskIncrementTick+0x108>)
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	6810      	ldr	r0, [r2, #0]
 80023b2:	6018      	str	r0, [r3, #0]
 80023b4:	6011      	str	r1, [r2, #0]
 80023b6:	4a33      	ldr	r2, [pc, #204]	; (8002484 <xTaskIncrementTick+0x10c>)
 80023b8:	6813      	ldr	r3, [r2, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	f7ff fe6b 	bl	8002098 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80023c2:	4d31      	ldr	r5, [pc, #196]	; (8002488 <xTaskIncrementTick+0x110>)
 80023c4:	f04f 0b00 	mov.w	fp, #0
 80023c8:	4f30      	ldr	r7, [pc, #192]	; (800248c <xTaskIncrementTick+0x114>)
 80023ca:	682b      	ldr	r3, [r5, #0]
 80023cc:	429c      	cmp	r4, r3
 80023ce:	d33e      	bcc.n	800244e <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023d0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800247c <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 80023d4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800249c <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023d8:	f8d8 2000 	ldr.w	r2, [r8]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	bb72      	cbnz	r2, 800243e <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	602a      	str	r2, [r5, #0]
					break;
 80023e6:	e032      	b.n	800244e <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023e8:	f106 0a04 	add.w	sl, r6, #4
 80023ec:	4650      	mov	r0, sl
 80023ee:	f7ff fc04 	bl	8001bfa <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023f2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80023f4:	b119      	cbz	r1, 80023fe <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023f6:	f106 0018 	add.w	r0, r6, #24
 80023fa:	f7ff fbfe 	bl	8001bfa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80023fe:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002400:	2201      	movs	r2, #1
 8002402:	f8d9 3000 	ldr.w	r3, [r9]
 8002406:	f04f 0e14 	mov.w	lr, #20
 800240a:	fa02 f100 	lsl.w	r1, r2, r0
 800240e:	4319      	orrs	r1, r3
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <xTaskIncrementTick+0x118>)
 8002412:	f8c9 1000 	str.w	r1, [r9]
 8002416:	4651      	mov	r1, sl
 8002418:	fb0e 3000 	mla	r0, lr, r0, r3
 800241c:	f7ff fbca 	bl	8001bb4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002420:	6838      	ldr	r0, [r7, #0]
 8002422:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002424:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002426:	4291      	cmp	r1, r2
 8002428:	bf28      	it	cs
 800242a:	f04f 0b01 	movcs.w	fp, #1
 800242e:	e7d3      	b.n	80023d8 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8002430:	4a18      	ldr	r2, [pc, #96]	; (8002494 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8002432:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8002436:	6813      	ldr	r3, [r2, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e011      	b.n	8002462 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800243e:	f8d8 2000 	ldr.w	r2, [r8]
 8002442:	68d2      	ldr	r2, [r2, #12]
 8002444:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002446:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002448:	428c      	cmp	r4, r1
 800244a:	d2cd      	bcs.n	80023e8 <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 800244c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <xTaskIncrementTick+0x118>)
 8002452:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002454:	2214      	movs	r2, #20
 8002456:	434a      	muls	r2, r1
 8002458:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800245a:	2a02      	cmp	r2, #2
 800245c:	bf28      	it	cs
 800245e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002462:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <xTaskIncrementTick+0x120>)
 8002464:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002466:	2a00      	cmp	r2, #0
 8002468:	bf18      	it	ne
 800246a:	f04f 0b01 	movne.w	fp, #1
}
 800246e:	4658      	mov	r0, fp
 8002470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002474:	20003cec 	.word	0x20003cec
 8002478:	20003d6c 	.word	0x20003d6c
 800247c:	20003c4c 	.word	0x20003c4c
 8002480:	20003c50 	.word	0x20003c50
 8002484:	20003d28 	.word	0x20003d28
 8002488:	20003d24 	.word	0x20003d24
 800248c:	20003c48 	.word	0x20003c48
 8002490:	20003c54 	.word	0x20003c54
 8002494:	20003ce8 	.word	0x20003ce8
 8002498:	20003d70 	.word	0x20003d70
 800249c:	20003cf4 	.word	0x20003cf4

080024a0 <xTaskResumeAll>:
{
 80024a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80024a4:	4c32      	ldr	r4, [pc, #200]	; (8002570 <xTaskResumeAll+0xd0>)
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	b953      	cbnz	r3, 80024c0 <xTaskResumeAll+0x20>
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	b672      	cpsid	i
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	b662      	cpsie	i
 80024be:	e7fe      	b.n	80024be <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80024c0:	f7ff fc08 	bl	8001cd4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024ca:	6824      	ldr	r4, [r4, #0]
 80024cc:	b12c      	cbz	r4, 80024da <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 80024ce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80024d0:	f7ff fc26 	bl	8001d20 <vPortExitCritical>
}
 80024d4:	4620      	mov	r0, r4
 80024d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <xTaskResumeAll+0xd4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f5      	beq.n	80024ce <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024e2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800258c <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 80024e6:	4f24      	ldr	r7, [pc, #144]	; (8002578 <xTaskResumeAll+0xd8>)
 80024e8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002590 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024ec:	f8d9 3000 	ldr.w	r3, [r9]
 80024f0:	b9e3      	cbnz	r3, 800252c <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 80024f2:	b10c      	cbz	r4, 80024f8 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 80024f4:	f7ff fdd0 	bl	8002098 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80024f8:	4d20      	ldr	r5, [pc, #128]	; (800257c <xTaskResumeAll+0xdc>)
 80024fa:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80024fc:	b144      	cbz	r4, 8002510 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 80024fe:	4e20      	ldr	r6, [pc, #128]	; (8002580 <xTaskResumeAll+0xe0>)
 8002500:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002502:	f7ff ff39 	bl	8002378 <xTaskIncrementTick>
 8002506:	b100      	cbz	r0, 800250a <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8002508:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800250a:	3c01      	subs	r4, #1
 800250c:	d1f9      	bne.n	8002502 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 800250e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <xTaskResumeAll+0xe0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0da      	beq.n	80024ce <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8002518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <xTaskResumeAll+0xe4>)
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002528:	2401      	movs	r4, #1
 800252a:	e7d1      	b.n	80024d0 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800252c:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8002530:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002532:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002534:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002536:	f104 0018 	add.w	r0, r4, #24
 800253a:	f7ff fb5e 	bl	8001bfa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800253e:	4630      	mov	r0, r6
 8002540:	f7ff fb5b 	bl	8001bfa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002544:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002546:	6839      	ldr	r1, [r7, #0]
 8002548:	2014      	movs	r0, #20
 800254a:	fa05 f302 	lsl.w	r3, r5, r2
 800254e:	fb00 8002 	mla	r0, r0, r2, r8
 8002552:	430b      	orrs	r3, r1
 8002554:	4631      	mov	r1, r6
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	f7ff fb2c 	bl	8001bb4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <xTaskResumeAll+0xe8>)
 800255e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	429a      	cmp	r2, r3
 8002566:	d3c1      	bcc.n	80024ec <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <xTaskResumeAll+0xe0>)
 800256a:	601d      	str	r5, [r3, #0]
 800256c:	e7be      	b.n	80024ec <xTaskResumeAll+0x4c>
 800256e:	bf00      	nop
 8002570:	20003cec 	.word	0x20003cec
 8002574:	20003ce0 	.word	0x20003ce0
 8002578:	20003cf4 	.word	0x20003cf4
 800257c:	20003ce8 	.word	0x20003ce8
 8002580:	20003d70 	.word	0x20003d70
 8002584:	e000ed04 	.word	0xe000ed04
 8002588:	20003c48 	.word	0x20003c48
 800258c:	20003d2c 	.word	0x20003d2c
 8002590:	20003c54 	.word	0x20003c54

08002594 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002594:	4e17      	ldr	r6, [pc, #92]	; (80025f4 <prvIdleTask+0x60>)
{
 8002596:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002598:	4c17      	ldr	r4, [pc, #92]	; (80025f8 <prvIdleTask+0x64>)
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	b963      	cbnz	r3, 80025b8 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <prvIdleTask+0x68>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d9f8      	bls.n	8002598 <prvIdleTask+0x4>
				taskYIELD();
 80025a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <prvIdleTask+0x6c>)
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	e7ef      	b.n	8002598 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80025b8:	f7ff fed6 	bl	8002368 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80025bc:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80025be:	f7ff ff6f 	bl	80024a0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80025c2:	2d00      	cmp	r5, #0
 80025c4:	d0e9      	beq.n	800259a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80025c6:	f7ff fb85 	bl	8001cd4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80025ca:	68f3      	ldr	r3, [r6, #12]
 80025cc:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025ce:	1d28      	adds	r0, r5, #4
 80025d0:	f7ff fb13 	bl	8001bfa <uxListRemove>
					--uxCurrentNumberOfTasks;
 80025d4:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <prvIdleTask+0x70>)
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	3b01      	subs	r3, #1
 80025da:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	3b01      	subs	r3, #1
 80025e0:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80025e2:	f7ff fb9d 	bl	8001d20 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80025e6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80025e8:	f7ff fd1a 	bl	8002020 <vPortFree>
			vPortFree( pxTCB );
 80025ec:	4628      	mov	r0, r5
 80025ee:	f7ff fd17 	bl	8002020 <vPortFree>
 80025f2:	e7d2      	b.n	800259a <prvIdleTask+0x6>
 80025f4:	20003d58 	.word	0x20003d58
 80025f8:	20003ce4 	.word	0x20003ce4
 80025fc:	20003c54 	.word	0x20003c54
 8002600:	e000ed04 	.word	0xe000ed04
 8002604:	20003ce0 	.word	0x20003ce0

08002608 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <vTaskSwitchContext+0x64>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b18      	ldr	r3, [pc, #96]	; (8002670 <vTaskSwitchContext+0x68>)
{
 800260e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002610:	b112      	cbz	r2, 8002618 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002612:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002618:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <vTaskSwitchContext+0x6c>)
 800261c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2214      	movs	r2, #20
 8002626:	4914      	ldr	r1, [pc, #80]	; (8002678 <vTaskSwitchContext+0x70>)
 8002628:	f1c3 031f 	rsb	r3, r3, #31
 800262c:	435a      	muls	r2, r3
 800262e:	588c      	ldr	r4, [r1, r2]
 8002630:	1888      	adds	r0, r1, r2
 8002632:	b954      	cbnz	r4, 800264a <vTaskSwitchContext+0x42>
	__asm volatile
 8002634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002638:	b672      	cpsid	i
 800263a:	f383 8811 	msr	BASEPRI, r3
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	b662      	cpsie	i
 8002648:	e7fe      	b.n	8002648 <vTaskSwitchContext+0x40>
 800264a:	6844      	ldr	r4, [r0, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	6864      	ldr	r4, [r4, #4]
 8002650:	440a      	add	r2, r1
 8002652:	4294      	cmp	r4, r2
 8002654:	6044      	str	r4, [r0, #4]
 8002656:	bf04      	itt	eq
 8002658:	6862      	ldreq	r2, [r4, #4]
 800265a:	6042      	streq	r2, [r0, #4]
 800265c:	2214      	movs	r2, #20
 800265e:	fb02 1303 	mla	r3, r2, r3, r1
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	4b05      	ldr	r3, [pc, #20]	; (800267c <vTaskSwitchContext+0x74>)
 8002668:	e7d4      	b.n	8002614 <vTaskSwitchContext+0xc>
 800266a:	bf00      	nop
 800266c:	20003cec 	.word	0x20003cec
 8002670:	20003d70 	.word	0x20003d70
 8002674:	20003cf4 	.word	0x20003cf4
 8002678:	20003c54 	.word	0x20003c54
 800267c:	20003c48 	.word	0x20003c48

08002680 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <xTaskGetSchedulerState+0x18>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b133      	cbz	r3, 8002694 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <xTaskGetSchedulerState+0x1c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800268c:	bf0c      	ite	eq
 800268e:	2002      	moveq	r0, #2
 8002690:	2000      	movne	r0, #0
 8002692:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002694:	2001      	movs	r0, #1
	}
 8002696:	4770      	bx	lr
 8002698:	20003d40 	.word	0x20003d40
 800269c:	20003cec 	.word	0x20003cec

080026a0 <xTaskNotifyWait>:
	{
 80026a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80026a4:	4c1f      	ldr	r4, [pc, #124]	; (8002724 <xTaskNotifyWait+0x84>)
	{
 80026a6:	461e      	mov	r6, r3
 80026a8:	4680      	mov	r8, r0
 80026aa:	460f      	mov	r7, r1
 80026ac:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 80026ae:	f7ff fb11 	bl	8001cd4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d014      	beq.n	80026e6 <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80026bc:	6823      	ldr	r3, [r4, #0]
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80026be:	2101      	movs	r1, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80026c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026c2:	ea22 0208 	bic.w	r2, r2, r8
 80026c6:	64da      	str	r2, [r3, #76]	; 0x4c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 80026ce:	b156      	cbz	r6, 80026e6 <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80026d0:	4630      	mov	r0, r6
 80026d2:	f7ff fcf3 	bl	80020bc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80026d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <xTaskNotifyWait+0x88>)
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 80026e6:	f7ff fb1b 	bl	8001d20 <vPortExitCritical>
		taskENTER_CRITICAL();
 80026ea:	f7ff faf3 	bl	8001cd4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80026ee:	b115      	cbz	r5, 80026f6 <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80026f0:	6823      	ldr	r3, [r4, #0]
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d00e      	beq.n	800271e <xTaskNotifyWait+0x7e>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002700:	6823      	ldr	r3, [r4, #0]
				xReturn = pdTRUE;
 8002702:	2501      	movs	r5, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002704:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002706:	ea21 0107 	bic.w	r1, r1, r7
 800270a:	64d9      	str	r1, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 8002714:	f7ff fb04 	bl	8001d20 <vPortExitCritical>
	}
 8002718:	4628      	mov	r0, r5
 800271a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				xReturn = pdFALSE;
 800271e:	2500      	movs	r5, #0
 8002720:	e7f4      	b.n	800270c <xTaskNotifyWait+0x6c>
 8002722:	bf00      	nop
 8002724:	20003c48 	.word	0x20003c48
 8002728:	e000ed04 	.word	0xe000ed04

0800272c <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 800272c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(flug,1000);
	  xprintf("count=%d\r\n",count);
 800272e:	4e0a      	ldr	r6, [pc, #40]	; (8002758 <StartDefaultTask+0x2c>)
	  osSignalWait(flug,1000);
 8002730:	4c0a      	ldr	r4, [pc, #40]	; (800275c <StartDefaultTask+0x30>)
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_0);
 8002732:	4d0b      	ldr	r5, [pc, #44]	; (8002760 <StartDefaultTask+0x34>)
	  osSignalWait(flug,1000);
 8002734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002738:	7821      	ldrb	r1, [r4, #0]
 800273a:	4668      	mov	r0, sp
 800273c:	f7ff f9fe 	bl	8001b3c <osSignalWait>
	  xprintf("count=%d\r\n",count);
 8002740:	6831      	ldr	r1, [r6, #0]
 8002742:	4808      	ldr	r0, [pc, #32]	; (8002764 <StartDefaultTask+0x38>)
 8002744:	f000 fb98 	bl	8002e78 <xprintf>
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_0);
 8002748:	2101      	movs	r1, #1
 800274a:	4628      	mov	r0, r5
 800274c:	f7fe f88b 	bl	8000866 <HAL_GPIO_TogglePin>
	  flug=0;
 8002750:	2300      	movs	r3, #0
 8002752:	7023      	strb	r3, [r4, #0]
 8002754:	e7ee      	b.n	8002734 <StartDefaultTask+0x8>
 8002756:	bf00      	nop
 8002758:	20003d8c 	.word	0x20003d8c
 800275c:	20003d84 	.word	0x20003d84
 8002760:	40021000 	.word	0x40021000
 8002764:	08002f86 	.word	0x08002f86

08002768 <StartTask02>:
{
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  count++;
 8002768:	4c08      	ldr	r4, [pc, #32]	; (800278c <StartTask02+0x24>)
	  if(count>100){
		  flug=1;
 800276a:	4e09      	ldr	r6, [pc, #36]	; (8002790 <StartTask02+0x28>)
		  count=0;
	  }
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
 800276c:	4d09      	ldr	r5, [pc, #36]	; (8002794 <StartTask02+0x2c>)
{
 800276e:	b508      	push	{r3, lr}
	  count++;
 8002770:	6823      	ldr	r3, [r4, #0]
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
 8002772:	2102      	movs	r1, #2
 8002774:	4628      	mov	r0, r5
	  count++;
 8002776:	3301      	adds	r3, #1
	  if(count>100){
 8002778:	2b64      	cmp	r3, #100	; 0x64
	  count++;
 800277a:	6023      	str	r3, [r4, #0]
		  flug=1;
 800277c:	bfc1      	itttt	gt
 800277e:	2301      	movgt	r3, #1
 8002780:	7033      	strbgt	r3, [r6, #0]
		  count=0;
 8002782:	2300      	movgt	r3, #0
 8002784:	6023      	strgt	r3, [r4, #0]
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_1);
 8002786:	f7fe f86e 	bl	8000866 <HAL_GPIO_TogglePin>
	  count++;
 800278a:	e7f1      	b.n	8002770 <StartTask02+0x8>
 800278c:	20003d8c 	.word	0x20003d8c
 8002790:	20003d84 	.word	0x20003d84
 8002794:	40021000 	.word	0x40021000

08002798 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002798:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800279a:	4c0e      	ldr	r4, [pc, #56]	; (80027d4 <MX_FREERTOS_Init+0x3c>)
void MX_FREERTOS_Init(void) {
 800279c:	b08a      	sub	sp, #40	; 0x28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800279e:	4626      	mov	r6, r4
 80027a0:	466d      	mov	r5, sp
  osThreadDef(Usonic, StartTask02, osPriorityLow, 0, 128);
 80027a2:	3414      	adds	r4, #20
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80027a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a8:	6833      	ldr	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027aa:	2100      	movs	r1, #0
 80027ac:	4668      	mov	r0, sp
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80027ae:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027b0:	f7ff f9ac 	bl	8001b0c <osThreadCreate>
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <MX_FREERTOS_Init+0x40>)
  osThreadDef(Usonic, StartTask02, osPriorityLow, 0, 128);
 80027b6:	ad05      	add	r5, sp, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027b8:	6018      	str	r0, [r3, #0]
  osThreadDef(Usonic, StartTask02, osPriorityLow, 0, 128);
 80027ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027be:	6823      	ldr	r3, [r4, #0]
  UsonicHandle = osThreadCreate(osThread(Usonic), NULL);
 80027c0:	2100      	movs	r1, #0
 80027c2:	a805      	add	r0, sp, #20
  osThreadDef(Usonic, StartTask02, osPriorityLow, 0, 128);
 80027c4:	602b      	str	r3, [r5, #0]
  UsonicHandle = osThreadCreate(osThread(Usonic), NULL);
 80027c6:	f7ff f9a1 	bl	8001b0c <osThreadCreate>
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <MX_FREERTOS_Init+0x44>)
 80027cc:	6018      	str	r0, [r3, #0]
}
 80027ce:	b00a      	add	sp, #40	; 0x28
 80027d0:	bd70      	pop	{r4, r5, r6, pc}
 80027d2:	bf00      	nop
 80027d4:	08002f48 	.word	0x08002f48
 80027d8:	20003d7c 	.word	0x20003d7c
 80027dc:	20003d80 	.word	0x20003d80

080027e0 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80027e2:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
 80027ea:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
{
 80027ee:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80027f2:	4c1e      	ldr	r4, [pc, #120]	; (800286c <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80027f8:	4620      	mov	r0, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027fa:	9200      	str	r2, [sp, #0]
 80027fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002800:	f042 0202 	orr.w	r2, r2, #2
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
 8002806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002808:	f002 0202 	and.w	r2, r2, #2
 800280c:	9201      	str	r2, [sp, #4]
 800280e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
 8002818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281a:	f002 0201 	and.w	r2, r2, #1
 800281e:	9202      	str	r2, [sp, #8]
 8002820:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002824:	f042 0208 	orr.w	r2, r2, #8
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
 800282a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800282c:	f002 0208 	and.w	r2, r2, #8
 8002830:	9203      	str	r2, [sp, #12]
 8002832:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002836:	f042 0210 	orr.w	r2, r2, #16
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800283c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	9304      	str	r3, [sp, #16]
 8002846:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002848:	f7fe f808 	bl	800085c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800284c:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800284e:	a905      	add	r1, sp, #20
 8002850:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002852:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002854:	2301      	movs	r3, #1
 8002856:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800285e:	f7fd ff13 	bl	8000688 <HAL_GPIO_Init>

}
 8002862:	b00a      	add	sp, #40	; 0x28
 8002864:	bd10      	pop	{r4, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	40021000 	.word	0x40021000

08002870 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002870:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <SystemClock_Config+0xb8>)
 8002872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002874:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8002878:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
{
 800287c:	b0b8      	sub	sp, #224	; 0xe0
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002880:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002882:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002884:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800288e:	4b27      	ldr	r3, [pc, #156]	; (800292c <SystemClock_Config+0xbc>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289a:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800289c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028a0:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028a2:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028a8:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028aa:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028ac:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028b8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 80028ba:	23d8      	movs	r3, #216	; 0xd8
 80028bc:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028be:	f7fe f80f 	bl	80008e0 <HAL_RCC_OscConfig>
 80028c2:	b100      	cbz	r0, 80028c6 <SystemClock_Config+0x56>
 80028c4:	e7fe      	b.n	80028c4 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80028c6:	f7fd ffd3 	bl	8000870 <HAL_PWREx_EnableOverDrive>
 80028ca:	b100      	cbz	r0, 80028ce <SystemClock_Config+0x5e>
 80028cc:	e7fe      	b.n	80028cc <SystemClock_Config+0x5c>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028d2:	250f      	movs	r5, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d4:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80028d6:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028d8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80028de:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028e0:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028e2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028e4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80028e6:	f7fe f9bd 	bl	8000c64 <HAL_RCC_ClockConfig>
 80028ea:	b100      	cbz	r0, 80028ee <SystemClock_Config+0x7e>
 80028ec:	e7fe      	b.n	80028ec <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80028ee:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028f0:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028f2:	9026      	str	r0, [sp, #152]	; 0x98
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028f4:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80028f6:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028f8:	f7fe fa96 	bl	8000e28 <HAL_RCCEx_PeriphCLKConfig>
 80028fc:	4604      	mov	r4, r0
 80028fe:	b100      	cbz	r0, 8002902 <SystemClock_Config+0x92>
 8002900:	e7fe      	b.n	8002900 <SystemClock_Config+0x90>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002902:	f7fe fa4d 	bl	8000da0 <HAL_RCC_GetHCLKFreq>
 8002906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290a:	fbb0 f0f3 	udiv	r0, r0, r3
 800290e:	f7fd fe99 	bl	8000644 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002912:	4630      	mov	r0, r6
 8002914:	f7fd feac 	bl	8000670 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002918:	4622      	mov	r2, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f7fd fe4c 	bl	80005bc <HAL_NVIC_SetPriority>
}
 8002924:	b038      	add	sp, #224	; 0xe0
 8002926:	bd70      	pop	{r4, r5, r6, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	40007000 	.word	0x40007000

08002930 <main>:
{
 8002930:	b580      	push	{r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002932:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002936:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800293a:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <main+0xa0>)
 800293c:	2100      	movs	r1, #0
 800293e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002948:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800294a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800294e:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8002952:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002956:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800295a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800295e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002962:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002966:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800296a:	07a5      	lsls	r5, r4, #30
 800296c:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800296e:	ea02 0e06 	and.w	lr, r2, r6
 8002972:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002974:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002976:	ea4e 0700 	orr.w	r7, lr, r0
      } while (ways--);
 800297a:	3901      	subs	r1, #1
 800297c:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002980:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 8002984:	1c4f      	adds	r7, r1, #1
 8002986:	d1f6      	bne.n	8002976 <main+0x46>
 8002988:	3a20      	subs	r2, #32
    } while(sets--);
 800298a:	f112 0f20 	cmn.w	r2, #32
 800298e:	d1ee      	bne.n	800296e <main+0x3e>
 8002990:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800299a:	615a      	str	r2, [r3, #20]
 800299c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029a0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80029a4:	f7fd fdd4 	bl	8000550 <HAL_Init>
  SystemClock_Config();
 80029a8:	f7ff ff62 	bl	8002870 <SystemClock_Config>
  MX_GPIO_Init();
 80029ac:	f7ff ff18 	bl	80027e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80029b0:	f000 f8c2 	bl	8002b38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80029b4:	f000 f8e2 	bl	8002b7c <MX_USART2_UART_Init>
  xprintf_init(&huart2);
 80029b8:	4806      	ldr	r0, [pc, #24]	; (80029d4 <main+0xa4>)
 80029ba:	f000 f957 	bl	8002c6c <xprintf_init>
  xdev_out(uart_putc);
 80029be:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <main+0xa8>)
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <main+0xac>)
 80029c2:	601a      	str	r2, [r3, #0]
  MX_FREERTOS_Init();
 80029c4:	f7ff fee8 	bl	8002798 <MX_FREERTOS_Init>
  osKernelStart();
 80029c8:	f7ff f89b 	bl	8001b02 <osKernelStart>
 80029cc:	e7fe      	b.n	80029cc <main+0x9c>
 80029ce:	bf00      	nop
 80029d0:	e000ed00 	.word	0xe000ed00
 80029d4:	20003e40 	.word	0x20003e40
 80029d8:	08002c4d 	.word	0x08002c4d
 80029dc:	20003eb4 	.word	0x20003eb4

080029e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80029e0:	6802      	ldr	r2, [r0, #0]
 80029e2:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d101      	bne.n	80029ec <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80029e8:	f7fd bdc4 	b.w	8000574 <HAL_IncTick>
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40001400 	.word	0x40001400

080029f4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80029f4:	e7fe      	b.n	80029f4 <_Error_Handler>

080029f6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f7fd fdcd 	bl	8000598 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	f06f 000b 	mvn.w	r0, #11
 8002a04:	4611      	mov	r1, r2
 8002a06:	f7fd fdd9 	bl	80005bc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f06f 000a 	mvn.w	r0, #10
 8002a10:	4611      	mov	r1, r2
 8002a12:	f7fd fdd3 	bl	80005bc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	f06f 0009 	mvn.w	r0, #9
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	f7fd fdcd 	bl	80005bc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	f06f 0004 	mvn.w	r0, #4
 8002a28:	4611      	mov	r1, r2
 8002a2a:	f7fd fdc7 	bl	80005bc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f06f 0003 	mvn.w	r0, #3
 8002a34:	4611      	mov	r1, r2
 8002a36:	f7fd fdc1 	bl	80005bc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	210f      	movs	r1, #15
 8002a3e:	f06f 0001 	mvn.w	r0, #1
 8002a42:	f7fd fdbb 	bl	80005bc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	210f      	movs	r1, #15
 8002a4a:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002a52:	f7fd bdb3 	b.w	80005bc <HAL_NVIC_SetPriority>
	...

08002a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a58:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8002a5a:	4601      	mov	r1, r0
{
 8002a5c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2037      	movs	r0, #55	; 0x37
 8002a62:	f7fd fdab 	bl	80005bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8002a66:	2037      	movs	r0, #55	; 0x37
 8002a68:	f7fd fde0 	bl	800062c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a6e:	a901      	add	r1, sp, #4
 8002a70:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002a74:	4c13      	ldr	r4, [pc, #76]	; (8002ac4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002a76:	f042 0220 	orr.w	r2, r2, #32
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	9302      	str	r3, [sp, #8]
 8002a84:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a86:	f7fe f9b1 	bl	8000dec <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a8a:	f7fe f98f 	bl	8000dac <HAL_RCC_GetPCLK1Freq>
  htim7.Instance = TIM7;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a90:	0040      	lsls	r0, r0, #1
  htim7.Instance = TIM7;
 8002a92:	6023      	str	r3, [r4, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8002a94:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002a98:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_InitTick+0x74>)
 8002a9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002aa0:	3801      	subs	r0, #1
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 8002aa2:	2300      	movs	r3, #0
  htim7.Init.Prescaler = uwPrescalerValue;
 8002aa4:	6060      	str	r0, [r4, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002aa6:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 8002aa8:	6123      	str	r3, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aaa:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002aac:	f7fe fd92 	bl	80015d4 <HAL_TIM_Base_Init>
 8002ab0:	b920      	cbnz	r0, 8002abc <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7fe fc67 	bl	8001386 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002ab8:	b008      	add	sp, #32
 8002aba:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002abc:	2001      	movs	r0, #1
 8002abe:	e7fb      	b.n	8002ab8 <HAL_InitTick+0x60>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	20003d90 	.word	0x20003d90
 8002ac8:	40001400 	.word	0x40001400
 8002acc:	000f4240 	.word	0x000f4240

08002ad0 <NMI_Handler>:
 8002ad0:	4770      	bx	lr

08002ad2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002ad2:	e7fe      	b.n	8002ad2 <HardFault_Handler>

08002ad4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002ad4:	e7fe      	b.n	8002ad4 <MemManage_Handler>

08002ad6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002ad6:	e7fe      	b.n	8002ad6 <BusFault_Handler>

08002ad8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002ad8:	e7fe      	b.n	8002ad8 <UsageFault_Handler>

08002ada <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002ada:	4770      	bx	lr

08002adc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8002adc:	f7ff b852 	b.w	8001b84 <osSystickHandler>

08002ae0 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ae0:	4801      	ldr	r0, [pc, #4]	; (8002ae8 <TIM7_IRQHandler+0x8>)
 8002ae2:	f7fe bc5f 	b.w	80013a4 <HAL_TIM_IRQHandler>
 8002ae6:	bf00      	nop
 8002ae8:	20003d90 	.word	0x20003d90

08002aec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aec:	490f      	ldr	r1, [pc, #60]	; (8002b2c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002aee:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <SystemInit+0x44>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002b06:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002b0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b12:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002b14:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <SystemInit+0x48>)
 8002b16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002b20:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b26:	608b      	str	r3, [r1, #8]
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000ed00 	.word	0xe000ed00
 8002b30:	40023800 	.word	0x40023800
 8002b34:	24003010 	.word	0x24003010

08002b38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b38:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8002b3a:	480d      	ldr	r0, [pc, #52]	; (8002b70 <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 115200;
 8002b3c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <MX_USART1_UART_Init+0x3c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b42:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8002b44:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b48:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b4a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b4c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b4e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b50:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b52:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b54:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b56:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b58:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b5a:	f7fe ffa0 	bl	8001a9e <HAL_UART_Init>
 8002b5e:	b128      	cbz	r0, 8002b6c <MX_USART1_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b60:	214f      	movs	r1, #79	; 0x4f
 8002b62:	4805      	ldr	r0, [pc, #20]	; (8002b78 <MX_USART1_UART_Init+0x40>)
  }

}
 8002b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002b68:	f7ff bf44 	b.w	80029f4 <_Error_Handler>
 8002b6c:	bd08      	pop	{r3, pc}
 8002b6e:	bf00      	nop
 8002b70:	20003dd0 	.word	0x20003dd0
 8002b74:	40011000 	.word	0x40011000
 8002b78:	08002fbc 	.word	0x08002fbc

08002b7c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b7c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8002b7e:	480d      	ldr	r0, [pc, #52]	; (8002bb4 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8002b80:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <MX_USART2_UART_Init+0x3c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b86:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8002b88:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b8e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b90:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b92:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b94:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b96:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b98:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b9a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b9c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b9e:	f7fe ff7e 	bl	8001a9e <HAL_UART_Init>
 8002ba2:	b128      	cbz	r0, 8002bb0 <MX_USART2_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ba4:	2164      	movs	r1, #100	; 0x64
 8002ba6:	4805      	ldr	r0, [pc, #20]	; (8002bbc <MX_USART2_UART_Init+0x40>)
  }

}
 8002ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002bac:	f7ff bf22 	b.w	80029f4 <_Error_Handler>
 8002bb0:	bd08      	pop	{r3, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20003e40 	.word	0x20003e40
 8002bb8:	40004400 	.word	0x40004400
 8002bbc:	08002fbc 	.word	0x08002fbc

08002bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8002bc0:	6803      	ldr	r3, [r0, #0]
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <HAL_UART_MspInit+0x78>)
 8002bc4:	4293      	cmp	r3, r2
{
 8002bc6:	b500      	push	{lr}
 8002bc8:	b089      	sub	sp, #36	; 0x24
  if(uartHandle->Instance==USART1)
 8002bca:	d11b      	bne.n	8002c04 <HAL_UART_MspInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bce:	a903      	add	r1, sp, #12
 8002bd0:	481b      	ldr	r0, [pc, #108]	; (8002c40 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd4:	f042 0210 	orr.w	r2, r2, #16
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	9301      	str	r3, [sp, #4]
 8002be2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002be4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002be8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bfa:	f7fd fd45 	bl	8000688 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bfe:	b009      	add	sp, #36	; 0x24
 8002c00:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(uartHandle->Instance==USART2)
 8002c04:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <HAL_UART_MspInit+0x84>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d1f9      	bne.n	8002bfe <HAL_UART_MspInit+0x3e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <HAL_UART_MspInit+0x7c>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c0c:	a903      	add	r1, sp, #12
 8002c0e:	480e      	ldr	r0, [pc, #56]	; (8002c48 <HAL_UART_MspInit+0x88>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002c22:	2360      	movs	r3, #96	; 0x60
 8002c24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c32:	2307      	movs	r3, #7
 8002c34:	9307      	str	r3, [sp, #28]
 8002c36:	e7e0      	b.n	8002bfa <HAL_UART_MspInit+0x3a>
 8002c38:	40011000 	.word	0x40011000
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40020400 	.word	0x40020400
 8002c44:	40004400 	.word	0x40004400
 8002c48:	40020c00 	.word	0x40020c00

08002c4c <uart_putc>:
	    c = buf[0];
	    return c;
	}

void uart_putc(uint8_t c)
	{
 8002c4c:	b507      	push	{r0, r1, r2, lr}
	 char buf[1];
	 buf[0] = c;
 8002c4e:	a902      	add	r1, sp, #8
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8002c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c54:	2201      	movs	r2, #1
	 buf[0] = c;
 8002c56:	f801 0d04 	strb.w	r0, [r1, #-4]!
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8002c5a:	4803      	ldr	r0, [pc, #12]	; (8002c68 <uart_putc+0x1c>)
 8002c5c:	6800      	ldr	r0, [r0, #0]
 8002c5e:	f7fe fd06 	bl	800166e <HAL_UART_Transmit>
	}
 8002c62:	b003      	add	sp, #12
 8002c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c68:	20003d88 	.word	0x20003d88

08002c6c <xprintf_init>:
	xdev_out(uart_putc);
 8002c6c:	4b02      	ldr	r3, [pc, #8]	; (8002c78 <xprintf_init+0xc>)
 8002c6e:	4a03      	ldr	r2, [pc, #12]	; (8002c7c <xprintf_init+0x10>)
 8002c70:	601a      	str	r2, [r3, #0]
	huart_xprintf = handler;
 8002c72:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <xprintf_init+0x14>)
 8002c74:	6018      	str	r0, [r3, #0]
 8002c76:	4770      	bx	lr
 8002c78:	20003eb4 	.word	0x20003eb4
 8002c7c:	08002c4d 	.word	0x08002c4d
 8002c80:	20003d88 	.word	0x20003d88

08002c84 <xputc>:
	    }
	}

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8002c84:	280a      	cmp	r0, #10
{
 8002c86:	b510      	push	{r4, lr}
 8002c88:	4604      	mov	r4, r0
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8002c8a:	d102      	bne.n	8002c92 <xputc+0xe>
 8002c8c:	200d      	movs	r0, #13
 8002c8e:	f7ff fff9 	bl	8002c84 <xputc>

	if (outptr) {
 8002c92:	4a07      	ldr	r2, [pc, #28]	; (8002cb0 <xputc+0x2c>)
 8002c94:	6813      	ldr	r3, [r2, #0]
 8002c96:	b11b      	cbz	r3, 8002ca0 <xputc+0x1c>
		*outptr++ = (unsigned char)c;
 8002c98:	1c59      	adds	r1, r3, #1
 8002c9a:	701c      	strb	r4, [r3, #0]
 8002c9c:	6011      	str	r1, [r2, #0]
		return;
 8002c9e:	bd10      	pop	{r4, pc}
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <xputc+0x30>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	b11b      	cbz	r3, 8002cae <xputc+0x2a>
 8002ca6:	4620      	mov	r0, r4
}
 8002ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (xfunc_out) xfunc_out((unsigned char)c);
 8002cac:	4718      	bx	r3
 8002cae:	bd10      	pop	{r4, pc}
 8002cb0:	20003d74 	.word	0x20003d74
 8002cb4:	20003eb4 	.word	0x20003eb4

08002cb8 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8002cb8:	b510      	push	{r4, lr}
 8002cba:	1e44      	subs	r4, r0, #1
	while (*str)
 8002cbc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002cc0:	b900      	cbnz	r0, 8002cc4 <xputs+0xc>
		xputc(*str++);
}
 8002cc2:	bd10      	pop	{r4, pc}
		xputc(*str++);
 8002cc4:	f7ff ffde 	bl	8002c84 <xputc>
 8002cc8:	e7f8      	b.n	8002cbc <xputs+0x4>

08002cca <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8002cca:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460d      	mov	r5, r1
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 8002cd2:	7810      	ldrb	r0, [r2, #0]
		if (!c) break;				/* End of format? */
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	f000 80cc 	beq.w	8002e72 <xvprintf+0x1a8>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8002cda:	2825      	cmp	r0, #37	; 0x25
 8002cdc:	d004      	beq.n	8002ce8 <xvprintf+0x1e>
		c = *fmt++;					/* Get a char */
 8002cde:	1c57      	adds	r7, r2, #1
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8002ce0:	f7ff ffd0 	bl	8002c84 <xputc>
 8002ce4:	462c      	mov	r4, r5
 8002ce6:	e052      	b.n	8002d8e <xvprintf+0xc4>
		c = *fmt++;					/* Get first char of the sequense */
 8002ce8:	7853      	ldrb	r3, [r2, #1]
		if (c == '0') {				/* Flag: '0' padded */
 8002cea:	2b30      	cmp	r3, #48	; 0x30
 8002cec:	d128      	bne.n	8002d40 <xvprintf+0x76>
			f = 1; c = *fmt++;
 8002cee:	1cd7      	adds	r7, r2, #3
 8002cf0:	7893      	ldrb	r3, [r2, #2]
 8002cf2:	2601      	movs	r6, #1
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8002cf4:	f04f 0800 	mov.w	r8, #0
			w = w * 10 + c - '0';
 8002cf8:	210a      	movs	r1, #10
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8002cfa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002cfe:	2a09      	cmp	r2, #9
 8002d00:	d927      	bls.n	8002d52 <xvprintf+0x88>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8002d02:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8002d06:	2a4c      	cmp	r2, #76	; 0x4c
			f |= 4; c = *fmt++;
 8002d08:	bf02      	ittt	eq
 8002d0a:	783b      	ldrbeq	r3, [r7, #0]
 8002d0c:	f046 0604 	orreq.w	r6, r6, #4
 8002d10:	3701      	addeq	r7, #1
		if (!c) break;				/* End of format? */
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80ad 	beq.w	8002e72 <xvprintf+0x1a8>
		if (d >= 'a') d -= 0x20;
 8002d18:	2b60      	cmp	r3, #96	; 0x60
 8002d1a:	bf8a      	itet	hi
 8002d1c:	f1a3 0220 	subhi.w	r2, r3, #32
 8002d20:	461a      	movls	r2, r3
 8002d22:	b2d2      	uxtbhi	r2, r2
		switch (d) {				/* Type is... */
 8002d24:	2a4f      	cmp	r2, #79	; 0x4f
 8002d26:	d035      	beq.n	8002d94 <xvprintf+0xca>
 8002d28:	d81a      	bhi.n	8002d60 <xvprintf+0x96>
 8002d2a:	2a43      	cmp	r2, #67	; 0x43
 8002d2c:	f000 808a 	beq.w	8002e44 <xvprintf+0x17a>
 8002d30:	2a44      	cmp	r2, #68	; 0x44
 8002d32:	f000 8090 	beq.w	8002e56 <xvprintf+0x18c>
 8002d36:	2a42      	cmp	r2, #66	; 0x42
 8002d38:	f000 808b 	beq.w	8002e52 <xvprintf+0x188>
			xputc(c); continue;
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	e7cf      	b.n	8002ce0 <xvprintf+0x16>
			if (c == '-') {			/* Flag: left justified */
 8002d40:	2b2d      	cmp	r3, #45	; 0x2d
		c = *fmt++;					/* Get first char of the sequense */
 8002d42:	bf19      	ittee	ne
 8002d44:	1c97      	addne	r7, r2, #2
		f = 0;
 8002d46:	2600      	movne	r6, #0
				f = 2; c = *fmt++;
 8002d48:	1cd7      	addeq	r7, r2, #3
 8002d4a:	7893      	ldrbeq	r3, [r2, #2]
 8002d4c:	bf08      	it	eq
 8002d4e:	2602      	moveq	r6, #2
 8002d50:	e7d0      	b.n	8002cf4 <xvprintf+0x2a>
			w = w * 10 + c - '0';
 8002d52:	fb01 3808 	mla	r8, r1, r8, r3
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8002d56:	f817 3b01 	ldrb.w	r3, [r7], #1
			w = w * 10 + c - '0';
 8002d5a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8002d5e:	e7cc      	b.n	8002cfa <xvprintf+0x30>
		switch (d) {				/* Type is... */
 8002d60:	2a55      	cmp	r2, #85	; 0x55
 8002d62:	d078      	beq.n	8002e56 <xvprintf+0x18c>
 8002d64:	2a58      	cmp	r2, #88	; 0x58
 8002d66:	d072      	beq.n	8002e4e <xvprintf+0x184>
 8002d68:	2a53      	cmp	r2, #83	; 0x53
 8002d6a:	d1e7      	bne.n	8002d3c <xvprintf+0x72>
			p = va_arg(arp, char*);
 8002d6c:	f8d5 9000 	ldr.w	r9, [r5]
 8002d70:	1d2c      	adds	r4, r5, #4
			for (j = 0; p[j]; j++) ;
 8002d72:	464b      	mov	r3, r9
 8002d74:	eba3 0509 	sub.w	r5, r3, r9
 8002d78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	d1f9      	bne.n	8002d74 <xvprintf+0xaa>
			while (!(f & 2) && j++ < w) xputc(' ');
 8002d80:	07b0      	lsls	r0, r6, #30
 8002d82:	d554      	bpl.n	8002e2e <xvprintf+0x164>
			xputs(p);
 8002d84:	4648      	mov	r0, r9
 8002d86:	f7ff ff97 	bl	8002cb8 <xputs>
			while (j++ < w) xputc(' ');
 8002d8a:	45a8      	cmp	r8, r5
 8002d8c:	d855      	bhi.n	8002e3a <xvprintf+0x170>
			xputc(c); continue;
 8002d8e:	4625      	mov	r5, r4
 8002d90:	463a      	mov	r2, r7
 8002d92:	e79e      	b.n	8002cd2 <xvprintf+0x8>
			r = 8; break;
 8002d94:	2008      	movs	r0, #8
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8002d96:	2a44      	cmp	r2, #68	; 0x44
 8002d98:	6829      	ldr	r1, [r5, #0]
 8002d9a:	f105 0404 	add.w	r4, r5, #4
 8002d9e:	d104      	bne.n	8002daa <xvprintf+0xe0>
		if (d == 'D' && (v & 0x80000000)) {
 8002da0:	2900      	cmp	r1, #0
			v = 0 - v;
 8002da2:	bfbc      	itt	lt
 8002da4:	4249      	neglt	r1, r1
			f |= 8;
 8002da6:	f046 0608 	orrlt.w	r6, r6, #8
 8002daa:	2b78      	cmp	r3, #120	; 0x78
		}
		i = 0;
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	bf0c      	ite	eq
 8002db2:	f04f 0c27 	moveq.w	ip, #39	; 0x27
 8002db6:	f04f 0c07 	movne.w	ip, #7
		do {
			d = (char)(v % r); v /= r;
 8002dba:	fbb1 fef0 	udiv	lr, r1, r0
 8002dbe:	fb00 151e 	mls	r5, r0, lr, r1
 8002dc2:	4671      	mov	r1, lr
 8002dc4:	b2eb      	uxtb	r3, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8002dc6:	2d09      	cmp	r5, #9
			s[i++] = d + '0';
 8002dc8:	f102 0501 	add.w	r5, r2, #1
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8002dcc:	bf84      	itt	hi
 8002dce:	4463      	addhi	r3, ip
 8002dd0:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 8002dd2:	3330      	adds	r3, #48	; 0x30
 8002dd4:	f80d 3002 	strb.w	r3, [sp, r2]
		} while (v && i < sizeof(s));
 8002dd8:	f1be 0f00 	cmp.w	lr, #0
 8002ddc:	d002      	beq.n	8002de4 <xvprintf+0x11a>
 8002dde:	2d10      	cmp	r5, #16
 8002de0:	d13b      	bne.n	8002e5a <xvprintf+0x190>
 8002de2:	220f      	movs	r2, #15
		if (f & 8) s[i++] = '-';
 8002de4:	0731      	lsls	r1, r6, #28
 8002de6:	d505      	bpl.n	8002df4 <xvprintf+0x12a>
 8002de8:	ab04      	add	r3, sp, #16
 8002dea:	441d      	add	r5, r3
 8002dec:	232d      	movs	r3, #45	; 0x2d
 8002dee:	f805 3c10 	strb.w	r3, [r5, #-16]
 8002df2:	1c95      	adds	r5, r2, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8002df4:	f016 0f01 	tst.w	r6, #1
 8002df8:	46a9      	mov	r9, r5
 8002dfa:	bf14      	ite	ne
 8002dfc:	f04f 0a30 	movne.w	sl, #48	; 0x30
 8002e00:	f04f 0a20 	moveq.w	sl, #32
		while (!(f & 2) && j++ < w) xputc(d);
 8002e04:	07b3      	lsls	r3, r6, #30
 8002e06:	d52e      	bpl.n	8002e66 <xvprintf+0x19c>
		do xputc(s[--i]); while(i);
 8002e08:	3d01      	subs	r5, #1
 8002e0a:	f81d 0005 	ldrb.w	r0, [sp, r5]
 8002e0e:	f7ff ff39 	bl	8002c84 <xputc>
 8002e12:	2d00      	cmp	r5, #0
 8002e14:	d1f8      	bne.n	8002e08 <xvprintf+0x13e>
		while (j++ < w) xputc(' ');
 8002e16:	45c8      	cmp	r8, r9
 8002e18:	d9b9      	bls.n	8002d8e <xvprintf+0xc4>
 8002e1a:	2020      	movs	r0, #32
 8002e1c:	f109 0901 	add.w	r9, r9, #1
 8002e20:	f7ff ff30 	bl	8002c84 <xputc>
 8002e24:	e7f7      	b.n	8002e16 <xvprintf+0x14c>
			while (!(f & 2) && j++ < w) xputc(' ');
 8002e26:	4635      	mov	r5, r6
 8002e28:	2020      	movs	r0, #32
 8002e2a:	f7ff ff2b 	bl	8002c84 <xputc>
 8002e2e:	4545      	cmp	r5, r8
 8002e30:	f105 0601 	add.w	r6, r5, #1
 8002e34:	d3f7      	bcc.n	8002e26 <xvprintf+0x15c>
 8002e36:	4635      	mov	r5, r6
 8002e38:	e7a4      	b.n	8002d84 <xvprintf+0xba>
			while (j++ < w) xputc(' ');
 8002e3a:	2020      	movs	r0, #32
 8002e3c:	3501      	adds	r5, #1
 8002e3e:	f7ff ff21 	bl	8002c84 <xputc>
 8002e42:	e7a2      	b.n	8002d8a <xvprintf+0xc0>
			xputc((char)va_arg(arp, int)); continue;
 8002e44:	7828      	ldrb	r0, [r5, #0]
 8002e46:	1d2c      	adds	r4, r5, #4
 8002e48:	f7ff ff1c 	bl	8002c84 <xputc>
 8002e4c:	e79f      	b.n	8002d8e <xvprintf+0xc4>
			r = 16; break;
 8002e4e:	2010      	movs	r0, #16
 8002e50:	e7a1      	b.n	8002d96 <xvprintf+0xcc>
			r = 2; break;
 8002e52:	2002      	movs	r0, #2
 8002e54:	e79f      	b.n	8002d96 <xvprintf+0xcc>
			r = 10; break;
 8002e56:	200a      	movs	r0, #10
 8002e58:	e79d      	b.n	8002d96 <xvprintf+0xcc>
 8002e5a:	462a      	mov	r2, r5
 8002e5c:	e7ad      	b.n	8002dba <xvprintf+0xf0>
		while (!(f & 2) && j++ < w) xputc(d);
 8002e5e:	46b1      	mov	r9, r6
 8002e60:	4650      	mov	r0, sl
 8002e62:	f7ff ff0f 	bl	8002c84 <xputc>
 8002e66:	45c1      	cmp	r9, r8
 8002e68:	f109 0601 	add.w	r6, r9, #1
 8002e6c:	d3f7      	bcc.n	8002e5e <xvprintf+0x194>
 8002e6e:	46b1      	mov	r9, r6
 8002e70:	e7ca      	b.n	8002e08 <xvprintf+0x13e>
	}
}
 8002e72:	b004      	add	sp, #16
 8002e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002e78 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8002e78:	b40f      	push	{r0, r1, r2, r3}
 8002e7a:	b507      	push	{r0, r1, r2, lr}
 8002e7c:	a904      	add	r1, sp, #16
 8002e7e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list arp;


	va_start(arp, fmt);
 8002e82:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 8002e84:	f7ff ff21 	bl	8002cca <xvprintf>
	va_end(arp);
}
 8002e88:	b003      	add	sp, #12
 8002e8a:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e8e:	b004      	add	sp, #16
 8002e90:	4770      	bx	lr
	...

08002e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ecc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e9a:	e003      	b.n	8002ea4 <LoopCopyDataInit>

08002e9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ea0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ea2:	3104      	adds	r1, #4

08002ea4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ea4:	480b      	ldr	r0, [pc, #44]	; (8002ed4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ea8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002eaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002eac:	d3f6      	bcc.n	8002e9c <CopyDataInit>
  ldr  r2, =_sbss
 8002eae:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002eb0:	e002      	b.n	8002eb8 <LoopFillZerobss>

08002eb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002eb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002eb4:	f842 3b04 	str.w	r3, [r2], #4

08002eb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002eba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ebc:	d3f9      	bcc.n	8002eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ebe:	f7ff fe15 	bl	8002aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ec2:	f000 f811 	bl	8002ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ec6:	f7ff fd33 	bl	8002930 <main>
  bx  lr    
 8002eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ecc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002ed0:	08002fdc 	.word	0x08002fdc
  ldr  r0, =_sdata
 8002ed4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ed8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002edc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002ee0:	20003eb8 	.word	0x20003eb8

08002ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee4:	e7fe      	b.n	8002ee4 <ADC_IRQHandler>
	...

08002ee8 <__libc_init_array>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	4e0d      	ldr	r6, [pc, #52]	; (8002f20 <__libc_init_array+0x38>)
 8002eec:	4c0d      	ldr	r4, [pc, #52]	; (8002f24 <__libc_init_array+0x3c>)
 8002eee:	1ba4      	subs	r4, r4, r6
 8002ef0:	10a4      	asrs	r4, r4, #2
 8002ef2:	2500      	movs	r5, #0
 8002ef4:	42a5      	cmp	r5, r4
 8002ef6:	d109      	bne.n	8002f0c <__libc_init_array+0x24>
 8002ef8:	4e0b      	ldr	r6, [pc, #44]	; (8002f28 <__libc_init_array+0x40>)
 8002efa:	4c0c      	ldr	r4, [pc, #48]	; (8002f2c <__libc_init_array+0x44>)
 8002efc:	f000 f818 	bl	8002f30 <_init>
 8002f00:	1ba4      	subs	r4, r4, r6
 8002f02:	10a4      	asrs	r4, r4, #2
 8002f04:	2500      	movs	r5, #0
 8002f06:	42a5      	cmp	r5, r4
 8002f08:	d105      	bne.n	8002f16 <__libc_init_array+0x2e>
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}
 8002f0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f10:	4798      	blx	r3
 8002f12:	3501      	adds	r5, #1
 8002f14:	e7ee      	b.n	8002ef4 <__libc_init_array+0xc>
 8002f16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f1a:	4798      	blx	r3
 8002f1c:	3501      	adds	r5, #1
 8002f1e:	e7f2      	b.n	8002f06 <__libc_init_array+0x1e>
 8002f20:	08002fd4 	.word	0x08002fd4
 8002f24:	08002fd4 	.word	0x08002fd4
 8002f28:	08002fd4 	.word	0x08002fd4
 8002f2c:	08002fd8 	.word	0x08002fd8

08002f30 <_init>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	bf00      	nop
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr

08002f3c <_fini>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	bf00      	nop
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr
