/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f7xx_hal.h"
#include "dma.h"
#include "i2c.h"
#include "iwdg.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include "management.h"
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
TIM_Encoder_InitTypeDef sConfig;
TIM_MasterConfigTypeDef sMasterConfig;
TIM_OC_InitTypeDef sConfigOC;
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
arm_pid_instance_f32 pidstruct_encorder1;
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
long map(long x, long in_min, long in_max, long out_min, long out_max) ;
void main_run();
void sens_test();
void comu_test();
void test_mode();
void demo_mode();
void calib_mode();
void motor_move(uint8_t comand,uint8_t dig1,uint8_t dig2,uint8_t power1a,uint8_t power2a);
int max(int a,int b);
void printLCD();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
#define Servonumber 5
#define debug 1
uint8_t Flug_Rxdata=0;
uint8_t Rxbuf[Servonumber+10];
uint8_t TPIPConnect=0,Rxdetatemp=0;
uint8_t data[Servonumber+9],tempdata[Servonumber+9];
uint8_t SW[5];
uint8_t mode;
uint8_t motor[5];
int16_t servodata[Servonumber]={90};
int16_t servotemp[Servonumber]={90};
uint32_t uwDirectionCount1 = 0;
uint32_t uwDirectionCount2 = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	 if(Rxdetatemp!=data[Servonumber+8] || HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_1)==0){
		 TPIPConnect=1;
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,1);
	 }
	 else{
		 TPIPConnect=0;
		 HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
	 }
	 Rxdetatemp=data[Servonumber+8];
}
/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */
	//Tim1 12KHz
	//Tim3 12Khz
	//Tim5 12Khz
	//Tim2 50Hz
	//Tim4 50Hz
	//Tim9 50Hz
	//Tim6 20Hz

  /* USER CODE END 1 */

  /* Enable I-Cache-------------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache-------------------------------------------------------------*/
  SCB_EnableDCache();

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_I2C2_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_TIM2_Init();
  MX_TIM4_Init();
  MX_TIM8_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM6_Init();
  MX_TIM9_Init();
  MX_TIM5_Init();
  MX_TIM12_Init();
  MX_TIM11_Init();
  MX_TIM10_Init();
  MX_I2C1_Init();
 // MX_IWDG_Init();

  /* USER CODE BEGIN 2 */
  xdev_out(uart_putc);
  if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_1)==1){
  	  MX_IWDG_Init();
  	}
  	else{
  		beep(10,30,30);
  	}
  servo(90,90,90,90,90,90,90,90,90,90);
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15,0);
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,0);
  oled_i2c_to_oled(&hi2c2);
  JY901_init(&hi2c2);
  init_xprintf(&huart2);
  oled_returnhome();
  oled_puts("Is The Order a");
  oled_setcursor(1,2);
  oled_puts("Rescue Robot?");
  HAL_Delay(1000);
  HAL_IWDG_Refresh(&hiwdg);
  HAL_TIM_Base_Start_IT(&htim6);
  if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)Rxbuf,(Servonumber+7+3)) != HAL_OK)
     {
       Error_Handler();
     }
    if(HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
       {
         Error_Handler();
       }
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
    TIM5->CNT=3000;
    if(HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
      {
        Error_Handler();
      }
    HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
    TIM8->CNT=3000;
    oled_clear();
	HAL_IWDG_Refresh(&hiwdg);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  mofu:
	  mode=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_0)+(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)*2)
			  +(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)*4);
	  switch(mode){
	  case 1:
		  if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
			  HOUI_def=JY901_def_set();
			    TIM5->CNT=30000;
			    TIM8->CNT=30000;
			    uint16_t timeout=0;
			    while(encordermotor1(0) && timeout<5000){
			    	timeout++;
			    	(1);
			    HAL_IWDG_Refresh(&hiwdg);
			    }
			    timeout=0;
			    while(encordermotor2(0) && timeout<5000){
			    	timeout++;
			    	HAL_Delay(1);
			    HAL_IWDG_Refresh(&hiwdg);
			    }
			    timeout=0;
			  while(TPIPConnect==0){
			  	motor_move(0,0,0,0,0);
			    oled_returnhome();
			    oled_puts("main_run select ");
			    oled_setcursor(1,0);
			    oled_puts("waiting for TPIP");
			    /*xprintf(" S1=%d",HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3));
			    xprintf(" S2=%d",HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1));
			    xprintf(" S3=%d",HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_12));
			    xprintf(" S4=%d",HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10));*/
				xprintf(" 0=%d",Rxbuf[0]);
				xprintf(" 1=%d",Rxbuf[1]);
				xprintf(" 2=%d",Rxbuf[2]);
				xprintf(" 3=%d",Rxbuf[3]);
				xprintf(" 4=%d",Rxbuf[4]);
				xprintf(" 5=%d",Rxbuf[5]);
				xprintf(" 6=%d",Rxbuf[6]);
				xprintf(" 7=%d",Rxbuf[7]);
				xprintf(" 8=%d",Rxbuf[8]);
				xprintf(" 9=%d",Rxbuf[9]);
				xprintf(" 10=%d",Rxbuf[10]);
				xprintf(" 11=%d",Rxbuf[11]);
				xprintf(" 12=%d",Rxbuf[12]);
				xprintf(" 13=%d",Rxbuf[13]);
				xprintf(" 14=%d\r\n",Rxbuf[14]);
			  	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==0){goto mofu;}
			  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
			    HAL_IWDG_Refresh(&hiwdg);
			  	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
			  	}
			  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,1);
			  	HAL_Delay(50);
			  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,0);
			  	HAL_Delay(50);
			  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,1);
			  	HAL_Delay(50);
			  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,0);
			  	HAL_Delay(50);
			  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,1);
			  	HAL_Delay(50);
			  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,0);
			  	while(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
			  		if(TPIPConnect==1){
			  		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
			  		main_run();
			  		if(data[Servonumber+8]%10==0){
			  		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,1);
			  		}
			  		if(data[Servonumber+8]%10==5){
			  		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,0);
			  		}
			  	  }
			  	  else{
			  			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
			  			motor_move(0,0,0,0,0);
			  			servo(servotemp[0],servotemp[1],servotemp[2],servotemp[3],servotemp[4],
			  				0,0,0,0,0);
			  			oled_returnhome();
			  			oled_puts("main_run select");
			  			oled_setcursor(1,0);
			  			oled_puts("lost connection!");
			  			for(int i=0;i<(Servonumber+10);i++){
			  				xprintf(" %d)%d",i,Rxbuf[i]);
			  			}
			  			xprintf("\r\n");
			  		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,1);
			  		 HAL_Delay(300);
			  		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,0);
			  		 HAL_Delay(100);
			  	  }
			  	  HAL_IWDG_Refresh(&hiwdg);
			  	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
			  }
		  		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,0);
	  			motor_move(0,0,0,0,0);
	  			servo(servotemp[0],servotemp[1],servotemp[2],servotemp[3],servotemp[4],
	  				0,0,0,0,0);
		  }
		  else{
			  oled_returnhome();
			  oled_puts("main_run select");
			  oled_setcursor(1,0);
			  oled_puts("OK?     waiting ");
			  HAL_Delay(5);
			  HAL_IWDG_Refresh(&hiwdg);
		  }
	  break;

	  case 2:
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
				HOUI_def=JY901_def_set();
			    TIM5->CNT=30000;
			    TIM8->CNT=30000;
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
				while(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
				oled_returnhome();
				oled_puts("Comu test select");
				oled_setcursor(1,0);
				oled_puts("Runnning         ");
				comu_test();
				HAL_IWDG_Refresh(&hiwdg);
				HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
			}
				motor_move(0,0,0,0,0);
				servo(90,90,90,90,90,90,0,0,0,0);
			}
			else{
				oled_returnhome();
				oled_puts("Comu test select");
				oled_setcursor(1,0);
				oled_puts("OK?     waiting ");
				HAL_IWDG_Refresh(&hiwdg);
				HAL_Delay(5);
			}
	  break;

	  case 3:
		  if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
			  HOUI_def=JY901_def_set();
			    TIM5->CNT=30000;
			    TIM8->CNT=30000;
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
			  	while(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
			  	oled_returnhome();
			  	oled_puts("sens_test select");
			  	oled_setcursor(1,0);
			  	oled_puts("Running          ");
				sens_test();
				  HAL_IWDG_Refresh(&hiwdg);
			  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
			  }
				motor_move(0,0,0,0,0);
				servo(90,90,90,90,90,90,0,0,0,0);
		  }
		  else{
				oled_returnhome();
				oled_puts("sens_test select");
				oled_setcursor(1,0);
				oled_puts("OK?     waiting ");
				  HAL_IWDG_Refresh(&hiwdg);
				HAL_Delay(5);
		  }
	  break;

	  case 4:
		  if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
			  HOUI_def=JY901_def_set();
			    TIM5->CNT=30000;
			    TIM8->CNT=30000;
			    while(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
			    	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
			    	oled_returnhome();
			    	oled_puts("test mode select");
			    	oled_setcursor(1,0);
			    	oled_puts("Ruuning         ");
			    	  HAL_IWDG_Refresh(&hiwdg);
					HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
					test_mode();
			     }
				motor_move(0,0,0,0,0);
				servo(90,90,90,90,90,90,0,0,0,0);
		  }
		  else{
			oled_returnhome();
			oled_puts("test mode select");
			oled_setcursor(1,0);
			oled_puts("OK?     waiting ");
			  HAL_IWDG_Refresh(&hiwdg);
			HAL_Delay(5);
		  }
	  break;

	  case 5:
		  if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
			  HOUI_def=JY901_def_set();
			    TIM5->CNT=30000;
			    TIM8->CNT=30000;
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
				while(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
				oled_returnhome();
				oled_puts("demo mode select");
				oled_setcursor(1,0);
				oled_puts("Runnning         ");
				HAL_IWDG_Refresh(&hiwdg);
				HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
				demo_mode();
			}
				motor_move(0,0,0,0,0);
				servo(90,90,90,90,90,90,0,0,0,0);
		  }
		  else{
				oled_returnhome();
				oled_puts("demo mode select");
				oled_setcursor(1,0);
				oled_puts("OK?     waiting ");
				  HAL_IWDG_Refresh(&hiwdg);
				HAL_Delay(5);
		  }
	  break;

	  case 6:
			oled_returnhome();
			oled_puts("Calib select");
			oled_setcursor(1,0);
		  if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
			  calib_mode();
			  HAL_IWDG_Refresh(&hiwdg);
		  }
		  else{
				oled_puts("OK?     waiting ");
				HAL_Delay(5);
		  }
			motor_move(0,0,0,0,0);
			servo(90,90,90,90,90,90,0,0,0,0);
	  break;

	  default:
			oled_returnhome();
			oled_puts("select mode     ");
			oled_setcursor(1,0);
			oled_puts("           SURF ");
			motor_move(0,0,0,0,0);
			servo(90,90,90,90,90,90,0,0,0,0);
			  HAL_IWDG_Refresh(&hiwdg);
		   HAL_Delay(5);
	  break;
	  }
	  HAL_IWDG_Refresh(&hiwdg);
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */
void main_run(){
	HOUI=JY901_yaw_get(HOUI_def);
	motor_move(motor[0],motor[1],motor[2],motor[3],motor[4]);
	servo(servodata[0],servodata[1],servodata[2],servodata[3],servodata[4]
		,0,0,0,0,0);
	solenoid(data[Servonumber+7]);
	encordermotor1(data[5]);
	encordermotor2(data[6]);
	for(int tempnumber=0;tempnumber<Servonumber;tempnumber++){
	servotemp[tempnumber]=servodata[tempnumber];
	}
	if(Flug_Rxdata==1){
	oled_clear();
	oled_returnhome();
	oled_puts("main_run select");
	oled_setcursor(1,0);
	switch(motor[0]){
	case 150:
		oled_puts("Running   LS");
	break;
	case 200:
		oled_puts("Running   RS");
	break;
	case 100:
		printLCD();
	break;
	case 250:
		printLCD();
	break;
	case 50:
		printLCD();
	break;
	case 125:
		printLCD();
	break;
	default:
		oled_puts("Running");
	break;
	}
	if(debug==1){
	xprintf(" cmd=%d",motor[0]);
	xprintf(" dig=%d",digree);
	/*xprintf(" p1=%d",power1);
	xprintf(" p2=%d",power2);
	xprintf(" p3=%d",power3);
	xprintf(" p4=%d",power4);*/
	xprintf(" p=%d",power);
	xprintf(" E1=%d",TIM5->CNT);
	xprintf(" E2=%d",TIM8->CNT);
	xprintf(" D=%d",data[Servonumber+8]);
	xprintf(" H=%d\r\n",HOUI);
	}
	Flug_Rxdata=0;
	}

}

void sens_test(){
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
		motor_move(0,0,0,0,0);
		servo(90,90,90,90,90,0,0,0,0,0);
		HOUI=JY901_yaw_get(HOUI_def);
		uwDirectionCount1 = TIM5->CNT;
		uwDirectionCount2 = TIM8->CNT;
		xprintf(" jack=%d",HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_3));
		xprintf(" E1=%d E2=%d",(int)uwDirectionCount1,(int)uwDirectionCount2);
		xprintf(" SW_E1=%d%d",HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3),HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1));
		xprintf(" SW_E2=%d%d",HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_12),HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10));
		xprintf(" HOUIdef=%d",HOUI_def);
		xprintf(" HOUI=%d\r\n",HOUI);
}

void comu_test(){
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
		motor_move(0,0,0,0,0);
		servo(90,90,90,90,90,0,0,0,0,0);
		for(int i=0;i<(Servonumber+9);i++){
			xprintf(" data%d)%d",i,data[i]);
		}
		uint8_t tempbuf=0;
		tempbuf=(data[Servonumber+7] & 0b00000010)>>1;
		xprintf(" Solenoid=%d",tempbuf);
		tempbuf=(data[Servonumber+7] & 0b00000100)>>2;
		if(tempbuf==1){HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15,1);}
		else{HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15,0);}
		xprintf(" writedata=%d\r\n",tempbuf);
}

void test_mode(){
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
	motor_move(250,232,3,251,5);
	HAL_Delay(1000);
	motor_move(250,156,4,251,5);
	HAL_Delay(1000);
	/*motor_move(0,0,0,0,0);
	servo(90,90,90,90,90,0,0,0,0,0);
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_1)==0){
	while(encordermotor1(200)!=HAL_OK){
	xprintf("goto200 ");
	xprintf("encorder1=%d",TIM5->CNT);
	xprintf("encorder2=%d",TIM8->CNT);
	xprintf("\r\n");

	  HAL_IWDG_Refresh(&hiwdg);
	}
	HAL_Delay(200);
	HAL_IWDG_Refresh(&hiwdg);
	while(encordermotor1(1)!=HAL_OK){
		xprintf("goto1 ");
		xprintf("encorder1=%d",TIM5->CNT);
		xprintf("encorder2=%d",TIM8->CNT);
		xprintf("\r\n");
		  HAL_IWDG_Refresh(&hiwdg);
	}
	}
	xprintf("waiting");
	xprintf(" encorder1=%d",TIM5->CNT);
	xprintf(" encorder2=%d",TIM8->CNT);
	xprintf("\r\n");*/
}

void demo_mode(){
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
	servo(90,90,90,90,90,0,0,0,0,0);
	HOUI=JY901_yaw_get(HOUI_def);
	if(HOUI>= 5 && HOUI<=355){
		motor1(0,0);
		motor2(0,0);
		motor3(0,0);
		motor4(0,0);
		HAL_Delay(50);
		while(HOUI>=5 && HOUI<=355){
		HOUI=JY901_yaw_get(HOUI_def);
		if(HOUI<180){
		motor1(0,(int)map(HOUI,0,180,300,600));
		motor2(0,(int)map(HOUI,0,180,300,600));
		motor3((int)map(HOUI,0,180,300,600),0);
		motor4((int)map(HOUI,0,180,300,600),0);
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
		xprintf("LS now");
		xprintf(" speed= %d\r\n",(int)map(HOUI,0,180,70,300));
		}
		else{
			motor1((int)map(HOUI,359,180,300,600),0);
			motor2((int)map(HOUI,359,180,300,600),0);
			motor3(0,(int)map(HOUI,359,180,300,600));
			motor4(0,(int)map(HOUI,359,180,300,600));
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
			xprintf("RS now");
			xprintf(" speed= %d\r\n",(int)map(HOUI,359,180,70,300));
		}
		  HAL_IWDG_Refresh(&hiwdg);
		}
		motor1(0,0);
		motor2(0,0);
		motor3(0,0);
		motor4(0,0);
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
		HAL_Delay(50);
	}
	motor1(0,0);
	motor2(0,0);
	motor3(0,0);
	motor4(0,0);
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
	uwDirectionCount1 = TIM5->CNT;
	uwDirectionCount2 = TIM8->CNT;
	xprintf("E1=%d E2=%d",(int)uwDirectionCount1,(int)uwDirectionCount2);
	xprintf(" HOUI=%d\r\n",HOUI);
}

void calib_mode(){
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
	motor_move(0,0,0,0,0);
	while(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7)==1){
		oled_returnhome();
		oled_puts("Calib select    ");
		oled_setcursor(1,0);
		oled_puts("Running Press SW");
		HAL_Delay(5);
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_1)==0){	//press RS
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,1);
		oled_clear();
		oled_returnhome();
		oled_puts("Angular velocity");
		oled_setcursor(1,0);
		oled_puts("    Calibration ");
		JY901_calibration(1000,1);
		oled_clear();
		oled_returnhome();
		oled_puts("Magnetic");
		oled_setcursor(1,0);
		oled_puts(" Calibration  RS");
		xprintf("houi cab\r\n");
		motor_move(200,0,0,201,3);
		JY901_calibration(10000,2);
		oled_clear();
		oled_returnhome();
		oled_puts("Calibration End ");
		oled_setcursor(1,0);
		oled_puts("                ");
		motor_move(0,0,0,0,0);
		xprintf("cab end\r\n");
		JY901_calibration(100,3);
		xprintf("save\r\n");
		JY901_calibration(100,4);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,0);
	  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,1);
	  	HAL_Delay(200);
	  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,0);
	  	HAL_Delay(70);
	  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,1);
	  	HAL_Delay(200);
	  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,0);
	  	HAL_Delay(400);
	}

	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
    HAL_IWDG_Refresh(&hiwdg);
}
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
		int j = 0;
		while (Rxbuf[j] != 254 && j<(Servonumber + 9)) {
			j++;
		}
		if(j>=Servonumber+9){

			for (int k = 0; k < 7; k++) {
				data[k] = 0;
			}
			for(int k=7;k<(Servonumber+7);k++){
				data[k]=90;
			}
			data[Servonumber+7]=0;
			data[Servonumber+8]=0;

		}
		else {
			for (int k = 0; k < (Servonumber + 9); k++) {
				if ((j + k) >= Servonumber + 9) {
					data[k] = Rxbuf[k - (Servonumber + 9 - j)];
				}
				else {
					data[k] = Rxbuf[j + k + 1];
				}
			}
			motor[0]=data[0];
			motor[1]=data[1];
			motor[2]=data[2];
			motor[3]=data[3];
			motor[4]=data[4];

			for(int i=0;i<Servonumber;i++){
			servodata[i]=(int16_t)data[i+7];
			}
			Flug_Rxdata=1;
		}
		}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,1);
  }
  /* USER CODE END Error_Handler_Debug */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
