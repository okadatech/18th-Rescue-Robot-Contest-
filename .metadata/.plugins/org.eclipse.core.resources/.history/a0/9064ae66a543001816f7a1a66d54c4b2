/*
 * actuator.c
 *
 *  Created on: 2017/10/15
 *      Author: okada_tech
 */
#include "actuator.h"

uint32_t uwDirectionCounta = 0;


void pwm(uint32_t pwm1,uint32_t pwm2,uint32_t pwm3,uint32_t pwm4){
	  	  sConfigOC.Pulse = pwm1;
		  HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
		  sConfigOC.Pulse = pwm2;
		  HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2);
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
		  sConfigOC.Pulse = pwm3;
		  HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3);
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
		  sConfigOC.Pulse = pwm4;
		  HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4);
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
}

void slider(uint8_t cmd_bed,uint8_t speed_bed,uint8_t cmd_mechanism,uint8_t speed_mechanism){
	switch (cmd_bed) {
		case 10:
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
		break;

		case 100:
			sConfigOC.Pulse = (speed_bed-1)*4;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
		break;

		case 200:
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
			sConfigOC.Pulse = (speed_bed-1)*4;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
		break;

		default:
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
		break;
	}
	switch (cmd_mechanism) {
		case 10:
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
		break;

		case 100:
			sConfigOC.Pulse = (speed_mechanism-1)*4;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
		break;

		case 200:
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
			sConfigOC.Pulse = (speed_mechanism-1)*4;
			HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
		break;

		default:
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_3);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
			sConfigOC.Pulse = 0;
			HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_4);
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
		break;
	}
}


void servo(uint8_t a,uint8_t b,uint8_t c,uint8_t d,uint8_t e,uint8_t f,uint8_t g,uint8_t h,uint8_t i,uint8_t j)
{
		if(a>180){a=180;}
		if(b>180){b=180;}
		if(c>180){c=180;}
		if(d>180){d=180;}
		if(e>180){e=180;}
		if(f>180){f=180;}
		if(g>180){g=180;}
		if(h>180){h=180;}
		if(i>180){g=180;}
		if(j>180){h=180;}
		sConfigOC.Pulse = map_a(a,0,180,SERVO_LOW,SERVO_HIGH);
		HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
		sConfigOC.Pulse = map_a(b,0,180,SERVO_LOW,SERVO_HIGH);
		HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
		sConfigOC.Pulse = map_a(c,180,0,SERVO_LOW,SERVO_HIGH);
		HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
		sConfigOC.Pulse = map_a(d,0,180,330,1170);
		HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
		sConfigOC.Pulse = map_a(e,180,0,330,1170);
		HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1);
		HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
		sConfigOC.Pulse = map_a(f,0,180,SERVO_LOW,SERVO_HIGH);
		HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2);
		HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
		sConfigOC.Pulse = map_a(g,0,180,SERVO_LOW,SERVO_HIGH);
		HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1);
		HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
		sConfigOC.Pulse = map_a(h,0,180,SERVO_LOW,SERVO_HIGH);
		HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1);
		HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
		sConfigOC.Pulse = map_a(i,0,180,SERVO_LOW,SERVO_HIGH);
		HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1);
		HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
		sConfigOC.Pulse = map_a(j,0,180,SERVO_LOW,SERVO_HIGH);
		HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2);
		HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);

}

int encordermotor1(uint8_t place1){
	#define en1max 34000
	#define en1min 30000
	uint32_t placetemp1 =map_a(place1,0,250,en1min,en1max);
	uwDirectionCounta = TIM1->CNT;
	if(uwDirectionCounta<(placetemp1-5)){
		sConfigOC.Pulse = map_a((placetemp1 - uwDirectionCounta), 0, en1max-en1min, 500, 1000);
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
		{
			Error_Handler();
		}
		if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
		{
			Error_Handler();
		}
		sConfigOC.Pulse = 0;
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
		{
			Error_Handler();
		}
		if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
		{
			Error_Handler();
		}
		return 2;
	}
	else if(uwDirectionCounta>=(placetemp1+5)){
		sConfigOC.Pulse = 0;
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
		{
			Error_Handler();
		}
		if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
		{
			Error_Handler();
		}
		sConfigOC.Pulse =map_a((uwDirectionCounta - placetemp1), 0, en1max-en1min, 500, 1000);
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
		{
			Error_Handler();
		}
		if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
		{
			Error_Handler();
		}
		return 1;
	}
	else{
		sConfigOC.Pulse = 0;
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
		{
			Error_Handler();
		}
		if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
		{
			Error_Handler();
		}
		sConfigOC.Pulse = 0;
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
		{
			Error_Handler();
		}
		if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
		{
			Error_Handler();
		}
		return HAL_OK;
	}

}

void beep(uint8_t time,uint16_t on_time,uint16_t off_time){
	for(uint8_t fortime=0;fortime<time;fortime++){
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,1);
		HAL_Delay(on_time);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,0);
		HAL_Delay(off_time);
	}
}

long map_a(long x, long in_min, long in_max, long out_min, long out_max) {
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
