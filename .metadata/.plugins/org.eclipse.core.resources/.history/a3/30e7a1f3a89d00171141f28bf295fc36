/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f7xx_hal.h"
#include "dma.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include <math.h>
#define ARM_MATH_CM7
#include "arm_math.h"
#include "xprintf.h"
#include "i2c_lcd.h"
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
#define SERVO_LOW 380
#define SERVO_HIGH 1120
TIM_MasterConfigTypeDef sMasterConfig;
TIM_OC_InitTypeDef sConfigOC;
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void writeData(char t_data);
void writeCommand(char t_command);
void contrast_max();
void init_oled();
void servo(uint8_t a,uint8_t b,uint8_t c,uint8_t d,uint8_t e,uint8_t f,uint8_t g,uint8_t h,
		uint8_t i,uint8_t j);
long map(long x, long in_min, long in_max, long out_min, long out_max);
uint8_t uart_getc(void);
void uart_putc(uint8_t c);
void pwm(uint32_t pwm1,uint32_t pwm2,uint32_t pwm3,uint32_t pwm4);
void motor_move(uint8_t Rdata1,uint8_t Rdata2,uint8_t Ldata1,uint8_t Ldata2);
int environment();
void Calibration();
void setvolume(uint8_t volume);
void playmp3(uint8_t playnumber);
void stopmp3();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
#define servonumber 10
#define CCS811addr 0x5B<<1 // connected to GND
int motorL,motorR;
int tempR=0,tempL=0;
int counttime;
uint8_t Writedata[1];
uint8_t TPIPConnect=0;
uint8_t dataa[5];
uint8_t data[15],tempdata[15];
uint16_t HOUI,HOUI_def;
uint8_t cmd[10],yaw[2];
float32_t sinans[361] = {0};
float32_t cosans[361] = {0};
uint8_t Rxbuf[16];
uint8_t Rxdetatemp;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
		 counttime++;
	 if(Rxdetatemp!=data[servonumber+4] || HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0){
		 TPIPConnect=1;
		 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,1);
	 }
	 else{
		 TPIPConnect=0;
		 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_15);
	 }
	 Rxdetatemp=data[servonumber+4];
}

/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */
	//Tim1 14.4KHz
	//Tim2 50Hz
	//Tim4 50Hz
	//Tim6 20Hz
	//Tim9 50Hz
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM1_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  MX_I2C3_Init();
  MX_TIM4_Init();
  MX_TIM9_Init();
  MX_TIM6_Init();
  MX_USART3_UART_Init();

  /* USER CODE BEGIN 2 */
  	  //sinans[n] = arm_sin_f32(n*M_PI/180);
  	  //cosans[n] = arm_cos_f32(n*M_PI/180);

  	servo(90,90,90,90,90,90,90,90,90,90);
    motor_move(0,0,0,0);
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,0);
    xdev_out(uart_putc);
    setvolume(0xFF);
    cmd[0]=0xF4;
    HAL_I2C_Master_Transmit(&hi2c1,CCS811addr,(uint8_t*)cmd,1,0xf);
    cmd[0]=0x10;
    HAL_I2C_Mem_Write(&hi2c1,CCS811addr,0x01,I2C_MEMADD_SIZE_8BIT,(uint8_t*)cmd,1,0xf);
    HAL_TIM_Base_Start_IT(&htim6);
    if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)Rxbuf,16) != HAL_OK)
    {
    	Error_Handler();
    }
    oled_i2c_to_oled(&hi2c1);
    oled_returnhome();
    oled_puts("Is The Order a");
    oled_setcursor(1,2);
    oled_puts("Rescue Robot?");

    playmp3(1);

    HAL_Delay(1000);
    oled_clear();
   while(TPIPConnect==0){
	   if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==0){
		   if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)==0){
			   Calibration();
		   }
		   else{
		   oled_returnhome();
		   oled_puts("waiting for     ");
		   oled_setcursor(1,0);
		   oled_puts("Calibration     ");
		   servo(90,90,90,90,90,90,90,90,90,90);
		   motor_move(0,0,0,0);
		   HAL_Delay(12);
	   }
	   }
	   else{
	  oled_returnhome();
	  oled_puts("waiting for     ");
	  oled_setcursor(1,0);
	  oled_puts("      connection");
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
	  if((environment()&0x00000001)==1){
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,1);
	 }
	 else{
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,0);
	 }
	  xprintf(" 0=%d",Rxbuf[0]);
	  xprintf(" 1=%d",Rxbuf[1]);
	  xprintf(" 2=%d",Rxbuf[2]);
	  xprintf(" 3=%d",Rxbuf[3]);
	  xprintf(" 4=%d",Rxbuf[4]);
	  xprintf(" 5=%d",Rxbuf[5]);
	  xprintf(" 6=%d",Rxbuf[6]);
	  xprintf(" 7=%d",Rxbuf[7]);
	  xprintf(" 8=%d",Rxbuf[8]);
	  xprintf(" 9=%d",Rxbuf[9]);
	  xprintf(" 10=%d",Rxbuf[10]);
	  xprintf(" 11=%d",Rxbuf[11]);
	  xprintf(" 12=%d",Rxbuf[12]);
	  xprintf(" 13=%d",Rxbuf[13]);
	  xprintf(" 14=%d",Rxbuf[14]);
	  xprintf(" 15=%d\r\n",Rxbuf[15]);
	  servo(90,90,90,90,90,90,90,90,90,90);
	  motor_move(0,0,0,0);}
  }
    oled_clear();
    oled_returnhome();
    oled_puts("Connect to TPIP ");
    oled_setcursor(1,0);
    oled_puts("      Success!!!");
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,1);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,1);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,1);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
	HAL_Delay(200);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==0){
	 		   if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)==0){
	 			   Calibration();
	 		   }
	 		   else{
	 		   oled_returnhome();
	 		   oled_puts("waiting for     ");
	 		   oled_setcursor(1,0);
	 		   oled_puts("Calibration     ");
	 		   servo(90,90,90,90,90,90,90,90,90,90);
	 		   motor_move(0,0,0,0);
	 		   }
	  }
	  else{
	  if(TPIPConnect==1){

		  motor_move(data[0],data[1],data[2],data[3]);

		  if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)==0){//flont
			 if(data[4]<90){
				  servo(90,data[5],data[6],data[7],data[8],data[9],data[10],data[11],data[12],data[13]);
			 }
			 else{
				  servo(data[4],data[5],data[6],data[7],data[8],data[9],data[10],data[11],data[12],data[13]);
			 }
		  }
		  else if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_3)==0){//back
			 if(data[4]>90){
				 servo(90,data[5],data[6],data[7],data[8],data[9],data[10],data[11],data[12],data[13]);
			 }
			 else{
				 servo(data[4],data[5],data[6],data[7],data[8],data[9],data[10],data[11],data[12],data[13]);
			 }
		  }
		  else{
		  servo(data[4],data[5],data[6],data[7],data[8],data[9],data[10],data[11],data[12],data[13]);
		  }

		  //LCD•\Ž¦
		  oled_returnhome();
		  oled_puts("connection      ");
		  oled_setcursor(1,0);
		if(data[0]==10){
		if(data[2]==100){oled_puts("mR = 0  mL = +  ");}
		else if(data[2]==200){oled_puts("mR = 0  mL = -  ");}
		else if(data[2]==10){oled_puts("mR = 0  mL = 0 ");}
		}
		if(data[0]==100){
		if(data[2]==100){oled_puts("mR = +  mL = +  ");}
		else if(data[2]==200){oled_puts("mR = +  mL = -  ");}
		else if(data[2]==10){oled_puts("mR = +  mL = 0  ");}
		}
		if(data[0]==200){
		if(data[2]==100){oled_puts("mR = -  mL = +  ");}
		else if(data[2]==200){oled_puts("mR = -  mL = -  ");}
		else if(data[2]==10){oled_puts("mR = -  mL = 0  ");}
		}
		else{
			oled_puts("no data         ");
		}
		for(int count=0;count<15;count++){
			tempdata[count]=data[count];
		}

		if(counttime>200){
				  if((environment()&0x00000001)==1){
					  playmp3(2);
					  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,1);
				 }
				 else{
					  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,0);
					  playmp3(1);
				 }
					counttime=0;
					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
				}

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
	  }
	  else{
		  motor_move(0,0,0,0);
		  servo(90,tempdata[5],tempdata[6],tempdata[7],tempdata[8]
			   ,tempdata[9],tempdata[10],tempdata[11],tempdata[12],tempdata[13]);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);

		  oled_returnhome();
		  oled_puts("disconnection   ");
		  oled_setcursor(1,0);
		  oled_puts("all motor stop  ");

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,1);
		  HAL_Delay(300);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
		  HAL_Delay(100);
	  }
	 }
	  Writedata[0]=(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)*128)+(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_3)*64)
			  +(environment()*16);
	  xprintf(" count=%d",counttime);
	  xprintf(" SW1=%d",HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2));
	  xprintf(" SW2=%d",HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7));
	  xprintf(" mR=%d",motorL);
	  xprintf(" mL=%d",motorR);
	  /*xprintf(" D4=%d",data[4]);
	  xprintf(" D5=%d",data[5]);
	  xprintf(" D6=%d",data[6]);
	  xprintf(" D7=%d",data[7]);
	  xprintf(" D8=%d",data[8]);
	  xprintf(" D9=%d",data[9]);
	  xprintf(" D10=%d",data[10]);
	  xprintf(" D11=%d",data[11]);
	  xprintf(" D12=%d",data[12]);
	  xprintf(" D13=%d",data[13]);*/
	  xprintf(" D14=%d\r\n",data[14]);
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */

void motor_move(uint8_t Rdata1,uint8_t Rdata2,uint8_t Ldata1,uint8_t Ldata2){
	motorL = Ldata2-1;
	motorR = Rdata2-1;
	if(motorR<0){motorR=0;}
	if(motorL<0){motorL=0;}

	if(Rdata2>=0 && Ldata2>=0){
		if(Rdata1==10){
			if(Ldata1==10){pwm(1000,1000,1000,1000);
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);}
			else if(Ldata1==100){
				if(tempL==3){
					pwm(1000,1000,1000,1000);
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);
					HAL_Delay(80);
				  }
				  pwm(0,0,0,(motorR*4));tempL=2;
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
			  }
			  else if(Ldata1==200){
				  if(tempL==2){
					  pwm(1000,1000,1000,1000);
					  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);
					  HAL_Delay(80);
				  }
				  pwm(0,0,(motorR*4),0);tempL=3;
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
			  }
		  }
		  else if(Rdata1==100){
			  if(tempR==3){
				  pwm(1000,1000,1000,1000);
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);
				  HAL_Delay(80);
			  }
			  if(Ldata1==10){pwm(0,(motorL*4),0,0);
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);}
			  else if(Ldata1==100){
				  if(tempL==3){
				 	 pwm(1000,1000,1000,1000);
					  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);
				 	 HAL_Delay(80);
				   }
				  pwm(0,(motorL*4),0,(motorR*4));tempL=2;
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
			  }
			  else if(Ldata2==200){
				  if(tempL==2){
					  pwm(1000,1000,1000,1000);
					  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);
					  HAL_Delay(80);
				  }
				  pwm(0,(motorL*4),(motorR*4),0);tempL=3;
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
			  }
			  tempR=2;
		  }
		  else if(Rdata1==200){
			  if(tempR==2){
				  pwm(1000,1000,1000,1000);
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);
				  HAL_Delay(80);
			  }
			  if(Ldata1==10){
				  pwm((motorL*4),0,0,0);
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
			  }
			  else if(Ldata1==100){
				  if(tempL==3){
				 	pwm(1000,1000,1000,1000);
					  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);
				 	HAL_Delay(80);
				 	}
				  pwm((motorL*4),0,0,(motorR*4));tempL=2;
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
			  }
			  else if(Ldata1==200){
				  if(tempL==2){
					  pwm(1000,1000,1000,1000);
					  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);
					  HAL_Delay(80);
				  }
				  pwm((motorL*4),0,(motorR*4),0);tempL=3;
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
			  }
			  tempR=3;
		  }
		  else{
			  pwm(1000,1000,1000,1000);
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);
			  tempR=0;
			  tempL=0;
		  }
		  }
		  else{
			  pwm(1000,1000,1000,1000);
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);
			  tempR=0;
			  tempL=0;
		  }
}

void pwm(uint32_t pwm1,uint32_t pwm2,uint32_t pwm3,uint32_t pwm4){
	  	  sConfigOC.Pulse = pwm1;
		  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
		  {
		    Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
		  {
		    Error_Handler();
		  }
		  sConfigOC.Pulse = pwm2;
		  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
		  {
		    Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
		  {
		    Error_Handler();
		  }
		  sConfigOC.Pulse = pwm3;
		  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
		  {
		   Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
		  {
		   Error_Handler();
		  }
		  sConfigOC.Pulse = pwm4;
		  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
		  {
		   Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
		  {
		   Error_Handler();
		  }
}

void servo(uint8_t a,uint8_t b,uint8_t c,uint8_t d,uint8_t e,uint8_t f,uint8_t g,uint8_t h,
		uint8_t i,uint8_t j){
		if(a>180){a=180;}
		if(a==0){a=90;}
		if(b>180){b=180;}
		if(c>180){c=180;}
		if(d>180){d=180;}
		if(e>180){e=180;}
		if(f>180){f=180;}
		if(g>180){g=180;}
		if(h>180){h=180;}
		if(i>180){i=180;}
		if(j>180){j=180;}
		sConfigOC.Pulse = map(a,0,180,SERVO_LOW,SERVO_HIGH);
		  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
		  {
			  Error_Handler();
		 }
		  sConfigOC.Pulse = map(b,0,180,SERVO_LOW,SERVO_HIGH);
		  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  sConfigOC.Pulse = map(c,0,180,SERVO_LOW,SERVO_HIGH);
		  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  sConfigOC.Pulse = map(d,0,180,SERVO_LOW,SERVO_HIGH);
		  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  sConfigOC.Pulse = map(e,0,180,SERVO_LOW,SERVO_HIGH);
		  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  sConfigOC.Pulse = map(f,0,180,SERVO_LOW,SERVO_HIGH);
		  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  sConfigOC.Pulse = map(g,0,180,SERVO_LOW,SERVO_HIGH);
		  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  sConfigOC.Pulse = map(h,0,180,SERVO_LOW,SERVO_HIGH);
		  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  sConfigOC.Pulse = map(i,0,180,SERVO_LOW,SERVO_HIGH);
		  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  sConfigOC.Pulse = map(j,0,180,SERVO_LOW,SERVO_HIGH);
		  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
		  {
			  Error_Handler();
		  }
		  if (HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2) != HAL_OK)
		  {
			  Error_Handler();
		  }

}

void setvolume(uint8_t volume){
	cmd[0]= 0x7E;
	cmd[1]= 0xFF;
	cmd[2]=	0x06;
	cmd[3]=	0x06;
	cmd[4]=	0x00;
	cmd[5]=	0x00;
	cmd[6]=	volume;
	cmd[7]=	0xEF;
	HAL_UART_Transmit(&huart3,(uint8_t*)cmd,8,0xF);
}
void playmp3(uint8_t playnumber){
	cmd[0]= 0x7E;
	cmd[1]= 0xFF;
	cmd[2]=	0x06;
	cmd[3]=	0x12;
	cmd[4]=	0x00;
	cmd[5]=	0x00;
	cmd[6]=	playnumber;
	cmd[7]=	0xEF;
	HAL_UART_Transmit(&huart3,(uint8_t*)cmd,8,0xF);
}
void stopmp3(){
	cmd[0]= 0x7E;
	cmd[1]= 0xFF;
	cmd[2]=	0x06;
	cmd[3]=	0x0E;
	cmd[4]=	0x00;
	cmd[5]=	0x00;
	cmd[6]=	0x00;
	cmd[7]=	0xEF;
	HAL_UART_Transmit(&huart3,(uint8_t*)cmd,8,0xF);
}

void Calibration(){
	servo(90,90,90,90,90,90,90,90,90,90);
	motor_move(0,0,0,0);
	oled_clear();
	oled_returnhome();
	oled_puts("Gyro Calibration");
	cmd[0]=0x01;
	cmd[1]=0x03;
	cmd[2]=0;
	HAL_I2C_Master_Transmit(&hi2c1,0x50<<1,(uint8_t*)cmd,3,0xF);
	HAL_Delay(2000);
	oled_clear();
	oled_returnhome();
	oled_puts("Magnetic");
	oled_setcursor(1,0);
	oled_puts(" Calibration  RS");
	cmd[0]=0x01;
	cmd[1]=0x02;
	cmd[2]=0;
	HAL_I2C_Master_Transmit(&hi2c1,0x50<<1,(uint8_t*)cmd,3,0xF);
	motor_move(50,0,0,50);
	HAL_Delay(16800);
	oled_clear();
	oled_returnhome();
	oled_puts("Calibration End ");
	cmd[0]=0x01;
	cmd[1]=0;
	cmd[2]=0;
	HAL_I2C_Master_Transmit(&hi2c1,0x50<<1,(uint8_t*)cmd,3,0xF);
	motor_move(0,0,0,0);
}

int environment(){
	uint8_t returntemp[2]={0};
	uint16_t data[2]={0};
	uint8_t tempdata[8]={0};
    HAL_I2C_Mem_Read(&hi2c1,CCS811addr ,0x02,I2C_MEMADD_SIZE_8BIT,(uint8_t*)tempdata,8,0xF);
    data[0]=(tempdata[0]<<8)+tempdata[1];
    data[1]=(tempdata[2]<<8)+tempdata[3];
    if(data[0]>4000){returntemp[0]=1;}
    else{returntemp[1]=0;}
    if(data[1]>800){returntemp[0]=1;}
    else{returntemp[1]=0;}
	xprintf(" CO2=%d",data[0]);
	xprintf(" gas=%d",data[1]);
	xprintf(" out=%d,%d",returntemp[0],returntemp[1]);
	return (returntemp[0]+returntemp[1]*2);
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
	uint8_t uart_getc(void)
	{
	    uint8_t c = 0;
	    char buf[1];
	    HAL_UART_Receive(&huart2, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
	void uart_putc(uint8_t c)
	{
	 char buf[1];
	 buf[0] = c;
	 HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	}
	void uart_puts(char *str)
	{
	    while (*str) {
	        uart_putc(*str++);
	    }
	}

	void houi_set(){
			 HAL_I2C_Mem_Read(&hi2c1,0x50<<1,0x3F,I2C_MEMADD_SIZE_8BIT,(uint8_t*)yaw,2,0xF);
			    int yawl=yaw[0];
			    int yawh=yaw[1];
			    HOUI_def = (float)((yawh<< 8 ) | yawl ) / 32768 * 180;
			    if(HOUI_def<0){
			    	HOUI_def=360+HOUI_def;
			    }
		}

		void houi_get(){
		    HAL_I2C_Mem_Read(&hi2c1,0x50<<1,0x3F,I2C_MEMADD_SIZE_8BIT,(uint8_t*)yaw,2,0xF);
		    int yawl=yaw[0];
		    int yawh=yaw[1];
		    int Hx;
		    Hx = (float)((yawh<< 8 ) | yawl ) / 32768 * 180;
		    if(HOUI<0){
		    Hx=360+Hx;
		    }
		    Hx = Hx - HOUI_def;
		     if(Hx<0){
		     HOUI=Hx+360;
		     }
		     else{
		     HOUI=Hx;
		     }
		     if(HOUI!=0){
		     HOUI=360-HOUI;
		     }
		}
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
		if(Rxbuf[0]==254){
			data[0]=Rxbuf[1];
			data[1]=Rxbuf[2];
			data[2]=Rxbuf[3];
			data[3]=Rxbuf[4];
			data[4]=Rxbuf[5];
			data[5]=Rxbuf[6];
			data[6]=Rxbuf[7];
			data[7]=Rxbuf[8];
			data[8]=Rxbuf[9];
			data[9]=Rxbuf[10];
			data[10]=Rxbuf[11];
			data[11]=Rxbuf[12];
			data[12]=Rxbuf[13];
			data[13]=Rxbuf[14];
			data[14]=Rxbuf[15];
		}
		else if(Rxbuf[1]==254){
			data[0]=Rxbuf[2];
			data[1]=Rxbuf[3];
			data[2]=Rxbuf[4];
			data[3]=Rxbuf[5];
			data[4]=Rxbuf[6];
			data[5]=Rxbuf[7];
			data[6]=Rxbuf[8];
			data[7]=Rxbuf[9];
			data[8]=Rxbuf[10];
			data[9]=Rxbuf[11];
			data[10]=Rxbuf[12];
			data[11]=Rxbuf[13];
			data[12]=Rxbuf[14];
			data[13]=Rxbuf[15];
			data[14]=Rxbuf[0];	}
		else if(Rxbuf[2]==254){
			data[0]=Rxbuf[3];
			data[1]=Rxbuf[4];
			data[2]=Rxbuf[5];
			data[3]=Rxbuf[6];
			data[4]=Rxbuf[7];
			data[5]=Rxbuf[8];
			data[6]=Rxbuf[9];
			data[7]=Rxbuf[10];
			data[8]=Rxbuf[11];
			data[9]=Rxbuf[12];
			data[10]=Rxbuf[13];
			data[11]=Rxbuf[14];
			data[12]=Rxbuf[15];
			data[13]=Rxbuf[0];
			data[14]=Rxbuf[1];}
		else if(Rxbuf[3]==254){
			data[0]=Rxbuf[4];
			data[1]=Rxbuf[5];
			data[2]=Rxbuf[6];
			data[3]=Rxbuf[7];
			data[4]=Rxbuf[8];
			data[5]=Rxbuf[9];
			data[6]=Rxbuf[10];
			data[7]=Rxbuf[11];
			data[8]=Rxbuf[12];
			data[9]=Rxbuf[13];
			data[10]=Rxbuf[14];
			data[11]=Rxbuf[15];
			data[12]=Rxbuf[0];
			data[13]=Rxbuf[1];
			data[14]=Rxbuf[2];}
		else if(Rxbuf[4]==254){
			data[0]=Rxbuf[5];
			data[1]=Rxbuf[6];
			data[2]=Rxbuf[7];
			data[3]=Rxbuf[8];
			data[4]=Rxbuf[9];
			data[5]=Rxbuf[10];
			data[6]=Rxbuf[11];
			data[7]=Rxbuf[12];
			data[8]=Rxbuf[13];
			data[9]=Rxbuf[14];
			data[10]=Rxbuf[15];
			data[11]=Rxbuf[0];
			data[12]=Rxbuf[1];
			data[13]=Rxbuf[2];
			data[14]=Rxbuf[3];}
		else if(Rxbuf[5]==254){
			data[0]=Rxbuf[6];
			data[1]=Rxbuf[7];
			data[2]=Rxbuf[8];
			data[3]=Rxbuf[9];
			data[4]=Rxbuf[10];
			data[5]=Rxbuf[11];
			data[6]=Rxbuf[12];
			data[7]=Rxbuf[13];
			data[8]=Rxbuf[14];
			data[9]=Rxbuf[15];
			data[10]=Rxbuf[0];
			data[11]=Rxbuf[1];
			data[12]=Rxbuf[2];
			data[13]=Rxbuf[3];
			data[14]=Rxbuf[4];
		}
		else if(Rxbuf[6]==254){
			data[0]=Rxbuf[7];
			data[1]=Rxbuf[8];
			data[2]=Rxbuf[9];
			data[3]=Rxbuf[10];
			data[4]=Rxbuf[11];
			data[5]=Rxbuf[12];
			data[6]=Rxbuf[13];
			data[7]=Rxbuf[14];
			data[8]=Rxbuf[15];
			data[9]=Rxbuf[0];
			data[10]=Rxbuf[1];
			data[11]=Rxbuf[2];
			data[12]=Rxbuf[3];
			data[13]=Rxbuf[4];
			data[14]=Rxbuf[5];}
		else if(Rxbuf[7]==254){
			data[0]=Rxbuf[8];
			data[1]=Rxbuf[9];
			data[2]=Rxbuf[10];
			data[3]=Rxbuf[11];
			data[4]=Rxbuf[12];
			data[5]=Rxbuf[13];
			data[6]=Rxbuf[14];
			data[7]=Rxbuf[15];
			data[8]=Rxbuf[0];
			data[9]=Rxbuf[1];
			data[10]=Rxbuf[2];
			data[11]=Rxbuf[3];
			data[12]=Rxbuf[4];
			data[13]=Rxbuf[5];
			data[14]=Rxbuf[6];}
		else if(Rxbuf[8]==254){
			data[0]=Rxbuf[9];
			data[1]=Rxbuf[10];
			data[2]=Rxbuf[11];
			data[3]=Rxbuf[12];
			data[4]=Rxbuf[13];
			data[5]=Rxbuf[14];
			data[6]=Rxbuf[15];
			data[7]=Rxbuf[0];
			data[8]=Rxbuf[1];
			data[9]=Rxbuf[2];
			data[10]=Rxbuf[3];
			data[11]=Rxbuf[4];
			data[12]=Rxbuf[5];
			data[13]=Rxbuf[6];
			data[14]=Rxbuf[7];	}
		else if(Rxbuf[9]==254){
			data[0]=Rxbuf[10];
			data[1]=Rxbuf[11];
			data[2]=Rxbuf[12];
			data[3]=Rxbuf[13];
			data[4]=Rxbuf[14];
			data[5]=Rxbuf[15];
			data[6]=Rxbuf[0];
			data[7]=Rxbuf[1];
			data[8]=Rxbuf[2];
			data[9]=Rxbuf[3];
			data[10]=Rxbuf[4];
			data[11]=Rxbuf[5];
			data[12]=Rxbuf[6];
			data[13]=Rxbuf[7];
			data[14]=Rxbuf[8];}
		else if(Rxbuf[10]==254){
			data[0]=Rxbuf[11];
			data[1]=Rxbuf[12];
			data[2]=Rxbuf[13];
			data[3]=Rxbuf[14];
			data[4]=Rxbuf[15];
			data[5]=Rxbuf[0];
			data[6]=Rxbuf[1];
			data[7]=Rxbuf[2];
			data[8]=Rxbuf[3];
			data[9]=Rxbuf[4];
			data[10]=Rxbuf[5];
			data[11]=Rxbuf[6];
			data[12]=Rxbuf[7];
			data[13]=Rxbuf[8];
			data[14]=Rxbuf[9];}
		else if(Rxbuf[11]==254){
			data[0]=Rxbuf[11];
			data[1]=Rxbuf[13];
			data[2]=Rxbuf[14];
			data[3]=Rxbuf[15];
			data[4]=Rxbuf[0];
			data[5]=Rxbuf[1];
			data[6]=Rxbuf[2];
			data[7]=Rxbuf[3];
			data[8]=Rxbuf[4];
			data[9]=Rxbuf[5];
			data[10]=Rxbuf[6];
			data[11]=Rxbuf[7];
			data[12]=Rxbuf[8];
			data[13]=Rxbuf[9];
			data[14]=Rxbuf[10];}
		else if(Rxbuf[12]==254){
			data[0]=Rxbuf[13];
			data[1]=Rxbuf[14];
			data[2]=Rxbuf[15];
			data[3]=Rxbuf[0];
			data[4]=Rxbuf[1];
			data[5]=Rxbuf[2];
			data[6]=Rxbuf[3];
			data[7]=Rxbuf[4];
			data[8]=Rxbuf[5];
			data[9]=Rxbuf[6];
			data[10]=Rxbuf[7];
			data[11]=Rxbuf[8];
			data[12]=Rxbuf[9];
			data[13]=Rxbuf[10];
			data[14]=Rxbuf[11];	}
		else if(Rxbuf[13]==254){
			data[0]=Rxbuf[14];
			data[1]=Rxbuf[15];
			data[2]=Rxbuf[0];
			data[3]=Rxbuf[1];
			data[4]=Rxbuf[2];
			data[5]=Rxbuf[3];
			data[6]=Rxbuf[4];
			data[7]=Rxbuf[5];
			data[8]=Rxbuf[6];
			data[9]=Rxbuf[7];
			data[10]=Rxbuf[8];
			data[11]=Rxbuf[9];
			data[12]=Rxbuf[10];
			data[13]=Rxbuf[11];
			data[14]=Rxbuf[12];}
		else if(Rxbuf[14]==254){
			data[0]=Rxbuf[15];
			data[1]=Rxbuf[0];
			data[2]=Rxbuf[1];
			data[3]=Rxbuf[2];
			data[4]=Rxbuf[3];
			data[5]=Rxbuf[4];
			data[6]=Rxbuf[5];
			data[7]=Rxbuf[6];
			data[8]=Rxbuf[7];
			data[9]=Rxbuf[8];
			data[10]=Rxbuf[9];
			data[11]=Rxbuf[10];
			data[12]=Rxbuf[11];
			data[13]=Rxbuf[12];
			data[14]=Rxbuf[13];}
		else if(Rxbuf[15]==254){
			data[0]=Rxbuf[0];
			data[1]=Rxbuf[1];
			data[2]=Rxbuf[2];
			data[3]=Rxbuf[3];
			data[4]=Rxbuf[4];
			data[5]=Rxbuf[5];
			data[6]=Rxbuf[6];
			data[7]=Rxbuf[7];
			data[8]=Rxbuf[8];
			data[9]=Rxbuf[9];
			data[10]=Rxbuf[10];
			data[11]=Rxbuf[11];
			data[12]=Rxbuf[12];
			data[13]=Rxbuf[13];
			data[14]=Rxbuf[14];}

		HAL_UART_Transmit(&huart1,(uint8_t *)Writedata,1,0xf);
	}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,1);
  }
  /* USER CODE END Error_Handler_Debug */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
