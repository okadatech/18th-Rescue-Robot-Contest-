
F446_arm_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b8c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002d50  08002d50  00012d50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08002dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000290  20000004  08002e00  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000294  08002e00  00020294  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001684b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000033cb  00000000  00000000  0003687f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000467b  00000000  00000000  00039c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000828  00000000  00000000  0003e2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a20  00000000  00000000  0003eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005cf5  00000000  00000000  0003f510  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003180  00000000  00000000  00045205  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00048385  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000158c  00000000  00000000  00048404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002d38 	.word	0x08002d38

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08002d38 	.word	0x08002d38

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_InitTick+0x24>)
{
 8000518:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800051a:	6818      	ldr	r0, [r3, #0]
 800051c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000520:	fbb0 f0f3 	udiv	r0, r0, r3
 8000524:	f000 fa84 	bl	8000a30 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000528:	2200      	movs	r2, #0
 800052a:	4621      	mov	r1, r4
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
 8000530:	f000 fa3e 	bl	80009b0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000534:	2000      	movs	r0, #0
 8000536:	bd10      	pop	{r4, pc}
 8000538:	20000000 	.word	0x20000000

0800053c <HAL_Init>:
{
 800053c:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <HAL_Init+0x30>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000546:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000556:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000558:	2003      	movs	r0, #3
 800055a:	f000 fa17 	bl	800098c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff ffd8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000564:	f001 fff1 	bl	800254a <HAL_MspInit>
}
 8000568:	2000      	movs	r0, #0
 800056a:	bd08      	pop	{r3, pc}
 800056c:	40023c00 	.word	0x40023c00

08000570 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000570:	4a02      	ldr	r2, [pc, #8]	; (800057c <HAL_IncTick+0xc>)
 8000572:	6813      	ldr	r3, [r2, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000030 	.word	0x20000030

08000580 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <HAL_GetTick+0x8>)
 8000582:	6818      	ldr	r0, [r3, #0]
}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000030 	.word	0x20000030

0800058c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800058c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800058e:	4604      	mov	r4, r0
 8000590:	2800      	cmp	r0, #0
 8000592:	f000 8099 	beq.w	80006c8 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000596:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000598:	b923      	cbnz	r3, 80005a4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800059a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800059c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005a0:	f001 fab4 	bl	8001b0c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005a6:	06db      	lsls	r3, r3, #27
 80005a8:	f100 808c 	bmi.w	80006c4 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005b2:	f023 0302 	bic.w	r3, r3, #2
 80005b6:	f043 0302 	orr.w	r3, r3, #2
 80005ba:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005bc:	4b43      	ldr	r3, [pc, #268]	; (80006cc <HAL_ADC_Init+0x140>)
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005c4:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	6861      	ldr	r1, [r4, #4]
 80005ca:	430a      	orrs	r2, r1
 80005cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ce:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005d0:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005d2:	685a      	ldr	r2, [r3, #4]
 80005d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005e2:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005e4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005e6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005ea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	430a      	orrs	r2, r1
 80005f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005f2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005f4:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	430a      	orrs	r2, r1
 8000600:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000602:	4933      	ldr	r1, [pc, #204]	; (80006d0 <HAL_ADC_Init+0x144>)
 8000604:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000606:	428a      	cmp	r2, r1
 8000608:	d050      	beq.n	80006ac <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800060a:	6899      	ldr	r1, [r3, #8]
 800060c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000610:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000612:	6899      	ldr	r1, [r3, #8]
 8000614:	430a      	orrs	r2, r1
 8000616:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000618:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800061a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800061c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000622:	689a      	ldr	r2, [r3, #8]
 8000624:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000626:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000628:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800062a:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800062c:	f022 0202 	bic.w	r2, r2, #2
 8000630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000632:	689a      	ldr	r2, [r3, #8]
 8000634:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000638:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800063a:	6a22      	ldr	r2, [r4, #32]
 800063c:	2a00      	cmp	r2, #0
 800063e:	d03d      	beq.n	80006bc <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000640:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000642:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000648:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800064a:	685a      	ldr	r2, [r3, #4]
 800064c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000650:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	3901      	subs	r1, #1
 8000656:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800065a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800065e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000660:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000664:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000668:	3901      	subs	r1, #1
 800066a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000670:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000672:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000674:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800067a:	689a      	ldr	r2, [r3, #8]
 800067c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000680:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000682:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000684:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800068a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800068c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800068e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000690:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000694:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000696:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800069a:	f023 0303 	bic.w	r3, r3, #3
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006a4:	2300      	movs	r3, #0
 80006a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006aa:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006ba:	e7b4      	b.n	8000626 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006c2:	e7ca      	b.n	800065a <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 80006c4:	2001      	movs	r0, #1
 80006c6:	e7ed      	b.n	80006a4 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 80006c8:	2001      	movs	r0, #1
}
 80006ca:	bd10      	pop	{r4, pc}
 80006cc:	40012300 	.word	0x40012300
 80006d0:	0f000001 	.word	0x0f000001

080006d4 <HAL_ADC_Start_DMA>:
{
 80006d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80006d6:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80006d8:	2200      	movs	r2, #0
 80006da:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80006dc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80006e0:	2a01      	cmp	r2, #1
{
 80006e2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80006e4:	d065      	beq.n	80007b2 <HAL_ADC_Start_DMA+0xde>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006e6:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006ee:	68aa      	ldr	r2, [r5, #8]
 80006f0:	07d2      	lsls	r2, r2, #31
 80006f2:	d505      	bpl.n	8000700 <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006f4:	68aa      	ldr	r2, [r5, #8]
 80006f6:	07d0      	lsls	r0, r2, #31
 80006f8:	d415      	bmi.n	8000726 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 80006fa:	2000      	movs	r0, #0
}
 80006fc:	b003      	add	sp, #12
 80006fe:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000700:	68aa      	ldr	r2, [r5, #8]
 8000702:	f042 0201 	orr.w	r2, r2, #1
 8000706:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000708:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <HAL_ADC_Start_DMA+0xe4>)
 800070a:	6810      	ldr	r0, [r2, #0]
 800070c:	4a2b      	ldr	r2, [pc, #172]	; (80007bc <HAL_ADC_Start_DMA+0xe8>)
 800070e:	fbb0 f0f2 	udiv	r0, r0, r2
 8000712:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000716:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8000718:	9a01      	ldr	r2, [sp, #4]
 800071a:	2a00      	cmp	r2, #0
 800071c:	d0ea      	beq.n	80006f4 <HAL_ADC_Start_DMA+0x20>
      counter--;
 800071e:	9a01      	ldr	r2, [sp, #4]
 8000720:	3a01      	subs	r2, #1
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	e7f8      	b.n	8000718 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8000726:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000728:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800072c:	f020 0001 	bic.w	r0, r0, #1
 8000730:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000734:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000736:	686a      	ldr	r2, [r5, #4]
 8000738:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800073a:	bf41      	itttt	mi
 800073c:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 800073e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000742:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000746:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000748:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800074a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800074c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000750:	bf1c      	itt	ne
 8000752:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8000754:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000758:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 800075a:	2200      	movs	r2, #0
 800075c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000760:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <HAL_ADC_Start_DMA+0xec>)
 8000762:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000764:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <HAL_ADC_Start_DMA+0xf0>)
 8000766:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000768:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <HAL_ADC_Start_DMA+0xf4>)
 800076a:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800076c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000770:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000772:	686a      	ldr	r2, [r5, #4]
 8000774:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000778:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800077a:	68aa      	ldr	r2, [r5, #8]
 800077c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000780:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000782:	460a      	mov	r2, r1
 8000784:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000788:	f000 fa0e 	bl	8000ba8 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_ADC_Start_DMA+0xf8>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f013 0f1f 	tst.w	r3, #31
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	d108      	bne.n	80007aa <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000798:	6898      	ldr	r0, [r3, #8]
 800079a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800079e:	d1ac      	bne.n	80006fa <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007a0:	689a      	ldr	r2, [r3, #8]
 80007a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	e7a8      	b.n	80006fc <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <HAL_ADC_Start_DMA+0xfc>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d1a4      	bne.n	80006fa <HAL_ADC_Start_DMA+0x26>
 80007b0:	e7f2      	b.n	8000798 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 80007b2:	2002      	movs	r0, #2
 80007b4:	e7a2      	b.n	80006fc <HAL_ADC_Start_DMA+0x28>
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000
 80007bc:	000f4240 	.word	0x000f4240
 80007c0:	080007d7 	.word	0x080007d7
 80007c4:	08000839 	.word	0x08000839
 80007c8:	08000845 	.word	0x08000845
 80007cc:	40012300 	.word	0x40012300
 80007d0:	40012000 	.word	0x40012000

080007d4 <HAL_ADC_ConvCpltCallback>:
 80007d4:	4770      	bx	lr

080007d6 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80007d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80007d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007da:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80007de:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80007e0:	d124      	bne.n	800082c <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80007e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	6891      	ldr	r1, [r2, #8]
 80007ee:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80007f2:	d117      	bne.n	8000824 <ADC_DMAConvCplt+0x4e>
 80007f4:	6999      	ldr	r1, [r3, #24]
 80007f6:	b9a9      	cbnz	r1, 8000824 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007fa:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80007fe:	d002      	beq.n	8000806 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000800:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000802:	0549      	lsls	r1, r1, #21
 8000804:	d40e      	bmi.n	8000824 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000806:	6851      	ldr	r1, [r2, #4]
 8000808:	f021 0120 	bic.w	r1, r1, #32
 800080c:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800080e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000814:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000818:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800081a:	bf5e      	ittt	pl
 800081c:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 800081e:	f042 0201 	orrpl.w	r2, r2, #1
 8000822:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ffd5 	bl	80007d4 <HAL_ADC_ConvCpltCallback>
 800082a:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800082c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 800082e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000834:	4718      	bx	r3

08000836 <HAL_ADC_ConvHalfCpltCallback>:
 8000836:	4770      	bx	lr

08000838 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000838:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800083a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800083c:	f7ff fffb 	bl	8000836 <HAL_ADC_ConvHalfCpltCallback>
 8000840:	bd08      	pop	{r3, pc}

08000842 <HAL_ADC_ErrorCallback>:
{
 8000842:	4770      	bx	lr

08000844 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000844:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8000846:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800084c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 8000854:	f7ff fff5 	bl	8000842 <HAL_ADC_ErrorCallback>
 8000858:	bd08      	pop	{r3, pc}
	...

0800085c <HAL_ADC_ConfigChannel>:
{
 800085c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800085e:	2300      	movs	r3, #0
 8000860:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000862:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000866:	2b01      	cmp	r3, #1
 8000868:	d06a      	beq.n	8000940 <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800086a:	680d      	ldr	r5, [r1, #0]
 800086c:	6804      	ldr	r4, [r0, #0]
 800086e:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000870:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000872:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000874:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000878:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800087a:	d92a      	bls.n	80008d2 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800087c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000880:	68e7      	ldr	r7, [r4, #12]
 8000882:	3b1e      	subs	r3, #30
 8000884:	f04f 0e07 	mov.w	lr, #7
 8000888:	fa0e fe03 	lsl.w	lr, lr, r3
 800088c:	ea27 070e 	bic.w	r7, r7, lr
 8000890:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000892:	68e7      	ldr	r7, [r4, #12]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	433b      	orrs	r3, r7
 800089a:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800089c:	684a      	ldr	r2, [r1, #4]
 800089e:	2a06      	cmp	r2, #6
 80008a0:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80008a4:	d825      	bhi.n	80008f2 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80008a6:	4413      	add	r3, r2
 80008a8:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80008aa:	1f59      	subs	r1, r3, #5
 80008ac:	231f      	movs	r3, #31
 80008ae:	408b      	lsls	r3, r1
 80008b0:	ea27 0303 	bic.w	r3, r7, r3
 80008b4:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80008b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80008b8:	fa06 f101 	lsl.w	r1, r6, r1
 80008bc:	4311      	orrs	r1, r2
 80008be:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_ADC_ConfigChannel+0x11c>)
 80008c2:	429c      	cmp	r4, r3
 80008c4:	d034      	beq.n	8000930 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 80008c6:	2300      	movs	r3, #0
 80008c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80008cc:	4618      	mov	r0, r3
}
 80008ce:	b003      	add	sp, #12
 80008d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008d2:	6927      	ldr	r7, [r4, #16]
 80008d4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80008d8:	f04f 0e07 	mov.w	lr, #7
 80008dc:	fa0e fe03 	lsl.w	lr, lr, r3
 80008e0:	ea27 070e 	bic.w	r7, r7, lr
 80008e4:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80008e6:	6927      	ldr	r7, [r4, #16]
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	433b      	orrs	r3, r7
 80008ee:	6123      	str	r3, [r4, #16]
 80008f0:	e7d4      	b.n	800089c <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80008f2:	2a0c      	cmp	r2, #12
 80008f4:	d80e      	bhi.n	8000914 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80008f6:	4413      	add	r3, r2
 80008f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80008fa:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80008fe:	231f      	movs	r3, #31
 8000900:	4093      	lsls	r3, r2
 8000902:	ea21 0303 	bic.w	r3, r1, r3
 8000906:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000908:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800090a:	fa06 f202 	lsl.w	r2, r6, r2
 800090e:	431a      	orrs	r2, r3
 8000910:	6322      	str	r2, [r4, #48]	; 0x30
 8000912:	e7d5      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000914:	4413      	add	r3, r2
 8000916:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000918:	3b41      	subs	r3, #65	; 0x41
 800091a:	221f      	movs	r2, #31
 800091c:	409a      	lsls	r2, r3
 800091e:	ea21 0202 	bic.w	r2, r1, r2
 8000922:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000924:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000926:	fa06 f103 	lsl.w	r1, r6, r3
 800092a:	4311      	orrs	r1, r2
 800092c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800092e:	e7c7      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000930:	2d12      	cmp	r5, #18
 8000932:	d107      	bne.n	8000944 <HAL_ADC_ConfigChannel+0xe8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000934:	4a11      	ldr	r2, [pc, #68]	; (800097c <HAL_ADC_ConfigChannel+0x120>)
 8000936:	6853      	ldr	r3, [r2, #4]
 8000938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093c:	6053      	str	r3, [r2, #4]
 800093e:	e7c2      	b.n	80008c6 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000940:	2002      	movs	r0, #2
 8000942:	e7c4      	b.n	80008ce <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_ADC_ConfigChannel+0x124>)
 8000946:	429d      	cmp	r5, r3
 8000948:	d001      	beq.n	800094e <HAL_ADC_ConfigChannel+0xf2>
 800094a:	2d11      	cmp	r5, #17
 800094c:	d1bb      	bne.n	80008c6 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800094e:	490b      	ldr	r1, [pc, #44]	; (800097c <HAL_ADC_ConfigChannel+0x120>)
 8000950:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000952:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000954:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000958:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800095a:	d1b4      	bne.n	80008c6 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_ADC_ConfigChannel+0x128>)
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_ADC_ConfigChannel+0x12c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	fbb3 f2f2 	udiv	r2, r3, r2
 8000966:	230a      	movs	r3, #10
 8000968:	4353      	muls	r3, r2
        counter--;
 800096a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800096c:	9b01      	ldr	r3, [sp, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0a9      	beq.n	80008c6 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8000972:	9b01      	ldr	r3, [sp, #4]
 8000974:	3b01      	subs	r3, #1
 8000976:	e7f8      	b.n	800096a <HAL_ADC_ConfigChannel+0x10e>
 8000978:	40012000 	.word	0x40012000
 800097c:	40012300 	.word	0x40012300
 8000980:	10000012 	.word	0x10000012
 8000984:	20000000 	.word	0x20000000
 8000988:	000f4240 	.word	0x000f4240

0800098c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800098e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000990:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000994:	041b      	lsls	r3, r3, #16
 8000996:	0c1b      	lsrs	r3, r3, #16
 8000998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800099c:	0200      	lsls	r0, r0, #8
 800099e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80009a6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009a8:	60d3      	str	r3, [r2, #12]
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b2:	b530      	push	{r4, r5, lr}
 80009b4:	68dc      	ldr	r4, [r3, #12]
 80009b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	bf28      	it	cs
 80009c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 0501 	mov.w	r5, #1
 80009cc:	fa05 f303 	lsl.w	r3, r5, r3
 80009d0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d4:	bf8c      	ite	hi
 80009d6:	3c03      	subhi	r4, #3
 80009d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009da:	4019      	ands	r1, r3
 80009dc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009de:	fa05 f404 	lsl.w	r4, r5, r4
 80009e2:	3c01      	subs	r4, #1
 80009e4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80009e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	ea42 0201 	orr.w	r2, r2, r1
 80009ec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	bfaf      	iteee	ge
 80009f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	f000 000f 	andlt.w	r0, r0, #15
 80009fa:	4b06      	ldrlt	r3, [pc, #24]	; (8000a14 <HAL_NVIC_SetPriority+0x64>)
 80009fc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	bfa5      	ittet	ge
 8000a00:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000a04:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a0c:	bd30      	pop	{r4, r5, pc}
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00
 8000a14:	e000ed14 	.word	0xe000ed14

08000a18 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a18:	0942      	lsrs	r2, r0, #5
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f000 001f 	and.w	r0, r0, #31
 8000a20:	fa03 f000 	lsl.w	r0, r3, r0
 8000a24:	4b01      	ldr	r3, [pc, #4]	; (8000a2c <HAL_NVIC_EnableIRQ+0x14>)
 8000a26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	3801      	subs	r0, #1
 8000a32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a36:	d20a      	bcs.n	8000a4e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	21f0      	movs	r1, #240	; 0xf0
 8000a40:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e010 	.word	0xe000e010
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a5e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a60:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a62:	bf0c      	ite	eq
 8000a64:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a68:	f022 0204 	bicne.w	r2, r2, #4
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	4770      	bx	lr
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a74:	4770      	bx	lr

08000a76 <HAL_SYSTICK_IRQHandler>:
{
 8000a76:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000a78:	f7ff fffc 	bl	8000a74 <HAL_SYSTICK_Callback>
 8000a7c:	bd08      	pop	{r3, pc}
	...

08000a80 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000a80:	6803      	ldr	r3, [r0, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000a88:	f023 0303 	bic.w	r3, r3, #3
 8000a8c:	2118      	movs	r1, #24
 8000a8e:	3a10      	subs	r2, #16
 8000a90:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a94:	4904      	ldr	r1, [pc, #16]	; (8000aa8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000a96:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000a98:	bf88      	it	hi
 8000a9a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a9c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000a9e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000aa0:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000aa2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	08002d50 	.word	0x08002d50

08000aac <HAL_DMA_Init>:
{
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ab0:	f7ff fd66 	bl	8000580 <HAL_GetTick>
 8000ab4:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d071      	beq.n	8000b9e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000aba:	2300      	movs	r3, #0
 8000abc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000ac0:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000ac8:	6813      	ldr	r3, [r2, #0]
 8000aca:	f023 0301 	bic.w	r3, r3, #1
 8000ace:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ad0:	6821      	ldr	r1, [r4, #0]
 8000ad2:	680b      	ldr	r3, [r1, #0]
 8000ad4:	07d8      	lsls	r0, r3, #31
 8000ad6:	d43c      	bmi.n	8000b52 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000ad8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ada:	4d32      	ldr	r5, [pc, #200]	; (8000ba4 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000adc:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ade:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ae0:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ae2:	68a3      	ldr	r3, [r4, #8]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	68e2      	ldr	r2, [r4, #12]
 8000ae8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aea:	6922      	ldr	r2, [r4, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	6962      	ldr	r2, [r4, #20]
 8000af0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af2:	69e2      	ldr	r2, [r4, #28]
 8000af4:	4303      	orrs	r3, r0
 8000af6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000af8:	6a22      	ldr	r2, [r4, #32]
 8000afa:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000afc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000afe:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b00:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b04:	bf01      	itttt	eq
 8000b06:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000b08:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000b0a:	4335      	orreq	r5, r6
 8000b0c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000b0e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000b10:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b12:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b14:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000b18:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b1c:	d10b      	bne.n	8000b36 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000b1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b20:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000b22:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b24:	b13d      	cbz	r5, 8000b36 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b26:	b9f8      	cbnz	r0, 8000b68 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000b28:	2a01      	cmp	r2, #1
 8000b2a:	d02d      	beq.n	8000b88 <HAL_DMA_Init+0xdc>
 8000b2c:	d301      	bcc.n	8000b32 <HAL_DMA_Init+0x86>
 8000b2e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000b30:	d101      	bne.n	8000b36 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b32:	01ea      	lsls	r2, r5, #7
 8000b34:	d42b      	bmi.n	8000b8e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000b36:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f7ff ffa1 	bl	8000a80 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b40:	233f      	movs	r3, #63	; 0x3f
 8000b42:	4093      	lsls	r3, r2
 8000b44:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b46:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000b48:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b4a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000b4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000b50:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b52:	f7ff fd15 	bl	8000580 <HAL_GetTick>
 8000b56:	1b40      	subs	r0, r0, r5
 8000b58:	2805      	cmp	r0, #5
 8000b5a:	d9b9      	bls.n	8000ad0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b60:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000b62:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b68:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000b6c:	d113      	bne.n	8000b96 <HAL_DMA_Init+0xea>
    switch (tmp)
 8000b6e:	2a03      	cmp	r2, #3
 8000b70:	d8e1      	bhi.n	8000b36 <HAL_DMA_Init+0x8a>
 8000b72:	a001      	add	r0, pc, #4	; (adr r0, 8000b78 <HAL_DMA_Init+0xcc>)
 8000b74:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000b78:	08000b8f 	.word	0x08000b8f
 8000b7c:	08000b33 	.word	0x08000b33
 8000b80:	08000b8f 	.word	0x08000b8f
 8000b84:	08000b89 	.word	0x08000b89
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b88:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000b8c:	d1d3      	bne.n	8000b36 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b8e:	2340      	movs	r3, #64	; 0x40
 8000b90:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000b92:	2001      	movs	r0, #1
 8000b94:	e7e5      	b.n	8000b62 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000b96:	2a02      	cmp	r2, #2
 8000b98:	d9f9      	bls.n	8000b8e <HAL_DMA_Init+0xe2>
 8000b9a:	2a03      	cmp	r2, #3
 8000b9c:	e7c8      	b.n	8000b30 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	bd70      	pop	{r4, r5, r6, pc}
 8000ba2:	bf00      	nop
 8000ba4:	f010803f 	.word	0xf010803f

08000ba8 <HAL_DMA_Start_IT>:
{
 8000ba8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000baa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000bae:	2c01      	cmp	r4, #1
 8000bb0:	d036      	beq.n	8000c20 <HAL_DMA_Start_IT+0x78>
 8000bb2:	2401      	movs	r4, #1
 8000bb4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bb8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bbc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bbe:	2c01      	cmp	r4, #1
 8000bc0:	f04f 0500 	mov.w	r5, #0
 8000bc4:	f04f 0402 	mov.w	r4, #2
 8000bc8:	d128      	bne.n	8000c1c <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bca:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000bce:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bd0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000bd2:	6825      	ldr	r5, [r4, #0]
 8000bd4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000bd8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000bda:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bdc:	6883      	ldr	r3, [r0, #8]
 8000bde:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000be0:	bf0e      	itee	eq
 8000be2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000be4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000be6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000be8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000bea:	bf08      	it	eq
 8000bec:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bee:	233f      	movs	r3, #63	; 0x3f
 8000bf0:	4093      	lsls	r3, r2
 8000bf2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000bf4:	6823      	ldr	r3, [r4, #0]
 8000bf6:	f043 0316 	orr.w	r3, r3, #22
 8000bfa:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000bfc:	6963      	ldr	r3, [r4, #20]
 8000bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c02:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000c04:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c06:	b11b      	cbz	r3, 8000c10 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c18:	2000      	movs	r0, #0
 8000c1a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000c1c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000c20:	2002      	movs	r0, #2
}
 8000c22:	bd70      	pop	{r4, r5, r6, pc}

08000c24 <HAL_DMA_IRQHandler>:
{
 8000c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c2a:	4b5a      	ldr	r3, [pc, #360]	; (8000d94 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c2c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c2e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c30:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000c32:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c34:	2208      	movs	r2, #8
 8000c36:	409a      	lsls	r2, r3
 8000c38:	4216      	tst	r6, r2
{
 8000c3a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c3c:	d00c      	beq.n	8000c58 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000c3e:	6801      	ldr	r1, [r0, #0]
 8000c40:	6808      	ldr	r0, [r1, #0]
 8000c42:	0740      	lsls	r0, r0, #29
 8000c44:	d508      	bpl.n	8000c58 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000c46:	6808      	ldr	r0, [r1, #0]
 8000c48:	f020 0004 	bic.w	r0, r0, #4
 8000c4c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000c4e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000c50:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c52:	f042 0201 	orr.w	r2, r2, #1
 8000c56:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	4216      	tst	r6, r2
 8000c5e:	d008      	beq.n	8000c72 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000c60:	6821      	ldr	r1, [r4, #0]
 8000c62:	6949      	ldr	r1, [r1, #20]
 8000c64:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000c66:	bf41      	itttt	mi
 8000c68:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000c6a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000c6c:	f042 0202 	orrmi.w	r2, r2, #2
 8000c70:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c72:	2204      	movs	r2, #4
 8000c74:	409a      	lsls	r2, r3
 8000c76:	4216      	tst	r6, r2
 8000c78:	d008      	beq.n	8000c8c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000c7a:	6821      	ldr	r1, [r4, #0]
 8000c7c:	6809      	ldr	r1, [r1, #0]
 8000c7e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000c80:	bf41      	itttt	mi
 8000c82:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000c84:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000c86:	f042 0204 	orrmi.w	r2, r2, #4
 8000c8a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	4216      	tst	r6, r2
 8000c92:	d010      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	6819      	ldr	r1, [r3, #0]
 8000c98:	0709      	lsls	r1, r1, #28
 8000c9a:	d50c      	bpl.n	8000cb6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c9c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	0350      	lsls	r0, r2, #13
 8000ca2:	d535      	bpl.n	8000d10 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	0319      	lsls	r1, r3, #12
 8000ca8:	d401      	bmi.n	8000cae <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000caa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cac:	e000      	b.n	8000cb0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000cae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000cb0:	b10b      	cbz	r3, 8000cb6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000cb6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000cb8:	2220      	movs	r2, #32
 8000cba:	408a      	lsls	r2, r1
 8000cbc:	4216      	tst	r6, r2
 8000cbe:	d038      	beq.n	8000d32 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	6818      	ldr	r0, [r3, #0]
 8000cc4:	06c6      	lsls	r6, r0, #27
 8000cc6:	d534      	bpl.n	8000d32 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000cc8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000cca:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000cce:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cd0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000cd2:	d125      	bne.n	8000d20 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cd4:	f022 0216 	bic.w	r2, r2, #22
 8000cd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cda:	695a      	ldr	r2, [r3, #20]
 8000cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ce0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ce2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ce4:	b90a      	cbnz	r2, 8000cea <HAL_DMA_IRQHandler+0xc6>
 8000ce6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000ce8:	b11a      	cbz	r2, 8000cf2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	f022 0208 	bic.w	r2, r2, #8
 8000cf0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cf2:	233f      	movs	r3, #63	; 0x3f
 8000cf4:	408b      	lsls	r3, r1
 8000cf6:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000d04:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000d06:	b10b      	cbz	r3, 8000d0c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4798      	blx	r3
}
 8000d0c:	b003      	add	sp, #12
 8000d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d14:	bf5e      	ittt	pl
 8000d16:	681a      	ldrpl	r2, [r3, #0]
 8000d18:	f022 0208 	bicpl.w	r2, r2, #8
 8000d1c:	601a      	strpl	r2, [r3, #0]
 8000d1e:	e7c4      	b.n	8000caa <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d20:	0350      	lsls	r0, r2, #13
 8000d22:	d528      	bpl.n	8000d76 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	0319      	lsls	r1, r3, #12
 8000d28:	d432      	bmi.n	8000d90 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000d2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000d2c:	b10b      	cbz	r3, 8000d32 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000d2e:	4620      	mov	r0, r4
 8000d30:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0e9      	beq.n	8000d0c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d3a:	07da      	lsls	r2, r3, #31
 8000d3c:	d519      	bpl.n	8000d72 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d3e:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000d40:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000d46:	6813      	ldr	r3, [r2, #0]
 8000d48:	f023 0301 	bic.w	r3, r3, #1
 8000d4c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d4e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000d52:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000d56:	9b01      	ldr	r3, [sp, #4]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	d302      	bcc.n	8000d66 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d60:	6813      	ldr	r3, [r2, #0]
 8000d62:	07db      	lsls	r3, r3, #31
 8000d64:	d4f7      	bmi.n	8000d56 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000d66:	2300      	movs	r3, #0
 8000d68:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000d72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d74:	e7c7      	b.n	8000d06 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000d7c:	d108      	bne.n	8000d90 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	f021 0110 	bic.w	r1, r1, #16
 8000d84:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000d86:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000d88:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000d8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000d90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000d92:	e7cb      	b.n	8000d2c <HAL_DMA_IRQHandler+0x108>
 8000d94:	20000000 	.word	0x20000000

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d9c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da0:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000f44 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da4:	4a65      	ldr	r2, [pc, #404]	; (8000f3c <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da6:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000f48 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000daa:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dac:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000dae:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000db4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000dbc:	45b6      	cmp	lr, r6
 8000dbe:	f040 80aa 	bne.w	8000f16 <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc2:	684c      	ldr	r4, [r1, #4]
 8000dc4:	f024 0710 	bic.w	r7, r4, #16
 8000dc8:	2f02      	cmp	r7, #2
 8000dca:	d116      	bne.n	8000dfa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000dcc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000dd0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000dd8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ddc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000de0:	f04f 0c0f 	mov.w	ip, #15
 8000de4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000de8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dec:	690d      	ldr	r5, [r1, #16]
 8000dee:	fa05 f50b 	lsl.w	r5, r5, fp
 8000df2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	f8ca 5020 	str.w	r5, [sl, #32]
 8000dfa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dfe:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e00:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e04:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e08:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e12:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e16:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e18:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000e1e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e22:	d811      	bhi.n	8000e48 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000e24:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e26:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2a:	68cf      	ldr	r7, [r1, #12]
 8000e2c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000e30:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000e34:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e36:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e38:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e3c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000e40:	409f      	lsls	r7, r3
 8000e42:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000e46:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e48:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	688f      	ldr	r7, [r1, #8]
 8000e4e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000e52:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000e54:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e56:	00e5      	lsls	r5, r4, #3
 8000e58:	d55d      	bpl.n	8000f16 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	f04f 0b00 	mov.w	fp, #0
 8000e5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000e62:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e66:	4d36      	ldr	r5, [pc, #216]	; (8000f40 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e68:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000e6c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000e70:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000e74:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000e78:	9703      	str	r7, [sp, #12]
 8000e7a:	9f03      	ldr	r7, [sp, #12]
 8000e7c:	f023 0703 	bic.w	r7, r3, #3
 8000e80:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e84:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e88:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e90:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000e94:	f04f 0e0f 	mov.w	lr, #15
 8000e98:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e9c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e9e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea2:	d03f      	beq.n	8000f24 <HAL_GPIO_Init+0x18c>
 8000ea4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ea8:	42a8      	cmp	r0, r5
 8000eaa:	d03d      	beq.n	8000f28 <HAL_GPIO_Init+0x190>
 8000eac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eb0:	42a8      	cmp	r0, r5
 8000eb2:	d03b      	beq.n	8000f2c <HAL_GPIO_Init+0x194>
 8000eb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eb8:	42a8      	cmp	r0, r5
 8000eba:	d039      	beq.n	8000f30 <HAL_GPIO_Init+0x198>
 8000ebc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ec0:	42a8      	cmp	r0, r5
 8000ec2:	d037      	beq.n	8000f34 <HAL_GPIO_Init+0x19c>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d037      	beq.n	8000f38 <HAL_GPIO_Init+0x1a0>
 8000ec8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000ecc:	42a8      	cmp	r0, r5
 8000ece:	bf14      	ite	ne
 8000ed0:	2507      	movne	r5, #7
 8000ed2:	2506      	moveq	r5, #6
 8000ed4:	fa05 f50c 	lsl.w	r5, r5, ip
 8000ed8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000edc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000ede:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000ee6:	bf0c      	ite	eq
 8000ee8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000eea:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000eec:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000eee:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	bf0c      	ite	eq
 8000ef6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ef8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000efa:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efe:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f02:	bf0c      	ite	eq
 8000f04:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f06:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f08:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f0a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f0c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	bf54      	ite	pl
 8000f10:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f12:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f14:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	3301      	adds	r3, #1
 8000f18:	2b10      	cmp	r3, #16
 8000f1a:	f47f af48 	bne.w	8000dae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000f1e:	b005      	add	sp, #20
 8000f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f24:	465d      	mov	r5, fp
 8000f26:	e7d5      	b.n	8000ed4 <HAL_GPIO_Init+0x13c>
 8000f28:	2501      	movs	r5, #1
 8000f2a:	e7d3      	b.n	8000ed4 <HAL_GPIO_Init+0x13c>
 8000f2c:	2502      	movs	r5, #2
 8000f2e:	e7d1      	b.n	8000ed4 <HAL_GPIO_Init+0x13c>
 8000f30:	2503      	movs	r5, #3
 8000f32:	e7cf      	b.n	8000ed4 <HAL_GPIO_Init+0x13c>
 8000f34:	2504      	movs	r5, #4
 8000f36:	e7cd      	b.n	8000ed4 <HAL_GPIO_Init+0x13c>
 8000f38:	2505      	movs	r5, #5
 8000f3a:	e7cb      	b.n	8000ed4 <HAL_GPIO_Init+0x13c>
 8000f3c:	40013c00 	.word	0x40013c00
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40021400 	.word	0x40021400

08000f4c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f4c:	6903      	ldr	r3, [r0, #16]
 8000f4e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000f50:	bf14      	ite	ne
 8000f52:	2001      	movne	r0, #1
 8000f54:	2000      	moveq	r0, #0
 8000f56:	4770      	bx	lr

08000f58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f58:	b10a      	cbz	r2, 8000f5e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f5a:	6181      	str	r1, [r0, #24]
 8000f5c:	4770      	bx	lr
 8000f5e:	0409      	lsls	r1, r1, #16
 8000f60:	e7fb      	b.n	8000f5a <HAL_GPIO_WritePin+0x2>

08000f62 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000f62:	6943      	ldr	r3, [r0, #20]
 8000f64:	4059      	eors	r1, r3
 8000f66:	6141      	str	r1, [r0, #20]
 8000f68:	4770      	bx	lr

08000f6a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000f6a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	b1d8      	cbz	r0, 8000fa8 <HAL_IWDG_Init+0x3e>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8000f70:	6803      	ldr	r3, [r0, #0]
 8000f72:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000f76:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000f78:	f245 5255 	movw	r2, #21845	; 0x5555
 8000f7c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000f7e:	6842      	ldr	r2, [r0, #4]
 8000f80:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000f82:	6882      	ldr	r2, [r0, #8]
 8000f84:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000f86:	f7ff fafb 	bl	8000580 <HAL_GetTick>
 8000f8a:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	68d8      	ldr	r0, [r3, #12]
 8000f90:	b918      	cbnz	r0, 8000f9a <HAL_IWDG_Init+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000f92:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000f96:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000f98:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000f9a:	f7ff faf1 	bl	8000580 <HAL_GetTick>
 8000f9e:	1b40      	subs	r0, r0, r5
 8000fa0:	2830      	cmp	r0, #48	; 0x30
 8000fa2:	d9f3      	bls.n	8000f8c <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 8000fa4:	2003      	movs	r0, #3
}
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fa8:	2001      	movs	r0, #1
 8000faa:	bd38      	pop	{r3, r4, r5, pc}

08000fac <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000fac:	6803      	ldr	r3, [r0, #0]
 8000fae:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000fb2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fc0:	4c18      	ldr	r4, [pc, #96]	; (8001024 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_PWREx_EnableOverDrive+0x70>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000fda:	f7ff fad1 	bl	8000580 <HAL_GetTick>
 8000fde:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fe0:	6863      	ldr	r3, [r4, #4]
 8000fe2:	03da      	lsls	r2, r3, #15
 8000fe4:	d50b      	bpl.n	8000ffe <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fe8:	4c0e      	ldr	r4, [pc, #56]	; (8001024 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000fee:	f7ff fac7 	bl	8000580 <HAL_GetTick>
 8000ff2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ff4:	6863      	ldr	r3, [r4, #4]
 8000ff6:	039b      	lsls	r3, r3, #14
 8000ff8:	d50a      	bpl.n	8001010 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	e006      	b.n	800100c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ffe:	f7ff fabf 	bl	8000580 <HAL_GetTick>
 8001002:	1b40      	subs	r0, r0, r5
 8001004:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001008:	d9ea      	bls.n	8000fe0 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 800100a:	2003      	movs	r0, #3
}
 800100c:	b003      	add	sp, #12
 800100e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001010:	f7ff fab6 	bl	8000580 <HAL_GetTick>
 8001014:	1b40      	subs	r0, r0, r5
 8001016:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800101a:	d9eb      	bls.n	8000ff4 <HAL_PWREx_EnableOverDrive+0x3c>
 800101c:	e7f5      	b.n	800100a <HAL_PWREx_EnableOverDrive+0x52>
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000
 8001028:	420e0040 	.word	0x420e0040
 800102c:	420e0044 	.word	0x420e0044

08001030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001034:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001036:	4604      	mov	r4, r0
 8001038:	b910      	cbnz	r0, 8001040 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800103a:	2001      	movs	r0, #1
 800103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001040:	4b44      	ldr	r3, [pc, #272]	; (8001154 <HAL_RCC_ClockConfig+0x124>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	f002 020f 	and.w	r2, r2, #15
 8001048:	428a      	cmp	r2, r1
 800104a:	d328      	bcc.n	800109e <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104c:	6821      	ldr	r1, [r4, #0]
 800104e:	078f      	lsls	r7, r1, #30
 8001050:	d42d      	bmi.n	80010ae <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001052:	07c8      	lsls	r0, r1, #31
 8001054:	d440      	bmi.n	80010d8 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001056:	4b3f      	ldr	r3, [pc, #252]	; (8001154 <HAL_RCC_ClockConfig+0x124>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	f002 020f 	and.w	r2, r2, #15
 800105e:	4295      	cmp	r5, r2
 8001060:	d366      	bcc.n	8001130 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	0751      	lsls	r1, r2, #29
 8001066:	d46c      	bmi.n	8001142 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001068:	0713      	lsls	r3, r2, #28
 800106a:	d507      	bpl.n	800107c <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800106c:	4a3a      	ldr	r2, [pc, #232]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
 800106e:	6921      	ldr	r1, [r4, #16]
 8001070:	6893      	ldr	r3, [r2, #8]
 8001072:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001076:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800107a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800107c:	f000 f898 	bl	80011b0 <HAL_RCC_GetSysClockFreq>
 8001080:	4b35      	ldr	r3, [pc, #212]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
 8001082:	4a36      	ldr	r2, [pc, #216]	; (800115c <HAL_RCC_ClockConfig+0x12c>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800108a:	5cd3      	ldrb	r3, [r2, r3]
 800108c:	40d8      	lsrs	r0, r3
 800108e:	4b34      	ldr	r3, [pc, #208]	; (8001160 <HAL_RCC_ClockConfig+0x130>)
 8001090:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff fa3e 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8001098:	2000      	movs	r0, #0
 800109a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800109e:	b2ca      	uxtb	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	4299      	cmp	r1, r3
 80010aa:	d1c6      	bne.n	800103a <HAL_RCC_ClockConfig+0xa>
 80010ac:	e7ce      	b.n	800104c <HAL_RCC_ClockConfig+0x1c>
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b4:	bf1e      	ittt	ne
 80010b6:	689a      	ldrne	r2, [r3, #8]
 80010b8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80010bc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010be:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c0:	bf42      	ittt	mi
 80010c2:	689a      	ldrmi	r2, [r3, #8]
 80010c4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80010c8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	68a0      	ldr	r0, [r4, #8]
 80010ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010d2:	4302      	orrs	r2, r0
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	e7bc      	b.n	8001052 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d8:	6862      	ldr	r2, [r4, #4]
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
 80010dc:	2a01      	cmp	r2, #1
 80010de:	d11d      	bne.n	800111c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e6:	d0a8      	beq.n	800103a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e8:	4e1b      	ldr	r6, [pc, #108]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
 80010ea:	68b3      	ldr	r3, [r6, #8]
 80010ec:	f023 0303 	bic.w	r3, r3, #3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80010f4:	f7ff fa44 	bl	8000580 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010fc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	68b3      	ldr	r3, [r6, #8]
 8001100:	6862      	ldr	r2, [r4, #4]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800110a:	d0a4      	beq.n	8001056 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800110c:	f7ff fa38 	bl	8000580 <HAL_GetTick>
 8001110:	1bc0      	subs	r0, r0, r7
 8001112:	4540      	cmp	r0, r8
 8001114:	d9f3      	bls.n	80010fe <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001116:	2003      	movs	r0, #3
}
 8001118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800111c:	1e91      	subs	r1, r2, #2
 800111e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001120:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001122:	d802      	bhi.n	800112a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001124:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001128:	e7dd      	b.n	80010e6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112a:	f013 0f02 	tst.w	r3, #2
 800112e:	e7da      	b.n	80010e6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001130:	b2ea      	uxtb	r2, r5
 8001132:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	429d      	cmp	r5, r3
 800113c:	f47f af7d 	bne.w	800103a <HAL_RCC_ClockConfig+0xa>
 8001140:	e78f      	b.n	8001062 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001142:	4905      	ldr	r1, [pc, #20]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
 8001144:	68e0      	ldr	r0, [r4, #12]
 8001146:	688b      	ldr	r3, [r1, #8]
 8001148:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800114c:	4303      	orrs	r3, r0
 800114e:	608b      	str	r3, [r1, #8]
 8001150:	e78a      	b.n	8001068 <HAL_RCC_ClockConfig+0x38>
 8001152:	bf00      	nop
 8001154:	40023c00 	.word	0x40023c00
 8001158:	40023800 	.word	0x40023800
 800115c:	08002dc5 	.word	0x08002dc5
 8001160:	20000000 	.word	0x20000000

08001164 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <HAL_RCC_GetHCLKFreq+0x8>)
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000000 	.word	0x20000000

08001170 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800117e:	6810      	ldr	r0, [r2, #0]
}
 8001180:	40d8      	lsrs	r0, r3
 8001182:	4770      	bx	lr
 8001184:	40023800 	.word	0x40023800
 8001188:	08002dd5 	.word	0x08002dd5
 800118c:	20000000 	.word	0x20000000

08001190 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800119a:	5cd3      	ldrb	r3, [r2, r3]
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800119e:	6810      	ldr	r0, [r2, #0]
}
 80011a0:	40d8      	lsrs	r0, r3
 80011a2:	4770      	bx	lr
 80011a4:	40023800 	.word	0x40023800
 80011a8:	08002dd5 	.word	0x08002dd5
 80011ac:	20000000 	.word	0x20000000

080011b0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011b0:	4920      	ldr	r1, [pc, #128]	; (8001234 <HAL_RCC_GetSysClockFreq+0x84>)
{
 80011b2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011b4:	688b      	ldr	r3, [r1, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d007      	beq.n	80011ce <HAL_RCC_GetSysClockFreq+0x1e>
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	d020      	beq.n	8001204 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_RCC_GetSysClockFreq+0x88>)
 80011c4:	481d      	ldr	r0, [pc, #116]	; (800123c <HAL_RCC_GetSysClockFreq+0x8c>)
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf18      	it	ne
 80011ca:	4610      	movne	r0, r2
 80011cc:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011ce:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011d0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011d4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d8:	bf14      	ite	ne
 80011da:	4818      	ldrne	r0, [pc, #96]	; (800123c <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011dc:	4816      	ldreq	r0, [pc, #88]	; (8001238 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011de:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011e2:	bf18      	it	ne
 80011e4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ea:	fba1 0100 	umull	r0, r1, r1, r0
 80011ee:	f7ff f809 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_RCC_GetSysClockFreq+0x84>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011fa:	3301      	adds	r3, #1
 80011fc:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 80011fe:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001202:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001204:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001206:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001208:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800120a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800120e:	bf14      	ite	ne
 8001210:	480a      	ldrne	r0, [pc, #40]	; (800123c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001212:	4809      	ldreq	r0, [pc, #36]	; (8001238 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001214:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001218:	bf18      	it	ne
 800121a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800121c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001220:	fba1 0100 	umull	r0, r1, r1, r0
 8001224:	f7fe ffee 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001228:	4b02      	ldr	r3, [pc, #8]	; (8001234 <HAL_RCC_GetSysClockFreq+0x84>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001230:	e7e5      	b.n	80011fe <HAL_RCC_GetSysClockFreq+0x4e>
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	00f42400 	.word	0x00f42400
 800123c:	007a1200 	.word	0x007a1200

08001240 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001240:	6803      	ldr	r3, [r0, #0]
{
 8001242:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001244:	07de      	lsls	r6, r3, #31
{
 8001246:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001248:	d43b      	bmi.n	80012c2 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	079d      	lsls	r5, r3, #30
 800124e:	f100 8092 	bmi.w	8001376 <HAL_RCC_OscConfig+0x136>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	071e      	lsls	r6, r3, #28
 8001256:	f100 80dc 	bmi.w	8001412 <HAL_RCC_OscConfig+0x1d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	075d      	lsls	r5, r3, #29
 800125e:	d52a      	bpl.n	80012b6 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	4b93      	ldr	r3, [pc, #588]	; (80014b4 <HAL_RCC_OscConfig+0x274>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001266:	4d94      	ldr	r5, [pc, #592]	; (80014b8 <HAL_RCC_OscConfig+0x278>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800126a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800126e:	641a      	str	r2, [r3, #64]	; 0x40
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001280:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001282:	f7ff f97d 	bl	8000580 <HAL_GetTick>
 8001286:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	05da      	lsls	r2, r3, #23
 800128c:	f140 80e3 	bpl.w	8001456 <HAL_RCC_OscConfig+0x216>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001290:	68a3      	ldr	r3, [r4, #8]
 8001292:	4d88      	ldr	r5, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 80e5 	bne.w	8001464 <HAL_RCC_OscConfig+0x224>
 800129a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a2:	f7ff f96d 	bl	8000580 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a6:	4d83      	ldr	r5, [pc, #524]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 80012a8:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012aa:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012b0:	079b      	lsls	r3, r3, #30
 80012b2:	f140 80f8 	bpl.w	80014a6 <HAL_RCC_OscConfig+0x266>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b6:	69a2      	ldr	r2, [r4, #24]
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	f040 8103 	bne.w	80014c4 <HAL_RCC_OscConfig+0x284>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80012be:	2000      	movs	r0, #0
 80012c0:	e01e      	b.n	8001300 <HAL_RCC_OscConfig+0xc0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80012c2:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	f002 020c 	and.w	r2, r2, #12
 80012ca:	2a04      	cmp	r2, #4
 80012cc:	d010      	beq.n	80012f0 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80012d4:	2a08      	cmp	r2, #8
 80012d6:	d102      	bne.n	80012de <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	0258      	lsls	r0, r3, #9
 80012dc:	d408      	bmi.n	80012f0 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b75      	ldr	r3, [pc, #468]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012e6:	2a0c      	cmp	r2, #12
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	0251      	lsls	r1, r2, #9
 80012ee:	d509      	bpl.n	8001304 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	039a      	lsls	r2, r3, #14
 80012f6:	d5a8      	bpl.n	800124a <HAL_RCC_OscConfig+0xa>
 80012f8:	6863      	ldr	r3, [r4, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1a5      	bne.n	800124a <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80012fe:	2001      	movs	r0, #1
}
 8001300:	b003      	add	sp, #12
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001304:	6862      	ldr	r2, [r4, #4]
 8001306:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800130a:	d111      	bne.n	8001330 <HAL_RCC_OscConfig+0xf0>
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001312:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001314:	f7ff f934 	bl	8000580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001318:	4d66      	ldr	r5, [pc, #408]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 800131a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	039b      	lsls	r3, r3, #14
 8001320:	d493      	bmi.n	800124a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001322:	f7ff f92d 	bl	8000580 <HAL_GetTick>
 8001326:	1b80      	subs	r0, r0, r6
 8001328:	2864      	cmp	r0, #100	; 0x64
 800132a:	d9f7      	bls.n	800131c <HAL_RCC_OscConfig+0xdc>
            return HAL_TIMEOUT;
 800132c:	2003      	movs	r0, #3
 800132e:	e7e7      	b.n	8001300 <HAL_RCC_OscConfig+0xc0>
 8001330:	4d60      	ldr	r5, [pc, #384]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001332:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001336:	682b      	ldr	r3, [r5, #0]
 8001338:	d107      	bne.n	800134a <HAL_RCC_OscConfig+0x10a>
 800133a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133e:	602b      	str	r3, [r5, #0]
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001346:	602b      	str	r3, [r5, #0]
 8001348:	e7e4      	b.n	8001314 <HAL_RCC_OscConfig+0xd4>
 800134a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134e:	602b      	str	r3, [r5, #0]
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001358:	2a00      	cmp	r2, #0
 800135a:	d1db      	bne.n	8001314 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 800135c:	f7ff f910 	bl	8000580 <HAL_GetTick>
 8001360:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	682b      	ldr	r3, [r5, #0]
 8001364:	039f      	lsls	r7, r3, #14
 8001366:	f57f af70 	bpl.w	800124a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136a:	f7ff f909 	bl	8000580 <HAL_GetTick>
 800136e:	1b80      	subs	r0, r0, r6
 8001370:	2864      	cmp	r0, #100	; 0x64
 8001372:	d9f6      	bls.n	8001362 <HAL_RCC_OscConfig+0x122>
 8001374:	e7da      	b.n	800132c <HAL_RCC_OscConfig+0xec>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001376:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	f012 0f0c 	tst.w	r2, #12
 800137e:	d010      	beq.n	80013a2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001386:	2a08      	cmp	r2, #8
 8001388:	d102      	bne.n	8001390 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	0258      	lsls	r0, r3, #9
 800138e:	d508      	bpl.n	80013a2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001390:	4a48      	ldr	r2, [pc, #288]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001392:	6893      	ldr	r3, [r2, #8]
 8001394:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001398:	2b0c      	cmp	r3, #12
 800139a:	d111      	bne.n	80013c0 <HAL_RCC_OscConfig+0x180>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139c:	6853      	ldr	r3, [r2, #4]
 800139e:	0259      	lsls	r1, r3, #9
 80013a0:	d40e      	bmi.n	80013c0 <HAL_RCC_OscConfig+0x180>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	0792      	lsls	r2, r2, #30
 80013a8:	d502      	bpl.n	80013b0 <HAL_RCC_OscConfig+0x170>
 80013aa:	68e2      	ldr	r2, [r4, #12]
 80013ac:	2a01      	cmp	r2, #1
 80013ae:	d1a6      	bne.n	80012fe <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	6921      	ldr	r1, [r4, #16]
 80013b4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80013b8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80013bc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	e748      	b.n	8001252 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c0:	68e2      	ldr	r2, [r4, #12]
 80013c2:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <HAL_RCC_OscConfig+0x27c>)
 80013c4:	b1b2      	cbz	r2, 80013f4 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_ENABLE();
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013ca:	f7ff f8d9 	bl	8000580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ce:	4d39      	ldr	r5, [pc, #228]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 80013d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	079b      	lsls	r3, r3, #30
 80013d6:	d507      	bpl.n	80013e8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	6922      	ldr	r2, [r4, #16]
 80013dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013e4:	602b      	str	r3, [r5, #0]
 80013e6:	e734      	b.n	8001252 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff f8ca 	bl	8000580 <HAL_GetTick>
 80013ec:	1b80      	subs	r0, r0, r6
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d9ef      	bls.n	80013d2 <HAL_RCC_OscConfig+0x192>
 80013f2:	e79b      	b.n	800132c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 80013f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013f6:	f7ff f8c3 	bl	8000580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	4d2e      	ldr	r5, [pc, #184]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 80013fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	682b      	ldr	r3, [r5, #0]
 8001400:	079f      	lsls	r7, r3, #30
 8001402:	f57f af26 	bpl.w	8001252 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff f8bb 	bl	8000580 <HAL_GetTick>
 800140a:	1b80      	subs	r0, r0, r6
 800140c:	2802      	cmp	r0, #2
 800140e:	d9f6      	bls.n	80013fe <HAL_RCC_OscConfig+0x1be>
 8001410:	e78c      	b.n	800132c <HAL_RCC_OscConfig+0xec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001412:	6962      	ldr	r2, [r4, #20]
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <HAL_RCC_OscConfig+0x280>)
 8001416:	b17a      	cbz	r2, 8001438 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_LSI_ENABLE();
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800141c:	f7ff f8b0 	bl	8000580 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001420:	4d24      	ldr	r5, [pc, #144]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 8001422:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001424:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001426:	0798      	lsls	r0, r3, #30
 8001428:	f53f af17 	bmi.w	800125a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff f8a8 	bl	8000580 <HAL_GetTick>
 8001430:	1b80      	subs	r0, r0, r6
 8001432:	2802      	cmp	r0, #2
 8001434:	d9f6      	bls.n	8001424 <HAL_RCC_OscConfig+0x1e4>
 8001436:	e779      	b.n	800132c <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8001438:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800143a:	f7ff f8a1 	bl	8000580 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143e:	4d1d      	ldr	r5, [pc, #116]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 8001440:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001442:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001444:	0799      	lsls	r1, r3, #30
 8001446:	f57f af08 	bpl.w	800125a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff f899 	bl	8000580 <HAL_GetTick>
 800144e:	1b80      	subs	r0, r0, r6
 8001450:	2802      	cmp	r0, #2
 8001452:	d9f6      	bls.n	8001442 <HAL_RCC_OscConfig+0x202>
 8001454:	e76a      	b.n	800132c <HAL_RCC_OscConfig+0xec>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001456:	f7ff f893 	bl	8000580 <HAL_GetTick>
 800145a:	1b80      	subs	r0, r0, r6
 800145c:	2802      	cmp	r0, #2
 800145e:	f67f af13 	bls.w	8001288 <HAL_RCC_OscConfig+0x48>
 8001462:	e763      	b.n	800132c <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	2b05      	cmp	r3, #5
 8001466:	d104      	bne.n	8001472 <HAL_RCC_OscConfig+0x232>
 8001468:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	672b      	str	r3, [r5, #112]	; 0x70
 8001470:	e713      	b.n	800129a <HAL_RCC_OscConfig+0x5a>
 8001472:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	672a      	str	r2, [r5, #112]	; 0x70
 800147a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800147c:	f022 0204 	bic.w	r2, r2, #4
 8001480:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001482:	2b00      	cmp	r3, #0
 8001484:	f47f af0d 	bne.w	80012a2 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8001488:	f7ff f87a 	bl	8000580 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001490:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001492:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001494:	0798      	lsls	r0, r3, #30
 8001496:	f57f af0e 	bpl.w	80012b6 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff f871 	bl	8000580 <HAL_GetTick>
 800149e:	1b80      	subs	r0, r0, r6
 80014a0:	42b8      	cmp	r0, r7
 80014a2:	d9f6      	bls.n	8001492 <HAL_RCC_OscConfig+0x252>
 80014a4:	e742      	b.n	800132c <HAL_RCC_OscConfig+0xec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff f86b 	bl	8000580 <HAL_GetTick>
 80014aa:	1b80      	subs	r0, r0, r6
 80014ac:	42b8      	cmp	r0, r7
 80014ae:	f67f aefe 	bls.w	80012ae <HAL_RCC_OscConfig+0x6e>
 80014b2:	e73b      	b.n	800132c <HAL_RCC_OscConfig+0xec>
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000
 80014bc:	42470000 	.word	0x42470000
 80014c0:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014c4:	4d23      	ldr	r5, [pc, #140]	; (8001554 <HAL_RCC_OscConfig+0x314>)
 80014c6:	68ab      	ldr	r3, [r5, #8]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	f43f af16 	beq.w	80012fe <HAL_RCC_OscConfig+0xbe>
 80014d2:	4e21      	ldr	r6, [pc, #132]	; (8001558 <HAL_RCC_OscConfig+0x318>)
 80014d4:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80014d8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014da:	d12d      	bne.n	8001538 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80014dc:	f7ff f850 	bl	8000580 <HAL_GetTick>
 80014e0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	682b      	ldr	r3, [r5, #0]
 80014e4:	0199      	lsls	r1, r3, #6
 80014e6:	d421      	bmi.n	800152c <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e8:	6a22      	ldr	r2, [r4, #32]
 80014ea:	69e3      	ldr	r3, [r4, #28]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014f0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014fc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001500:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001502:	4c14      	ldr	r4, [pc, #80]	; (8001554 <HAL_RCC_OscConfig+0x314>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001504:	0852      	lsrs	r2, r2, #1
 8001506:	3a01      	subs	r2, #1
 8001508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800150c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800150e:	2301      	movs	r3, #1
 8001510:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001512:	f7ff f835 	bl	8000580 <HAL_GetTick>
 8001516:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	019a      	lsls	r2, r3, #6
 800151c:	f53f aecf 	bmi.w	80012be <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff f82e 	bl	8000580 <HAL_GetTick>
 8001524:	1b40      	subs	r0, r0, r5
 8001526:	2802      	cmp	r0, #2
 8001528:	d9f6      	bls.n	8001518 <HAL_RCC_OscConfig+0x2d8>
 800152a:	e6ff      	b.n	800132c <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff f828 	bl	8000580 <HAL_GetTick>
 8001530:	1bc0      	subs	r0, r0, r7
 8001532:	2802      	cmp	r0, #2
 8001534:	d9d5      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2a2>
 8001536:	e6f9      	b.n	800132c <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8001538:	f7ff f822 	bl	8000580 <HAL_GetTick>
 800153c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	682b      	ldr	r3, [r5, #0]
 8001540:	019b      	lsls	r3, r3, #6
 8001542:	f57f aebc 	bpl.w	80012be <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff f81b 	bl	8000580 <HAL_GetTick>
 800154a:	1b00      	subs	r0, r0, r4
 800154c:	2802      	cmp	r0, #2
 800154e:	d9f6      	bls.n	800153e <HAL_RCC_OscConfig+0x2fe>
 8001550:	e6ec      	b.n	800132c <HAL_RCC_OscConfig+0xec>
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	42470060 	.word	0x42470060

0800155c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800155c:	6803      	ldr	r3, [r0, #0]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001564:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	f022 0201 	bic.w	r2, r2, #1
 800156c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800156e:	2320      	movs	r3, #32
 8001570:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001574:	4770      	bx	lr
	...

08001578 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800157c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800157e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001580:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001582:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001584:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001588:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800158a:	6133      	str	r3, [r6, #16]
{
 800158c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800158e:	6883      	ldr	r3, [r0, #8]
 8001590:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001592:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001594:	4303      	orrs	r3, r0
 8001596:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001598:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800159c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800159e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015a2:	430b      	orrs	r3, r1
 80015a4:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80015a6:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80015a8:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80015aa:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80015ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80015b0:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80015b6:	6173      	str	r3, [r6, #20]
 80015b8:	4b7a      	ldr	r3, [pc, #488]	; (80017a4 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015ba:	d17c      	bne.n	80016b6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80015bc:	429e      	cmp	r6, r3
 80015be:	d003      	beq.n	80015c8 <UART_SetConfig+0x50>
 80015c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015c4:	429e      	cmp	r6, r3
 80015c6:	d144      	bne.n	8001652 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80015c8:	f7ff fde2 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 80015cc:	2519      	movs	r5, #25
 80015ce:	fb05 f300 	mul.w	r3, r5, r0
 80015d2:	6860      	ldr	r0, [r4, #4]
 80015d4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015d8:	0040      	lsls	r0, r0, #1
 80015da:	fbb3 f3f0 	udiv	r3, r3, r0
 80015de:	fbb3 f3f9 	udiv	r3, r3, r9
 80015e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80015e6:	f7ff fdd3 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 80015ea:	6863      	ldr	r3, [r4, #4]
 80015ec:	4368      	muls	r0, r5
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fbb0 f7f3 	udiv	r7, r0, r3
 80015f4:	f7ff fdcc 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 80015f8:	6863      	ldr	r3, [r4, #4]
 80015fa:	4368      	muls	r0, r5
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001602:	fbb3 f3f9 	udiv	r3, r3, r9
 8001606:	fb09 7313 	mls	r3, r9, r3, r7
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	3332      	adds	r3, #50	; 0x32
 800160e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001618:	f7ff fdba 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 800161c:	6862      	ldr	r2, [r4, #4]
 800161e:	4368      	muls	r0, r5
 8001620:	0052      	lsls	r2, r2, #1
 8001622:	fbb0 faf2 	udiv	sl, r0, r2
 8001626:	f7ff fdb3 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800162a:	6863      	ldr	r3, [r4, #4]
 800162c:	4368      	muls	r0, r5
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fbb0 f3f3 	udiv	r3, r0, r3
 8001634:	fbb3 f3f9 	udiv	r3, r3, r9
 8001638:	fb09 a313 	mls	r3, r9, r3, sl
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	3332      	adds	r3, #50	; 0x32
 8001640:	fbb3 f3f9 	udiv	r3, r3, r9
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800164a:	443b      	add	r3, r7
 800164c:	60b3      	str	r3, [r6, #8]
 800164e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001652:	f7ff fd8d 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001656:	2519      	movs	r5, #25
 8001658:	fb05 f300 	mul.w	r3, r5, r0
 800165c:	6860      	ldr	r0, [r4, #4]
 800165e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001662:	0040      	lsls	r0, r0, #1
 8001664:	fbb3 f3f0 	udiv	r3, r3, r0
 8001668:	fbb3 f3f9 	udiv	r3, r3, r9
 800166c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001670:	f7ff fd7e 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001674:	6863      	ldr	r3, [r4, #4]
 8001676:	4368      	muls	r0, r5
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fbb0 f7f3 	udiv	r7, r0, r3
 800167e:	f7ff fd77 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001682:	6863      	ldr	r3, [r4, #4]
 8001684:	4368      	muls	r0, r5
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fbb0 f3f3 	udiv	r3, r0, r3
 800168c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001690:	fb09 7313 	mls	r3, r9, r3, r7
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	3332      	adds	r3, #50	; 0x32
 8001698:	fbb3 f3f9 	udiv	r3, r3, r9
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80016a2:	f7ff fd65 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 80016a6:	6862      	ldr	r2, [r4, #4]
 80016a8:	4368      	muls	r0, r5
 80016aa:	0052      	lsls	r2, r2, #1
 80016ac:	fbb0 faf2 	udiv	sl, r0, r2
 80016b0:	f7ff fd5e 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 80016b4:	e7b9      	b.n	800162a <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80016b6:	429e      	cmp	r6, r3
 80016b8:	d002      	beq.n	80016c0 <UART_SetConfig+0x148>
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <UART_SetConfig+0x230>)
 80016bc:	429e      	cmp	r6, r3
 80016be:	d140      	bne.n	8001742 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016c0:	f7ff fd66 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 80016c4:	6867      	ldr	r7, [r4, #4]
 80016c6:	2519      	movs	r5, #25
 80016c8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016cc:	fb05 f300 	mul.w	r3, r5, r0
 80016d0:	00bf      	lsls	r7, r7, #2
 80016d2:	fbb3 f3f7 	udiv	r3, r3, r7
 80016d6:	fbb3 f3f9 	udiv	r3, r3, r9
 80016da:	011f      	lsls	r7, r3, #4
 80016dc:	f7ff fd58 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 80016e0:	6863      	ldr	r3, [r4, #4]
 80016e2:	4368      	muls	r0, r5
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	fbb0 f8f3 	udiv	r8, r0, r3
 80016ea:	f7ff fd51 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 80016ee:	6863      	ldr	r3, [r4, #4]
 80016f0:	4368      	muls	r0, r5
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80016fc:	fb09 8313 	mls	r3, r9, r3, r8
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	3332      	adds	r3, #50	; 0x32
 8001704:	fbb3 f3f9 	udiv	r3, r3, r9
 8001708:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800170c:	f7ff fd40 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 8001710:	6862      	ldr	r2, [r4, #4]
 8001712:	4368      	muls	r0, r5
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	fbb0 faf2 	udiv	sl, r0, r2
 800171a:	f7ff fd39 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800171e:	6863      	ldr	r3, [r4, #4]
 8001720:	4368      	muls	r0, r5
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	fbb0 f3f3 	udiv	r3, r0, r3
 8001728:	fbb3 f3f9 	udiv	r3, r3, r9
 800172c:	fb09 a313 	mls	r3, r9, r3, sl
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	3332      	adds	r3, #50	; 0x32
 8001734:	fbb3 f3f9 	udiv	r3, r3, r9
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	ea43 0308 	orr.w	r3, r3, r8
 8001740:	e783      	b.n	800164a <UART_SetConfig+0xd2>
 8001742:	f7ff fd15 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001746:	6867      	ldr	r7, [r4, #4]
 8001748:	2519      	movs	r5, #25
 800174a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800174e:	fb05 f300 	mul.w	r3, r5, r0
 8001752:	00bf      	lsls	r7, r7, #2
 8001754:	fbb3 f3f7 	udiv	r3, r3, r7
 8001758:	fbb3 f3f9 	udiv	r3, r3, r9
 800175c:	011f      	lsls	r7, r3, #4
 800175e:	f7ff fd07 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001762:	6863      	ldr	r3, [r4, #4]
 8001764:	4368      	muls	r0, r5
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fbb0 f8f3 	udiv	r8, r0, r3
 800176c:	f7ff fd00 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001770:	6863      	ldr	r3, [r4, #4]
 8001772:	4368      	muls	r0, r5
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	fbb0 f3f3 	udiv	r3, r0, r3
 800177a:	fbb3 f3f9 	udiv	r3, r3, r9
 800177e:	fb09 8313 	mls	r3, r9, r3, r8
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	3332      	adds	r3, #50	; 0x32
 8001786:	fbb3 f3f9 	udiv	r3, r3, r9
 800178a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800178e:	f7ff fcef 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001792:	6862      	ldr	r2, [r4, #4]
 8001794:	4368      	muls	r0, r5
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	fbb0 faf2 	udiv	sl, r0, r2
 800179c:	f7ff fce8 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 80017a0:	e7bd      	b.n	800171e <UART_SetConfig+0x1a6>
 80017a2:	bf00      	nop
 80017a4:	40011000 	.word	0x40011000
 80017a8:	40011400 	.word	0x40011400

080017ac <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ae:	4604      	mov	r4, r0
 80017b0:	460e      	mov	r6, r1
 80017b2:	4617      	mov	r7, r2
 80017b4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80017b6:	6821      	ldr	r1, [r4, #0]
 80017b8:	680b      	ldr	r3, [r1, #0]
 80017ba:	ea36 0303 	bics.w	r3, r6, r3
 80017be:	d101      	bne.n	80017c4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80017c0:	2000      	movs	r0, #0
}
 80017c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80017c4:	1c6b      	adds	r3, r5, #1
 80017c6:	d0f7      	beq.n	80017b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017c8:	b995      	cbnz	r5, 80017f0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80017dc:	2320      	movs	r3, #32
 80017de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80017e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80017e6:	2300      	movs	r3, #0
 80017e8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80017ec:	2003      	movs	r0, #3
 80017ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017f0:	f7fe fec6 	bl	8000580 <HAL_GetTick>
 80017f4:	1bc0      	subs	r0, r0, r7
 80017f6:	4285      	cmp	r5, r0
 80017f8:	d2dd      	bcs.n	80017b6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80017fa:	e7e6      	b.n	80017ca <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080017fc <HAL_UART_Init>:
{
 80017fc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80017fe:	4604      	mov	r4, r0
 8001800:	b340      	cbz	r0, 8001854 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001802:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001806:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800180a:	b91b      	cbnz	r3, 8001814 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800180c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001810:	f000 ff4c 	bl	80026ac <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001814:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001816:	2324      	movs	r3, #36	; 0x24
 8001818:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800181c:	68d3      	ldr	r3, [r2, #12]
 800181e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001822:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001824:	4620      	mov	r0, r4
 8001826:	f7ff fea7 	bl	8001578 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001832:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800183a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001842:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001844:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001846:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001848:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800184a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800184e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001852:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001854:	2001      	movs	r0, #1
}
 8001856:	bd10      	pop	{r4, pc}

08001858 <HAL_UART_Transmit>:
{
 8001858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800185c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800185e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001862:	2b20      	cmp	r3, #32
{
 8001864:	4604      	mov	r4, r0
 8001866:	460d      	mov	r5, r1
 8001868:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800186a:	d14f      	bne.n	800190c <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 800186c:	2900      	cmp	r1, #0
 800186e:	d04a      	beq.n	8001906 <HAL_UART_Transmit+0xae>
 8001870:	2a00      	cmp	r2, #0
 8001872:	d048      	beq.n	8001906 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001874:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001878:	2b01      	cmp	r3, #1
 800187a:	d047      	beq.n	800190c <HAL_UART_Transmit+0xb4>
 800187c:	2301      	movs	r3, #1
 800187e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001882:	2300      	movs	r3, #0
 8001884:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001886:	2321      	movs	r3, #33	; 0x21
 8001888:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800188c:	f7fe fe78 	bl	8000580 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001890:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001894:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001896:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800189a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800189c:	b29b      	uxth	r3, r3
 800189e:	b96b      	cbnz	r3, 80018bc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	4632      	mov	r2, r6
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	4620      	mov	r0, r4
 80018a8:	f7ff ff80 	bl	80017ac <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018ac:	b9b0      	cbnz	r0, 80018dc <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80018ae:	2320      	movs	r3, #32
 80018b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80018b4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80018b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80018bc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018c4:	68a3      	ldr	r3, [r4, #8]
 80018c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ca:	4632      	mov	r2, r6
 80018cc:	463b      	mov	r3, r7
 80018ce:	f04f 0180 	mov.w	r1, #128	; 0x80
 80018d2:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018d4:	d10e      	bne.n	80018f4 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018d6:	f7ff ff69 	bl	80017ac <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018da:	b110      	cbz	r0, 80018e2 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80018dc:	2003      	movs	r0, #3
 80018de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80018e2:	882b      	ldrh	r3, [r5, #0]
 80018e4:	6822      	ldr	r2, [r4, #0]
 80018e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ea:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80018ec:	6923      	ldr	r3, [r4, #16]
 80018ee:	b943      	cbnz	r3, 8001902 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80018f0:	3502      	adds	r5, #2
 80018f2:	e7d2      	b.n	800189a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018f4:	f7ff ff5a 	bl	80017ac <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d1ef      	bne.n	80018dc <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	782a      	ldrb	r2, [r5, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	3501      	adds	r5, #1
 8001904:	e7c9      	b.n	800189a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001906:	2001      	movs	r0, #1
 8001908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800190c:	2002      	movs	r0, #2
}
 800190e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001914 <HAL_UART_Transmit_DMA>:
{
 8001914:	b538      	push	{r3, r4, r5, lr}
 8001916:	4604      	mov	r4, r0
 8001918:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800191a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800191e:	2a20      	cmp	r2, #32
 8001920:	d12a      	bne.n	8001978 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL ) || (Size == 0))
 8001922:	b339      	cbz	r1, 8001974 <HAL_UART_Transmit_DMA+0x60>
 8001924:	b333      	cbz	r3, 8001974 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8001926:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800192a:	2a01      	cmp	r2, #1
 800192c:	d024      	beq.n	8001978 <HAL_UART_Transmit_DMA+0x64>
 800192e:	2201      	movs	r2, #1
 8001930:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001934:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 8001936:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001938:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800193a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800193c:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800193e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8001944:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8001946:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001948:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <HAL_UART_Transmit_DMA+0x6c>)
 800194c:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800194e:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <HAL_UART_Transmit_DMA+0x70>)
 8001950:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001952:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8001954:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001956:	3204      	adds	r2, #4
 8001958:	f7ff f926 	bl	8000ba8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001962:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001964:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8001966:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800196a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800196e:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8001970:	4628      	mov	r0, r5
 8001972:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001974:	2001      	movs	r0, #1
 8001976:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8001978:	2002      	movs	r0, #2
}
 800197a:	bd38      	pop	{r3, r4, r5, pc}
 800197c:	0800198b 	.word	0x0800198b
 8001980:	080019b9 	.word	0x080019b9
 8001984:	080019c5 	.word	0x080019c5

08001988 <HAL_UART_TxCpltCallback>:
 8001988:	4770      	bx	lr

0800198a <UART_DMATransmitCplt>:
{
 800198a:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800198c:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800198e:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001996:	d10a      	bne.n	80019ae <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 8001998:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a2:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80019ae:	4610      	mov	r0, r2
 80019b0:	f7ff ffea 	bl	8001988 <HAL_UART_TxCpltCallback>
 80019b4:	bd08      	pop	{r3, pc}

080019b6 <HAL_UART_TxHalfCpltCallback>:
 80019b6:	4770      	bx	lr

080019b8 <UART_DMATxHalfCplt>:
{
 80019b8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80019ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80019bc:	f7ff fffb 	bl	80019b6 <HAL_UART_TxHalfCpltCallback>
 80019c0:	bd08      	pop	{r3, pc}

080019c2 <HAL_UART_ErrorCallback>:
 80019c2:	4770      	bx	lr

080019c4 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019c4:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 80019c6:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80019c8:	680b      	ldr	r3, [r1, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80019cc:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 80019d0:	2821      	cmp	r0, #33	; 0x21
 80019d2:	d10a      	bne.n	80019ea <UART_DMAError+0x26>
 80019d4:	0612      	lsls	r2, r2, #24
 80019d6:	d508      	bpl.n	80019ea <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 80019d8:	2200      	movs	r2, #0
 80019da:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80019e2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80019e4:	2220      	movs	r2, #32
 80019e6:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80019ea:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80019ec:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80019f0:	2a22      	cmp	r2, #34	; 0x22
 80019f2:	d106      	bne.n	8001a02 <UART_DMAError+0x3e>
 80019f4:	065b      	lsls	r3, r3, #25
 80019f6:	d504      	bpl.n	8001a02 <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80019fc:	4608      	mov	r0, r1
 80019fe:	f7ff fdad 	bl	800155c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001a02:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001a04:	f043 0310 	orr.w	r3, r3, #16
 8001a08:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001a0a:	4608      	mov	r0, r1
 8001a0c:	f7ff ffd9 	bl	80019c2 <HAL_UART_ErrorCallback>
 8001a10:	bd08      	pop	{r3, pc}
	...

08001a14 <MX_ADC1_Init>:
void MX_ADC1_Init(void)
{

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8001a14:	4838      	ldr	r0, [pc, #224]	; (8001af8 <MX_ADC1_Init+0xe4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <MX_ADC1_Init+0xe8>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a18:	4939      	ldr	r1, [pc, #228]	; (8001b00 <MX_ADC1_Init+0xec>)
{
 8001a1a:	b510      	push	{r4, lr}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a1c:	2200      	movs	r2, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a1e:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8001a22:	e880 4008 	stmia.w	r0, {r3, lr}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a26:	6082      	str	r2, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a28:	2301      	movs	r3, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a2a:	6202      	str	r2, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a2c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2e:	60c2      	str	r2, [r0, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001a30:	2206      	movs	r2, #6
  hadc1.Init.ScanConvMode = ENABLE;
 8001a32:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a34:	6183      	str	r3, [r0, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a36:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 6;
 8001a38:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a3a:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a3c:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a3e:	f7fe fda5 	bl	800058c <HAL_ADC_Init>
 8001a42:	b118      	cbz	r0, 8001a4c <MX_ADC1_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a44:	214a      	movs	r1, #74	; 0x4a
 8001a46:	482f      	ldr	r0, [pc, #188]	; (8001b04 <MX_ADC1_Init+0xf0>)
 8001a48:	f000 fd7e 	bl	8002548 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a4c:	4c2e      	ldr	r4, [pc, #184]	; (8001b08 <MX_ADC1_Init+0xf4>)
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a4e:	482a      	ldr	r0, [pc, #168]	; (8001af8 <MX_ADC1_Init+0xe4>)
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001a50:	2100      	movs	r1, #0
 8001a52:	2201      	movs	r2, #1
 8001a54:	2303      	movs	r3, #3
 8001a56:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	f7fe fefe 	bl	800085c <HAL_ADC_ConfigChannel>
 8001a60:	b118      	cbz	r0, 8001a6a <MX_ADC1_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a62:	2154      	movs	r1, #84	; 0x54
 8001a64:	4827      	ldr	r0, [pc, #156]	; (8001b04 <MX_ADC1_Init+0xf0>)
 8001a66:	f000 fd6f 	bl	8002548 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 2;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f04f 0c02 	mov.w	ip, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a70:	4925      	ldr	r1, [pc, #148]	; (8001b08 <MX_ADC1_Init+0xf4>)
 8001a72:	4821      	ldr	r0, [pc, #132]	; (8001af8 <MX_ADC1_Init+0xe4>)
  sConfig.Rank = 2;
 8001a74:	e884 1008 	stmia.w	r4, {r3, ip}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a78:	f7fe fef0 	bl	800085c <HAL_ADC_ConfigChannel>
 8001a7c:	b118      	cbz	r0, 8001a86 <MX_ADC1_Init+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a7e:	215d      	movs	r1, #93	; 0x5d
 8001a80:	4820      	ldr	r0, [pc, #128]	; (8001b04 <MX_ADC1_Init+0xf0>)
 8001a82:	f000 fd61 	bl	8002548 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 3;
 8001a86:	2304      	movs	r3, #4
 8001a88:	f04f 0e03 	mov.w	lr, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a8c:	491e      	ldr	r1, [pc, #120]	; (8001b08 <MX_ADC1_Init+0xf4>)
 8001a8e:	481a      	ldr	r0, [pc, #104]	; (8001af8 <MX_ADC1_Init+0xe4>)
  sConfig.Rank = 3;
 8001a90:	e884 4008 	stmia.w	r4, {r3, lr}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a94:	f7fe fee2 	bl	800085c <HAL_ADC_ConfigChannel>
 8001a98:	b118      	cbz	r0, 8001aa2 <MX_ADC1_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a9a:	2166      	movs	r1, #102	; 0x66
 8001a9c:	4819      	ldr	r0, [pc, #100]	; (8001b04 <MX_ADC1_Init+0xf0>)
 8001a9e:	f000 fd53 	bl	8002548 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = 4;
 8001aa2:	2006      	movs	r0, #6
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	e884 0009 	stmia.w	r4, {r0, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aaa:	4917      	ldr	r1, [pc, #92]	; (8001b08 <MX_ADC1_Init+0xf4>)
 8001aac:	4812      	ldr	r0, [pc, #72]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001aae:	f7fe fed5 	bl	800085c <HAL_ADC_ConfigChannel>
 8001ab2:	b118      	cbz	r0, 8001abc <MX_ADC1_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ab4:	216f      	movs	r1, #111	; 0x6f
 8001ab6:	4813      	ldr	r0, [pc, #76]	; (8001b04 <MX_ADC1_Init+0xf0>)
 8001ab8:	f000 fd46 	bl	8002548 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = 5;
 8001abc:	2107      	movs	r1, #7
 8001abe:	2305      	movs	r3, #5
 8001ac0:	e884 000a 	stmia.w	r4, {r1, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001ac6:	4910      	ldr	r1, [pc, #64]	; (8001b08 <MX_ADC1_Init+0xf4>)
 8001ac8:	f7fe fec8 	bl	800085c <HAL_ADC_ConfigChannel>
 8001acc:	b118      	cbz	r0, 8001ad6 <MX_ADC1_Init+0xc2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ace:	2178      	movs	r1, #120	; 0x78
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <MX_ADC1_Init+0xf0>)
 8001ad2:	f000 fd39 	bl	8002548 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = 6;
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ada:	490b      	ldr	r1, [pc, #44]	; (8001b08 <MX_ADC1_Init+0xf4>)
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <MX_ADC1_Init+0xe4>)
  sConfig.Rank = 6;
 8001ade:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae2:	f7fe febb 	bl	800085c <HAL_ADC_ConfigChannel>
 8001ae6:	b128      	cbz	r0, 8001af4 <MX_ADC1_Init+0xe0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ae8:	2181      	movs	r1, #129	; 0x81
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <MX_ADC1_Init+0xf0>)
  }

}
 8001aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001af0:	f000 bd2a 	b.w	8002548 <_Error_Handler>
 8001af4:	bd10      	pop	{r4, pc}
 8001af6:	bf00      	nop
 8001af8:	20000034 	.word	0x20000034
 8001afc:	40012000 	.word	0x40012000
 8001b00:	0f000001 	.word	0x0f000001
 8001b04:	08002d58 	.word	0x08002d58
 8001b08:	200000dc 	.word	0x200000dc

08001b0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b0c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001b0e:	6802      	ldr	r2, [r0, #0]
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_ADC_MspInit+0x90>)
 8001b12:	429a      	cmp	r2, r3
{
 8001b14:	b086      	sub	sp, #24
 8001b16:	4606      	mov	r6, r0
  if(adcHandle->Instance==ADC1)
 8001b18:	d13d      	bne.n	8001b96 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b1a:	2500      	movs	r5, #0
 8001b1c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001b20:	9500      	str	r5, [sp, #0]
 8001b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	481e      	ldr	r0, [pc, #120]	; (8001ba0 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b2a:	645a      	str	r2, [r3, #68]	; 0x44
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b36:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b38:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3a:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 8001b3c:	23d3      	movs	r3, #211	; 0xd3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 8001b40:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f7ff f929 	bl	8000d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b46:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	4816      	ldr	r0, [pc, #88]	; (8001ba4 <HAL_ADC_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b4a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4e:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	9503      	str	r5, [sp, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b52:	4c15      	ldr	r4, [pc, #84]	; (8001ba8 <HAL_ADC_MspInit+0x9c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f7ff f920 	bl	8000d98 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b5a:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b5c:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b64:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b6a:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b70:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b76:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b78:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7e:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b80:	6223      	str	r3, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b82:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b84:	f7fe ff92 	bl	8000aac <HAL_DMA_Init>
 8001b88:	b118      	cbz	r0, 8001b92 <HAL_ADC_MspInit+0x86>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001b8a:	21b3      	movs	r1, #179	; 0xb3
 8001b8c:	4808      	ldr	r0, [pc, #32]	; (8001bb0 <HAL_ADC_MspInit+0xa4>)
 8001b8e:	f000 fcdb 	bl	8002548 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001b92:	63b4      	str	r4, [r6, #56]	; 0x38
 8001b94:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001b96:	b006      	add	sp, #24
 8001b98:	bd70      	pop	{r4, r5, r6, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40012000 	.word	0x40012000
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	2000007c 	.word	0x2000007c
 8001bac:	40026410 	.word	0x40026410
 8001bb0:	08002d58 	.word	0x08002d58

08001bb4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001bb4:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <MX_DMA_Init+0x40>)
 8001bb8:	2400      	movs	r4, #0
 8001bba:	9401      	str	r4, [sp, #4]
 8001bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bbe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001bca:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bcc:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001bce:	2101      	movs	r1, #1
 8001bd0:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bd2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001bd4:	f7fe feec 	bl	80009b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bd8:	2038      	movs	r0, #56	; 0x38
 8001bda:	f7fe ff1d 	bl	8000a18 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 2, 0);
 8001bde:	4622      	mov	r2, r4
 8001be0:	2102      	movs	r1, #2
 8001be2:	2046      	movs	r0, #70	; 0x46
 8001be4:	f7fe fee4 	bl	80009b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001be8:	2046      	movs	r0, #70	; 0x46
 8001bea:	f7fe ff15 	bl	8000a18 <HAL_NVIC_EnableIRQ>

}
 8001bee:	b002      	add	sp, #8
 8001bf0:	bd10      	pop	{r4, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfa:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfc:	2400      	movs	r4, #0
 8001bfe:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <MX_GPIO_Init+0xac>)
 8001c00:	9401      	str	r4, [sp, #4]
 8001c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001c04:	4d28      	ldr	r5, [pc, #160]	; (8001ca8 <MX_GPIO_Init+0xb0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c06:	4e29      	ldr	r6, [pc, #164]	; (8001cac <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c08:	f042 0204 	orr.w	r2, r2, #4
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c10:	f002 0204 	and.w	r2, r2, #4
 8001c14:	9201      	str	r2, [sp, #4]
 8001c16:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c18:	9402      	str	r4, [sp, #8]
 8001c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
 8001c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c24:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001c28:	9202      	str	r2, [sp, #8]
 8001c2a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	9403      	str	r4, [sp, #12]
 8001c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
 8001c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c38:	f002 0201 	and.w	r2, r2, #1
 8001c3c:	9203      	str	r2, [sp, #12]
 8001c3e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	9404      	str	r4, [sp, #16]
 8001c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c44:	f042 0202 	orr.w	r2, r2, #2
 8001c48:	631a      	str	r2, [r3, #48]	; 0x30
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001c52:	4622      	mov	r2, r4
 8001c54:	4628      	mov	r0, r5
 8001c56:	2107      	movs	r1, #7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001c5a:	f7ff f97d 	bl	8000f58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c5e:	4622      	mov	r2, r4
 8001c60:	4630      	mov	r0, r6
 8001c62:	2120      	movs	r1, #32
 8001c64:	f7ff f978 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001c68:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6c:	a905      	add	r1, sp, #20
 8001c6e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001c70:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c78:	f7ff f88e 	bl	8000d98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c7c:	2307      	movs	r3, #7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7e:	a905      	add	r1, sp, #20
 8001c80:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c82:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8a:	f7ff f885 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c8e:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	a905      	add	r1, sp, #20
 8001c92:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c94:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c96:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f7ff f87c 	bl	8000d98 <HAL_GPIO_Init>

}
 8001ca0:	b00b      	add	sp, #44	; 0x2c
 8001ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020000 	.word	0x40020000

08001cb0 <MX_IWDG_Init>:

/* IWDG init function */
void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 8001cb0:	4808      	ldr	r0, [pc, #32]	; (8001cd4 <MX_IWDG_Init+0x24>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
  hiwdg.Init.Reload = 4095;
 8001cb2:	4909      	ldr	r1, [pc, #36]	; (8001cd8 <MX_IWDG_Init+0x28>)
{
 8001cb4:	b508      	push	{r3, lr}
  hiwdg.Init.Reload = 4095;
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001cbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001cc0:	f7ff f953 	bl	8000f6a <HAL_IWDG_Init>
 8001cc4:	b128      	cbz	r0, 8001cd2 <MX_IWDG_Init+0x22>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001cc6:	213a      	movs	r1, #58	; 0x3a
 8001cc8:	4804      	ldr	r0, [pc, #16]	; (8001cdc <MX_IWDG_Init+0x2c>)
  }

}
 8001cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001cce:	f000 bc3b 	b.w	8002548 <_Error_Handler>
 8001cd2:	bd08      	pop	{r3, pc}
 8001cd4:	200000ec 	.word	0x200000ec
 8001cd8:	40003000 	.word	0x40003000
 8001cdc:	08002d65 	.word	0x08002d65

08001ce0 <int_sort>:
uint16_t sortdata1[5],sortdata2[5],sortdata3[5],sortdata4[5],sortdata5[5],sortdata6[5];
uint16_t out_lowpass[6];
uint16_t medianfilter_out1,medianfilter_out2,medianfilter_out3,medianfilter_out4,medianfilter_out5,medianfilter_out6;
uint16_t out_lowpass_temp1,out_lowpass_temp2,out_lowpass_temp3,out_lowpass_temp4,out_lowpass_temp5,out_lowpass_temp6;
int int_sort( const void *p, const void *q ) {
    return *(uint16_t*)p - *(uint16_t*)q;
 8001ce0:	8800      	ldrh	r0, [r0, #0]
 8001ce2:	880b      	ldrh	r3, [r1, #0]
}
 8001ce4:	1ac0      	subs	r0, r0, r3
 8001ce6:	4770      	bx	lr

08001ce8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001ce8:	b530      	push	{r4, r5, lr}
 8001cea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <SystemClock_Config+0xb4>)
 8001cee:	2100      	movs	r1, #0
 8001cf0:	9100      	str	r1, [sp, #0]
 8001cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d04:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <SystemClock_Config+0xb8>)
 8001d06:	9101      	str	r1, [sp, #4]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001d1a:	2309      	movs	r3, #9
 8001d1c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d22:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d24:	2301      	movs	r3, #1
 8001d26:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d2e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d30:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d32:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d34:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d36:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d38:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d3a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d3c:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d3e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d40:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d42:	f7ff fa7d 	bl	8001240 <HAL_RCC_OscConfig>
 8001d46:	b100      	cbz	r0, 8001d4a <SystemClock_Config+0x62>
 8001d48:	e7fe      	b.n	8001d48 <SystemClock_Config+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d4a:	f7ff f935 	bl	8000fb8 <HAL_PWREx_EnableOverDrive>
 8001d4e:	b100      	cbz	r0, 8001d52 <SystemClock_Config+0x6a>
 8001d50:	e7fe      	b.n	8001d50 <SystemClock_Config+0x68>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d52:	230f      	movs	r3, #15
 8001d54:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d5c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d5e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d64:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d66:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d68:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d6a:	f7ff f961 	bl	8001030 <HAL_RCC_ClockConfig>
 8001d6e:	4604      	mov	r4, r0
 8001d70:	b100      	cbz	r0, 8001d74 <SystemClock_Config+0x8c>
 8001d72:	e7fe      	b.n	8001d72 <SystemClock_Config+0x8a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001d74:	f7ff f9f6 	bl	8001164 <HAL_RCC_GetHCLKFreq>
 8001d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d80:	f7fe fe56 	bl	8000a30 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d84:	4628      	mov	r0, r5
 8001d86:	f7fe fe69 	bl	8000a5c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d92:	f7fe fe0d 	bl	80009b0 <HAL_NVIC_SetPriority>
}
 8001d96:	b015      	add	sp, #84	; 0x54
 8001d98:	bd30      	pop	{r4, r5, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40007000 	.word	0x40007000

08001da4 <main>:
{
 8001da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da8:	ed2d 8b02 	vpush	{d8}
 8001dac:	b083      	sub	sp, #12
  HAL_Init();
 8001dae:	f7fe fbc5 	bl	800053c <HAL_Init>
  SystemClock_Config();
 8001db2:	f7ff ff99 	bl	8001ce8 <SystemClock_Config>
  MX_GPIO_Init();
 8001db6:	f7ff ff1f 	bl	8001bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dba:	f7ff fefb 	bl	8001bb4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001dbe:	f000 fc35 	bl	800262c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001dc2:	f000 fc53 	bl	800266c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001dc6:	f7ff fe25 	bl	8001a14 <MX_ADC1_Init>
  MX_IWDG_Init();
 8001dca:	f7ff ff71 	bl	8001cb0 <MX_IWDG_Init>
  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0){
 8001dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd2:	4813      	ldr	r0, [pc, #76]	; (8001e20 <main+0x7c>)
 8001dd4:	f7ff f8ba 	bl	8000f4c <HAL_GPIO_ReadPin>
 8001dd8:	4604      	mov	r4, r0
 8001dda:	b988      	cbnz	r0, 8001e00 <main+0x5c>
	  MX_IWDG_Init();
 8001ddc:	f7ff ff68 	bl	8001cb0 <MX_IWDG_Init>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,0);
 8001de0:	4622      	mov	r2, r4
 8001de2:	2101      	movs	r1, #1
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8001de4:	480e      	ldr	r0, [pc, #56]	; (8001e20 <main+0x7c>)
 8001de6:	f7ff f8b7 	bl	8000f58 <HAL_GPIO_WritePin>
    init_xpritf(&huart2);
 8001dea:	480e      	ldr	r0, [pc, #56]	; (8001e24 <main+0x80>)
 8001dec:	f000 fcca 	bl	8002784 <init_xpritf>
    xdev_out(uart_putc);
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <main+0x84>)
 8001df2:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <main+0x88>)
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001df4:	480e      	ldr	r0, [pc, #56]	; (8001e30 <main+0x8c>)
    xdev_out(uart_putc);
 8001df6:	601a      	str	r2, [r3, #0]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001df8:	f7fe fbc8 	bl	800058c <HAL_ADC_Init>
 8001dfc:	b118      	cbz	r0, 8001e06 <main+0x62>
 8001dfe:	e7fe      	b.n	8001dfe <main+0x5a>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8001e00:	2201      	movs	r2, #1
 8001e02:	4611      	mov	r1, r2
 8001e04:	e7ee      	b.n	8001de4 <main+0x40>
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e06:	490b      	ldr	r1, [pc, #44]	; (8001e34 <main+0x90>)
 8001e08:	4809      	ldr	r0, [pc, #36]	; (8001e30 <main+0x8c>)
 8001e0a:	f7fe fd27 	bl	800085c <HAL_ADC_ConfigChannel>
 8001e0e:	b100      	cbz	r0, 8001e12 <main+0x6e>
 8001e10:	e7fe      	b.n	8001e10 <main+0x6c>
     if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)aADCxConvertedData,ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK)
 8001e12:	2206      	movs	r2, #6
 8001e14:	4908      	ldr	r1, [pc, #32]	; (8001e38 <main+0x94>)
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <main+0x8c>)
 8001e18:	f7fe fc5c 	bl	80006d4 <HAL_ADC_Start_DMA>
 8001e1c:	b170      	cbz	r0, 8001e3c <main+0x98>
 8001e1e:	e7fe      	b.n	8001e1e <main+0x7a>
 8001e20:	40020800 	.word	0x40020800
 8001e24:	2000024c 	.word	0x2000024c
 8001e28:	20000290 	.word	0x20000290
 8001e2c:	08002791 	.word	0x08002791
 8001e30:	20000034 	.word	0x20000034
 8001e34:	200000dc 	.word	0x200000dc
 8001e38:	20000020 	.word	0x20000020
     count=0;
 8001e3c:	4bb6      	ldr	r3, [pc, #728]	; (8002118 <main+0x374>)
  	   	  qsort(sortdata1,data_cnt,2,int_sort);
 8001e3e:	f8df b358 	ldr.w	fp, [pc, #856]	; 8002198 <main+0x3f4>
     count=0;
 8001e42:	7018      	strb	r0, [r3, #0]
 8001e44:	2332      	movs	r3, #50	; 0x32
 8001e46:	9300      	str	r3, [sp, #0]
    	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	48b3      	ldr	r0, [pc, #716]	; (800211c <main+0x378>)
    	  tempdata1[count]=aADCxConvertedData[0];
 8001e4e:	4db4      	ldr	r5, [pc, #720]	; (8002120 <main+0x37c>)
 8001e50:	4fb4      	ldr	r7, [pc, #720]	; (8002124 <main+0x380>)
  	   	  tempdata2[count]=aADCxConvertedData[1];
 8001e52:	4eb5      	ldr	r6, [pc, #724]	; (8002128 <main+0x384>)
  	   	  sortdata3[i]=tempdata3[i];
 8001e54:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 8002150 <main+0x3ac>
  	   	  sortdata4[i]=tempdata4[i];
 8001e58:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8002154 <main+0x3b0>
  	   	  sortdata6[i]=tempdata6[i];
 8001e5c:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 8002158 <main+0x3b4>
    	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8001e60:	f7ff f87a 	bl	8000f58 <HAL_GPIO_WritePin>
    	  tempdata1[count]=aADCxConvertedData[0];
 8001e64:	4bac      	ldr	r3, [pc, #688]	; (8002118 <main+0x374>)
  	   	  tempdata3[count]=aADCxConvertedData[2];
 8001e66:	48b1      	ldr	r0, [pc, #708]	; (800212c <main+0x388>)
    	  tempdata1[count]=aADCxConvertedData[0];
 8001e68:	781c      	ldrb	r4, [r3, #0]
 8001e6a:	882b      	ldrh	r3, [r5, #0]
 8001e6c:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
  	   	  tempdata2[count]=aADCxConvertedData[1];
 8001e70:	886b      	ldrh	r3, [r5, #2]
 8001e72:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
  	   	  tempdata4[count]=aADCxConvertedData[3];
 8001e76:	49ae      	ldr	r1, [pc, #696]	; (8002130 <main+0x38c>)
  	   	  tempdata3[count]=aADCxConvertedData[2];
 8001e78:	88ab      	ldrh	r3, [r5, #4]
 8001e7a:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
  	   	  tempdata5[count]=aADCxConvertedData[4];
 8001e7e:	4aad      	ldr	r2, [pc, #692]	; (8002134 <main+0x390>)
  	   	  tempdata4[count]=aADCxConvertedData[3];
 8001e80:	88eb      	ldrh	r3, [r5, #6]
 8001e82:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
  	   	  tempdata5[count]=aADCxConvertedData[4];
 8001e86:	892b      	ldrh	r3, [r5, #8]
 8001e88:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
  	   	  tempdata6[count]=aADCxConvertedData[5];
 8001e8c:	4baa      	ldr	r3, [pc, #680]	; (8002138 <main+0x394>)
 8001e8e:	896d      	ldrh	r5, [r5, #10]
 8001e90:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
 8001e94:	46bc      	mov	ip, r7
 8001e96:	46b6      	mov	lr, r6
  	   	  sortdata1[i]=tempdata1[i];
 8001e98:	4fa8      	ldr	r7, [pc, #672]	; (800213c <main+0x398>)
  	   	  sortdata2[i]=tempdata2[i];
 8001e9a:	4da9      	ldr	r5, [pc, #676]	; (8002140 <main+0x39c>)
  	   	  sortdata5[i]=tempdata5[i];
 8001e9c:	4ea9      	ldr	r6, [pc, #676]	; (8002144 <main+0x3a0>)
  	   	  sortdata6[i]=tempdata6[i];
 8001e9e:	9301      	str	r3, [sp, #4]
  	   	  tempdata6[count]=aADCxConvertedData[5];
 8001ea0:	2400      	movs	r4, #0
  	   	  sortdata1[i]=tempdata1[i];
 8001ea2:	f83c 3014 	ldrh.w	r3, [ip, r4, lsl #1]
 8001ea6:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
  	   	  sortdata2[i]=tempdata2[i];
 8001eaa:	f83e 3014 	ldrh.w	r3, [lr, r4, lsl #1]
 8001eae:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
  	   	  sortdata3[i]=tempdata3[i];
 8001eb2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
 8001eb6:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
  	   	  sortdata4[i]=tempdata4[i];
 8001eba:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
 8001ebe:	f828 3014 	strh.w	r3, [r8, r4, lsl #1]
  	   	  sortdata5[i]=tempdata5[i];
 8001ec2:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8001ec6:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
  	   	  sortdata6[i]=tempdata6[i];
 8001eca:	9b01      	ldr	r3, [sp, #4]
 8001ecc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001ed0:	f82a 3014 	strh.w	r3, [sl, r4, lsl #1]
 8001ed4:	3401      	adds	r4, #1
  	   	  for(uint8_t i=0;i<5;i++){
 8001ed6:	2c05      	cmp	r4, #5
 8001ed8:	d1e3      	bne.n	8001ea2 <main+0xfe>
  	   	  qsort(sortdata1,data_cnt,2,int_sort);
 8001eda:	4621      	mov	r1, r4
 8001edc:	465b      	mov	r3, fp
 8001ede:	2202      	movs	r2, #2
 8001ee0:	4896      	ldr	r0, [pc, #600]	; (800213c <main+0x398>)
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8001ee2:	ed9f 8a99 	vldr	s16, [pc, #612]	; 8002148 <main+0x3a4>
 8001ee6:	eddf 8a99 	vldr	s17, [pc, #612]	; 800214c <main+0x3a8>
  	   	  qsort(sortdata1,data_cnt,2,int_sort);
 8001eea:	f000 fdee 	bl	8002aca <qsort>
  	   	  qsort(sortdata2,data_cnt,2,int_sort);
 8001eee:	4621      	mov	r1, r4
 8001ef0:	465b      	mov	r3, fp
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4892      	ldr	r0, [pc, #584]	; (8002140 <main+0x39c>)
 8001ef6:	f000 fde8 	bl	8002aca <qsort>
  	   	  qsort(sortdata3,data_cnt,2,int_sort);
 8001efa:	4621      	mov	r1, r4
 8001efc:	465b      	mov	r3, fp
 8001efe:	2202      	movs	r2, #2
 8001f00:	4893      	ldr	r0, [pc, #588]	; (8002150 <main+0x3ac>)
 8001f02:	f000 fde2 	bl	8002aca <qsort>
  	   	  qsort(sortdata4,data_cnt,2,int_sort);
 8001f06:	4621      	mov	r1, r4
 8001f08:	465b      	mov	r3, fp
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4891      	ldr	r0, [pc, #580]	; (8002154 <main+0x3b0>)
 8001f0e:	f000 fddc 	bl	8002aca <qsort>
  	   	  qsort(sortdata5,data_cnt,2,int_sort);
 8001f12:	4621      	mov	r1, r4
 8001f14:	465b      	mov	r3, fp
 8001f16:	2202      	movs	r2, #2
 8001f18:	488a      	ldr	r0, [pc, #552]	; (8002144 <main+0x3a0>)
 8001f1a:	f000 fdd6 	bl	8002aca <qsort>
  	   	  qsort(sortdata6,data_cnt,2,int_sort);
 8001f1e:	4621      	mov	r1, r4
 8001f20:	465b      	mov	r3, fp
 8001f22:	2202      	movs	r2, #2
 8001f24:	488c      	ldr	r0, [pc, #560]	; (8002158 <main+0x3b4>)
 8001f26:	f000 fdd0 	bl	8002aca <qsort>
  	   	  medianfilter_out1=sortdata1[2];
 8001f2a:	88bc      	ldrh	r4, [r7, #4]
 8001f2c:	4b8b      	ldr	r3, [pc, #556]	; (800215c <main+0x3b8>)
  	   	  medianfilter_out2=sortdata2[2];
 8001f2e:	88ad      	ldrh	r5, [r5, #4]
  	   	  medianfilter_out1=sortdata1[2];
 8001f30:	801c      	strh	r4, [r3, #0]
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8001f32:	ee07 4a90 	vmov	s15, r4
 8001f36:	4c8a      	ldr	r4, [pc, #552]	; (8002160 <main+0x3bc>)
  	   	  medianfilter_out2=sortdata2[2];
 8001f38:	4b8a      	ldr	r3, [pc, #552]	; (8002164 <main+0x3c0>)
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8001f3a:	8824      	ldrh	r4, [r4, #0]
  	   	  medianfilter_out2=sortdata2[2];
 8001f3c:	801d      	strh	r5, [r3, #0]
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8001f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f42:	ee07 4a90 	vmov	s15, r4
 8001f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  	   	  medianfilter_out3=sortdata3[2];
 8001f4a:	4b87      	ldr	r3, [pc, #540]	; (8002168 <main+0x3c4>)
 8001f4c:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 8001f50:	8018      	strh	r0, [r3, #0]
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8001f52:	ee67 7a88 	vmul.f32	s15, s15, s16
  	   	  medianfilter_out4=sortdata4[2];
 8001f56:	4b85      	ldr	r3, [pc, #532]	; (800216c <main+0x3c8>)
 8001f58:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8001f5c:	8019      	strh	r1, [r3, #0]
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8001f5e:	eee7 7a28 	vfma.f32	s15, s14, s17
  	   	  medianfilter_out5=sortdata5[2];
 8001f62:	4b83      	ldr	r3, [pc, #524]	; (8002170 <main+0x3cc>)
 8001f64:	88b2      	ldrh	r2, [r6, #4]
 8001f66:	801a      	strh	r2, [r3, #0]
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8001f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  	   	  medianfilter_out6=sortdata6[2];
 8001f6c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8001f70:	f8df a228 	ldr.w	sl, [pc, #552]	; 800219c <main+0x3f8>
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8001f74:	edcd 7a01 	vstr	s15, [sp, #4]
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8001f78:	ee07 5a90 	vmov	s15, r5
 8001f7c:	f8ba 5000 	ldrh.w	r5, [sl]
  	   	  medianfilter_out6=sortdata6[2];
 8001f80:	4e7c      	ldr	r6, [pc, #496]	; (8002174 <main+0x3d0>)
  	   	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 8001f82:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80021a0 <main+0x3fc>
  	   	  medianfilter_out6=sortdata6[2];
 8001f86:	8033      	strh	r3, [r6, #0]
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8001f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8c:	ee07 5a90 	vmov	s15, r5
 8001f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8001f94:	f8bd 6004 	ldrh.w	r6, [sp, #4]
  	   	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 8001f98:	f8df 8208 	ldr.w	r8, [pc, #520]	; 80021a4 <main+0x400>
  	   	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 8001f9c:	f8df c208 	ldr.w	ip, [pc, #520]	; 80021a8 <main+0x404>
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8001fa0:	4c75      	ldr	r4, [pc, #468]	; (8002178 <main+0x3d4>)
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 8001fa2:	f8df e208 	ldr.w	lr, [pc, #520]	; 80021ac <main+0x408>
  	   	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8001fa6:	8026      	strh	r6, [r4, #0]
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8001fa8:	ee67 7a88 	vmul.f32	s15, s15, s16
  	   	  out_lowpass_temp1=out_lowpass[0];
 8001fac:	4f6c      	ldr	r7, [pc, #432]	; (8002160 <main+0x3bc>)
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8001fae:	eee7 7a28 	vfma.f32	s15, s14, s17
 8001fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb6:	edcd 7a01 	vstr	s15, [sp, #4]
  	   	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 8001fba:	ee07 0a90 	vmov	s15, r0
 8001fbe:	f8b9 0000 	ldrh.w	r0, [r9]
  	   	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8001fc2:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8001fc6:	8065      	strh	r5, [r4, #2]
  	   	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 8001fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fcc:	ee07 0a90 	vmov	s15, r0
 8001fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001fd8:	eee7 7a28 	vfma.f32	s15, s14, s17
 8001fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe0:	edcd 7a01 	vstr	s15, [sp, #4]
  	   	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 8001fe4:	ee07 1a90 	vmov	s15, r1
 8001fe8:	f8b8 1000 	ldrh.w	r1, [r8]
  	   	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 8001fec:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8001ff0:	80a0      	strh	r0, [r4, #4]
  	   	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 8001ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff6:	ee07 1a90 	vmov	s15, r1
 8001ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffe:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002002:	eee7 7a28 	vfma.f32	s15, s14, s17
 8002006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800200a:	edcd 7a01 	vstr	s15, [sp, #4]
  	   	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 800200e:	ee07 2a90 	vmov	s15, r2
 8002012:	f8bc 2000 	ldrh.w	r2, [ip]
  	   	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 8002016:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800201a:	80e1      	strh	r1, [r4, #6]
  	   	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 800201c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002020:	ee07 2a90 	vmov	s15, r2
 8002024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002028:	ee67 7a88 	vmul.f32	s15, s15, s16
 800202c:	eee7 7a28 	vfma.f32	s15, s14, s17
 8002030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002034:	edcd 7a01 	vstr	s15, [sp, #4]
 8002038:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800203c:	8122      	strh	r2, [r4, #8]
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	f8be 3000 	ldrh.w	r3, [lr]
  	   	  out_lowpass_temp3=out_lowpass[2];
 8002046:	f8a9 0000 	strh.w	r0, [r9]
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 800204a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  	   	  out_lowpass_temp4=out_lowpass[3];
 8002056:	f8a8 1000 	strh.w	r1, [r8]
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 800205a:	ee67 7a88 	vmul.f32	s15, s15, s16
  	   	  xprintf("raw=%d",aADCxConvertedData[0]);
 800205e:	4847      	ldr	r0, [pc, #284]	; (800217c <main+0x3d8>)
  	   	  out_lowpass_temp5=out_lowpass[4];
 8002060:	f8ac 2000 	strh.w	r2, [ip]
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 8002064:	eee7 7a28 	vfma.f32	s15, s14, s17
  	   	  out_lowpass_temp1=out_lowpass[0];
 8002068:	803e      	strh	r6, [r7, #0]
  	   	  out_lowpass_temp2=out_lowpass[1];
 800206a:	f8aa 5000 	strh.w	r5, [sl]
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 800206e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002072:	edcd 7a01 	vstr	s15, [sp, #4]
 8002076:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  	   	  out_lowpass_temp6=out_lowpass[5];
 800207a:	f8ae 3000 	strh.w	r3, [lr]
  	   	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 800207e:	8163      	strh	r3, [r4, #10]
  	   	  xprintf("raw=%d",aADCxConvertedData[0]);
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <main+0x37c>)
 8002082:	8819      	ldrh	r1, [r3, #0]
 8002084:	f000 fc8c 	bl	80029a0 <xprintf>
  	   	  xprintf(" medianfilter1=%d",medianfilter_out1);
 8002088:	4b34      	ldr	r3, [pc, #208]	; (800215c <main+0x3b8>)
 800208a:	483d      	ldr	r0, [pc, #244]	; (8002180 <main+0x3dc>)
 800208c:	8819      	ldrh	r1, [r3, #0]
 800208e:	f000 fc87 	bl	80029a0 <xprintf>
  	   	  xprintf(" out1=%d",out_lowpass[0]);
 8002092:	8821      	ldrh	r1, [r4, #0]
 8002094:	483b      	ldr	r0, [pc, #236]	; (8002184 <main+0x3e0>)
 8002096:	f000 fc83 	bl	80029a0 <xprintf>
  	   	  xprintf("\r\n");
 800209a:	483b      	ldr	r0, [pc, #236]	; (8002188 <main+0x3e4>)
 800209c:	f000 fc80 	bl	80029a0 <xprintf>
     	  if(count>=4){
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <main+0x374>)
		   HAL_IWDG_Refresh(&hiwdg);
 80020a2:	483a      	ldr	r0, [pc, #232]	; (800218c <main+0x3e8>)
     	  if(count>=4){
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	2a03      	cmp	r2, #3
     		  count=0;
 80020a8:	bf8c      	ite	hi
 80020aa:	2200      	movhi	r2, #0
     		  count++;
 80020ac:	3201      	addls	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
		   HAL_IWDG_Refresh(&hiwdg);
 80020b0:	f7fe ff7c 	bl	8000fac <HAL_IWDG_Refresh>
 80020b4:	9b00      	ldr	r3, [sp, #0]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	9300      	str	r3, [sp, #0]
     for(uint16_t start_wait_delay=0;start_wait_delay<50;start_wait_delay++){
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f47f aec3 	bne.w	8001e48 <main+0xa4>
     Txbuf[0]=254;
 80020c2:	4933      	ldr	r1, [pc, #204]	; (8002190 <main+0x3ec>)
     if (HAL_UART_Transmit_DMA(&huart1, (uint8_t *)Txbuf,14) != HAL_OK)
 80020c4:	4833      	ldr	r0, [pc, #204]	; (8002194 <main+0x3f0>)
     Txbuf[0]=254;
 80020c6:	23fe      	movs	r3, #254	; 0xfe
 80020c8:	700b      	strb	r3, [r1, #0]
     Txbuf[1]= (uint8_t)( (out_lowpass[0]<<2) & 0b0000000011111111);
 80020ca:	8823      	ldrh	r3, [r4, #0]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	704b      	strb	r3, [r1, #1]
     Txbuf[2]= (uint8_t)(((out_lowpass[0]<<2) & 0b1111111100000000)>>8);
 80020d0:	121b      	asrs	r3, r3, #8
 80020d2:	708b      	strb	r3, [r1, #2]
     Txbuf[3]= (uint8_t)( (out_lowpass[1]<<2) & 0b0000000011111111);
 80020d4:	8863      	ldrh	r3, [r4, #2]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	70cb      	strb	r3, [r1, #3]
     Txbuf[4]= (uint8_t)(((out_lowpass[1]<<2) & 0b1111111100000000)>>8);
 80020da:	121b      	asrs	r3, r3, #8
 80020dc:	710b      	strb	r3, [r1, #4]
     Txbuf[5]= (uint8_t)( (out_lowpass[2]<<2) & 0b0000000011111111);
 80020de:	88a3      	ldrh	r3, [r4, #4]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	714b      	strb	r3, [r1, #5]
     Txbuf[6]= (uint8_t)(((out_lowpass[2]<<2) & 0b1111111100000000)>>8);
 80020e4:	121b      	asrs	r3, r3, #8
 80020e6:	718b      	strb	r3, [r1, #6]
     Txbuf[7]= (uint8_t)( (out_lowpass[3]<<2) & 0b0000000011111111);
 80020e8:	88e3      	ldrh	r3, [r4, #6]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	71cb      	strb	r3, [r1, #7]
     Txbuf[8]= (uint8_t)(((out_lowpass[3]<<2) & 0b1111111100000000)>>8);
 80020ee:	121b      	asrs	r3, r3, #8
 80020f0:	720b      	strb	r3, [r1, #8]
     Txbuf[9]= (uint8_t)( (out_lowpass[4]<<2) & 0b0000000011111111);
 80020f2:	8923      	ldrh	r3, [r4, #8]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	724b      	strb	r3, [r1, #9]
     Txbuf[10]=(uint8_t)(((out_lowpass[4]<<2) & 0b1111111100000000)>>8);
 80020f8:	121b      	asrs	r3, r3, #8
 80020fa:	728b      	strb	r3, [r1, #10]
     Txbuf[11]=(uint8_t)( (out_lowpass[5]<<2) & 0b0000000011111111);
 80020fc:	8963      	ldrh	r3, [r4, #10]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	72cb      	strb	r3, [r1, #11]
     Txbuf[12]=(uint8_t)(((out_lowpass[5]<<2) & 0b1111111100000000)>>8);
 8002102:	121b      	asrs	r3, r3, #8
 8002104:	730b      	strb	r3, [r1, #12]
     if (HAL_UART_Transmit_DMA(&huart1, (uint8_t *)Txbuf,14) != HAL_OK)
 8002106:	220e      	movs	r2, #14
     Txbuf[13]=253;
 8002108:	23fd      	movs	r3, #253	; 0xfd
 800210a:	734b      	strb	r3, [r1, #13]
     if (HAL_UART_Transmit_DMA(&huart1, (uint8_t *)Txbuf,14) != HAL_OK)
 800210c:	f7ff fc02 	bl	8001914 <HAL_UART_Transmit_DMA>
 8002110:	2800      	cmp	r0, #0
 8002112:	d04d      	beq.n	80021b0 <main+0x40c>
 8002114:	e7fe      	b.n	8002114 <main+0x370>
 8002116:	bf00      	nop
 8002118:	20000180 	.word	0x20000180
 800211c:	40020800 	.word	0x40020800
 8002120:	20000020 	.word	0x20000020
 8002124:	20000188 	.word	0x20000188
 8002128:	2000016e 	.word	0x2000016e
 800212c:	20000164 	.word	0x20000164
 8002130:	20000132 	.word	0x20000132
 8002134:	20000106 	.word	0x20000106
 8002138:	2000015a 	.word	0x2000015a
 800213c:	200000f8 	.word	0x200000f8
 8002140:	20000128 	.word	0x20000128
 8002144:	20000146 	.word	0x20000146
 8002148:	3f4ccccd 	.word	0x3f4ccccd
 800214c:	3e4ccccd 	.word	0x3e4ccccd
 8002150:	20000150 	.word	0x20000150
 8002154:	200001a0 	.word	0x200001a0
 8002158:	2000011e 	.word	0x2000011e
 800215c:	20000104 	.word	0x20000104
 8002160:	20000144 	.word	0x20000144
 8002164:	20000178 	.word	0x20000178
 8002168:	20000184 	.word	0x20000184
 800216c:	20000102 	.word	0x20000102
 8002170:	2000017a 	.word	0x2000017a
 8002174:	2000013c 	.word	0x2000013c
 8002178:	20000112 	.word	0x20000112
 800217c:	08002d73 	.word	0x08002d73
 8002180:	08002d7a 	.word	0x08002d7a
 8002184:	08002d8c 	.word	0x08002d8c
 8002188:	08002d95 	.word	0x08002d95
 800218c:	200000ec 	.word	0x200000ec
 8002190:	20000192 	.word	0x20000192
 8002194:	2000020c 	.word	0x2000020c
 8002198:	08001ce1 	.word	0x08001ce1
 800219c:	20000182 	.word	0x20000182
 80021a0:	20000186 	.word	0x20000186
 80021a4:	2000017e 	.word	0x2000017e
 80021a8:	20000110 	.word	0x20000110
 80021ac:	2000017c 	.word	0x2000017c
	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
 80021b0:	9a00      	ldr	r2, [sp, #0]
 80021b2:	48be      	ldr	r0, [pc, #760]	; (80024ac <main+0x708>)
 80021b4:	2102      	movs	r1, #2
 80021b6:	f7fe fecf 	bl	8000f58 <HAL_GPIO_WritePin>
	  	  tempdata1[count]=aADCxConvertedData[0];
 80021ba:	4bbd      	ldr	r3, [pc, #756]	; (80024b0 <main+0x70c>)
 80021bc:	4dbd      	ldr	r5, [pc, #756]	; (80024b4 <main+0x710>)
 80021be:	781c      	ldrb	r4, [r3, #0]
 80021c0:	f8df c364 	ldr.w	ip, [pc, #868]	; 8002528 <main+0x784>
 80021c4:	882b      	ldrh	r3, [r5, #0]
	  	  tempdata2[count]=aADCxConvertedData[1];
 80021c6:	4ebc      	ldr	r6, [pc, #752]	; (80024b8 <main+0x714>)
	  	  tempdata1[count]=aADCxConvertedData[0];
 80021c8:	f82c 3014 	strh.w	r3, [ip, r4, lsl #1]
	  	  tempdata3[count]=aADCxConvertedData[2];
 80021cc:	48bb      	ldr	r0, [pc, #748]	; (80024bc <main+0x718>)
	  	  tempdata2[count]=aADCxConvertedData[1];
 80021ce:	886b      	ldrh	r3, [r5, #2]
 80021d0:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	  	  tempdata4[count]=aADCxConvertedData[3];
 80021d4:	49ba      	ldr	r1, [pc, #744]	; (80024c0 <main+0x71c>)
	  	  tempdata3[count]=aADCxConvertedData[2];
 80021d6:	88ab      	ldrh	r3, [r5, #4]
 80021d8:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
	  	  tempdata5[count]=aADCxConvertedData[4];
 80021dc:	4ab9      	ldr	r2, [pc, #740]	; (80024c4 <main+0x720>)
	  	  tempdata4[count]=aADCxConvertedData[3];
 80021de:	88eb      	ldrh	r3, [r5, #6]
 80021e0:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
	  	  tempdata5[count]=aADCxConvertedData[4];
 80021e4:	892b      	ldrh	r3, [r5, #8]
 80021e6:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
	  	  tempdata6[count]=aADCxConvertedData[5];
 80021ea:	4bb7      	ldr	r3, [pc, #732]	; (80024c8 <main+0x724>)
 80021ec:	896d      	ldrh	r5, [r5, #10]
 80021ee:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
 80021f2:	46b6      	mov	lr, r6
	  	  sortdata1[i]=tempdata1[i];
 80021f4:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 80024d8 <main+0x734>
	  	  sortdata2[i]=tempdata2[i];
 80021f8:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80024dc <main+0x738>
	  	  sortdata3[i]=tempdata3[i];
 80021fc:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 80024e0 <main+0x73c>
	  	  sortdata4[i]=tempdata4[i];
 8002200:	4eb2      	ldr	r6, [pc, #712]	; (80024cc <main+0x728>)
	  	  sortdata5[i]=tempdata5[i];
 8002202:	4db3      	ldr	r5, [pc, #716]	; (80024d0 <main+0x72c>)
	  	  sortdata6[i]=tempdata6[i];
 8002204:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 80024e4 <main+0x740>
	  	  tempdata6[count]=aADCxConvertedData[5];
 8002208:	2400      	movs	r4, #0
	  	  sortdata1[i]=tempdata1[i];
 800220a:	f83c 7014 	ldrh.w	r7, [ip, r4, lsl #1]
 800220e:	f82a 7014 	strh.w	r7, [sl, r4, lsl #1]
	  	  sortdata2[i]=tempdata2[i];
 8002212:	f83e 7014 	ldrh.w	r7, [lr, r4, lsl #1]
 8002216:	f829 7014 	strh.w	r7, [r9, r4, lsl #1]
	  	  sortdata3[i]=tempdata3[i];
 800221a:	f830 7014 	ldrh.w	r7, [r0, r4, lsl #1]
 800221e:	f828 7014 	strh.w	r7, [r8, r4, lsl #1]
	  	  sortdata4[i]=tempdata4[i];
 8002222:	f831 7014 	ldrh.w	r7, [r1, r4, lsl #1]
 8002226:	f826 7014 	strh.w	r7, [r6, r4, lsl #1]
	  	  sortdata5[i]=tempdata5[i];
 800222a:	f832 7014 	ldrh.w	r7, [r2, r4, lsl #1]
 800222e:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
	  	  sortdata6[i]=tempdata6[i];
 8002232:	f833 7014 	ldrh.w	r7, [r3, r4, lsl #1]
 8002236:	f82b 7014 	strh.w	r7, [fp, r4, lsl #1]
 800223a:	3401      	adds	r4, #1
	  	  for(uint8_t i=0;i<5;i++){
 800223c:	2c05      	cmp	r4, #5
 800223e:	d1e4      	bne.n	800220a <main+0x466>
	  	  qsort(sortdata1,data_cnt,2,int_sort);
 8002240:	4621      	mov	r1, r4
 8002242:	4ba4      	ldr	r3, [pc, #656]	; (80024d4 <main+0x730>)
 8002244:	48a4      	ldr	r0, [pc, #656]	; (80024d8 <main+0x734>)
	  	  if(count>=4){
 8002246:	4f9a      	ldr	r7, [pc, #616]	; (80024b0 <main+0x70c>)
	  	  qsort(sortdata1,data_cnt,2,int_sort);
 8002248:	2202      	movs	r2, #2
 800224a:	f000 fc3e 	bl	8002aca <qsort>
	  	  qsort(sortdata2,data_cnt,2,int_sort);
 800224e:	4621      	mov	r1, r4
 8002250:	4ba0      	ldr	r3, [pc, #640]	; (80024d4 <main+0x730>)
 8002252:	48a2      	ldr	r0, [pc, #648]	; (80024dc <main+0x738>)
 8002254:	2202      	movs	r2, #2
 8002256:	f000 fc38 	bl	8002aca <qsort>
	  	  qsort(sortdata3,data_cnt,2,int_sort);
 800225a:	4621      	mov	r1, r4
 800225c:	4b9d      	ldr	r3, [pc, #628]	; (80024d4 <main+0x730>)
 800225e:	48a0      	ldr	r0, [pc, #640]	; (80024e0 <main+0x73c>)
 8002260:	2202      	movs	r2, #2
 8002262:	f000 fc32 	bl	8002aca <qsort>
	  	  qsort(sortdata4,data_cnt,2,int_sort);
 8002266:	4621      	mov	r1, r4
 8002268:	4b9a      	ldr	r3, [pc, #616]	; (80024d4 <main+0x730>)
 800226a:	4898      	ldr	r0, [pc, #608]	; (80024cc <main+0x728>)
 800226c:	2202      	movs	r2, #2
 800226e:	f000 fc2c 	bl	8002aca <qsort>
	  	  qsort(sortdata5,data_cnt,2,int_sort);
 8002272:	4621      	mov	r1, r4
 8002274:	4b97      	ldr	r3, [pc, #604]	; (80024d4 <main+0x730>)
 8002276:	4896      	ldr	r0, [pc, #600]	; (80024d0 <main+0x72c>)
 8002278:	2202      	movs	r2, #2
 800227a:	f000 fc26 	bl	8002aca <qsort>
	  	  qsort(sortdata6,data_cnt,2,int_sort);
 800227e:	4621      	mov	r1, r4
 8002280:	4b94      	ldr	r3, [pc, #592]	; (80024d4 <main+0x730>)
 8002282:	4898      	ldr	r0, [pc, #608]	; (80024e4 <main+0x740>)
 8002284:	2202      	movs	r2, #2
 8002286:	f000 fc20 	bl	8002aca <qsort>
	  	  medianfilter_out1=sortdata1[2];
 800228a:	4b97      	ldr	r3, [pc, #604]	; (80024e8 <main+0x744>)
 800228c:	f8ba 4004 	ldrh.w	r4, [sl, #4]
 8002290:	801c      	strh	r4, [r3, #0]
	  	  medianfilter_out2=sortdata2[2];
 8002292:	4b96      	ldr	r3, [pc, #600]	; (80024ec <main+0x748>)
 8002294:	f8b9 e004 	ldrh.w	lr, [r9, #4]
 8002298:	f8a3 e000 	strh.w	lr, [r3]
	  	  medianfilter_out3=sortdata3[2];
 800229c:	4b94      	ldr	r3, [pc, #592]	; (80024f0 <main+0x74c>)
 800229e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80022a2:	8018      	strh	r0, [r3, #0]
	  	  medianfilter_out4=sortdata4[2];
 80022a4:	4b93      	ldr	r3, [pc, #588]	; (80024f4 <main+0x750>)
 80022a6:	88b1      	ldrh	r1, [r6, #4]
 80022a8:	8019      	strh	r1, [r3, #0]
	  	  medianfilter_out5=sortdata5[2];
 80022aa:	4b93      	ldr	r3, [pc, #588]	; (80024f8 <main+0x754>)
 80022ac:	88aa      	ldrh	r2, [r5, #4]
 80022ae:	801a      	strh	r2, [r3, #0]
	  	  medianfilter_out6=sortdata6[2];
 80022b0:	f8bb 3004 	ldrh.w	r3, [fp, #4]
	  	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 80022b4:	f8df b274 	ldr.w	fp, [pc, #628]	; 800252c <main+0x788>
	  	  medianfilter_out6=sortdata6[2];
 80022b8:	4d90      	ldr	r5, [pc, #576]	; (80024fc <main+0x758>)
	  	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 80022ba:	f8df a274 	ldr.w	sl, [pc, #628]	; 8002530 <main+0x78c>
	  	  medianfilter_out6=sortdata6[2];
 80022be:	802b      	strh	r3, [r5, #0]
	  	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 80022c0:	ee07 4a90 	vmov	s15, r4
 80022c4:	f8bb 4000 	ldrh.w	r4, [fp]
	  	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 80022c8:	f8ba 5000 	ldrh.w	r5, [sl]
	  	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 80022cc:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8002534 <main+0x790>
	  	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 80022d0:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8002538 <main+0x794>
	  	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 80022d4:	f8df c264 	ldr.w	ip, [pc, #612]	; 800253c <main+0x798>
	  	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 80022d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022dc:	ee07 4a90 	vmov	s15, r4
 80022e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e4:	4c86      	ldr	r4, [pc, #536]	; (8002500 <main+0x75c>)
 80022e6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80022ea:	eee7 7a28 	vfma.f32	s15, s14, s17
 80022ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f2:	edcd 7a00 	vstr	s15, [sp]
	  	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 80022f6:	ee07 ea90 	vmov	s15, lr
 80022fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022fe:	ee07 5a90 	vmov	s15, r5
 8002302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 8002306:	f8bd 6000 	ldrh.w	r6, [sp]
	  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 800230a:	f8df e234 	ldr.w	lr, [pc, #564]	; 8002540 <main+0x79c>
	  	  out_lowpass[0]=(float)((float)rate*medianfilter_out1+(float)(1-rate)*out_lowpass_temp1);
 800230e:	8026      	strh	r6, [r4, #0]
	  	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8002310:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002314:	eee7 7a28 	vfma.f32	s15, s14, s17
 8002318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800231c:	edcd 7a00 	vstr	s15, [sp]
	  	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 8002320:	ee07 0a90 	vmov	s15, r0
 8002324:	f8b9 0000 	ldrh.w	r0, [r9]
	  	  out_lowpass[1]=(float)((float)rate*medianfilter_out2+(float)(1-rate)*out_lowpass_temp2);
 8002328:	f8bd 5000 	ldrh.w	r5, [sp]
 800232c:	8065      	strh	r5, [r4, #2]
	  	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 800232e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002332:	ee07 0a90 	vmov	s15, r0
 8002336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800233e:	eee7 7a28 	vfma.f32	s15, s14, s17
 8002342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002346:	edcd 7a00 	vstr	s15, [sp]
	  	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 800234a:	ee07 1a90 	vmov	s15, r1
 800234e:	f8b8 1000 	ldrh.w	r1, [r8]
	  	  out_lowpass[2]=(float)((float)rate*medianfilter_out3+(float)(1-rate)*out_lowpass_temp3);
 8002352:	f8bd 0000 	ldrh.w	r0, [sp]
 8002356:	80a0      	strh	r0, [r4, #4]
	  	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 8002358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800235c:	ee07 1a90 	vmov	s15, r1
 8002360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002364:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002368:	eee7 7a28 	vfma.f32	s15, s14, s17
 800236c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002370:	edcd 7a00 	vstr	s15, [sp]
	  	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 8002374:	ee07 2a90 	vmov	s15, r2
 8002378:	f8bc 2000 	ldrh.w	r2, [ip]
	  	  out_lowpass[3]=(float)((float)rate*medianfilter_out4+(float)(1-rate)*out_lowpass_temp4);
 800237c:	f8bd 1000 	ldrh.w	r1, [sp]
 8002380:	80e1      	strh	r1, [r4, #6]
	  	  out_lowpass[4]=(float)((float)rate*medianfilter_out5+(float)(1-rate)*out_lowpass_temp5);
 8002382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002386:	ee07 2a90 	vmov	s15, r2
 800238a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800238e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002392:	eee7 7a28 	vfma.f32	s15, s14, s17
 8002396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239a:	edcd 7a00 	vstr	s15, [sp]
 800239e:	f8bd 2000 	ldrh.w	r2, [sp]
 80023a2:	8122      	strh	r2, [r4, #8]
	  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	f8be 3000 	ldrh.w	r3, [lr]
	  	  out_lowpass_temp3=out_lowpass[2];
 80023ac:	f8a9 0000 	strh.w	r0, [r9]
	  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80023b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  	  out_lowpass_temp4=out_lowpass[3];
 80023bc:	f8a8 1000 	strh.w	r1, [r8]
	  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80023c0:	ee67 7a88 	vmul.f32	s15, s15, s16
	     Txbuf[5]= (uint8_t)( (out_lowpass[2]<<2) & 0b0000000011111111);
 80023c4:	0080      	lsls	r0, r0, #2
	  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80023c6:	eee7 7a28 	vfma.f32	s15, s14, s17
	     Txbuf[7]= (uint8_t)( (out_lowpass[3]<<2) & 0b0000000011111111);
 80023ca:	0089      	lsls	r1, r1, #2
	  	  out_lowpass_temp5=out_lowpass[4];
 80023cc:	f8ac 2000 	strh.w	r2, [ip]
	  	  out_lowpass_temp1=out_lowpass[0];
 80023d0:	f8ab 6000 	strh.w	r6, [fp]
	  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80023d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	  	  out_lowpass_temp2=out_lowpass[1];
 80023d8:	f8aa 5000 	strh.w	r5, [sl]
	  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80023dc:	edcd 7a00 	vstr	s15, [sp]
 80023e0:	f8bd 3000 	ldrh.w	r3, [sp]
	  	  out_lowpass_temp6=out_lowpass[5];
 80023e4:	f8ae 3000 	strh.w	r3, [lr]
	  	  if(count>=4){
 80023e8:	f897 e000 	ldrb.w	lr, [r7]
	  	  out_lowpass[5]=(float)((float)rate*medianfilter_out6+(float)(1-rate)*out_lowpass_temp6);
 80023ec:	8163      	strh	r3, [r4, #10]
	  	  if(count>=4){
 80023ee:	f1be 0f03 	cmp.w	lr, #3
	  		  count++;
 80023f2:	bf96      	itet	ls
 80023f4:	4f2e      	ldrls	r7, [pc, #184]	; (80024b0 <main+0x70c>)
	  		  count=0;
 80023f6:	f04f 0e00 	movhi.w	lr, #0
	  		  count++;
 80023fa:	f10e 0e01 	addls.w	lr, lr, #1
 80023fe:	f887 e000 	strb.w	lr, [r7]
	     Txbuf[0]=254;
 8002402:	f8df e140 	ldr.w	lr, [pc, #320]	; 8002544 <main+0x7a0>
	     Txbuf[11]=(uint8_t)( (out_lowpass[5]<<2) & 0b0000000011111111);
 8002406:	009b      	lsls	r3, r3, #2
	     Txbuf[1]= (uint8_t)( (out_lowpass[0]<<2) & 0b0000000011111111);
 8002408:	00b6      	lsls	r6, r6, #2
	     Txbuf[3]= (uint8_t)( (out_lowpass[1]<<2) & 0b0000000011111111);
 800240a:	00ad      	lsls	r5, r5, #2
	     Txbuf[5]= (uint8_t)( (out_lowpass[2]<<2) & 0b0000000011111111);
 800240c:	f88e 0005 	strb.w	r0, [lr, #5]
	     Txbuf[7]= (uint8_t)( (out_lowpass[3]<<2) & 0b0000000011111111);
 8002410:	f88e 1007 	strb.w	r1, [lr, #7]
	     Txbuf[6]= (uint8_t)(((out_lowpass[2]<<2) & 0b1111111100000000)>>8);
 8002414:	1200      	asrs	r0, r0, #8
	     Txbuf[8]= (uint8_t)(((out_lowpass[3]<<2) & 0b1111111100000000)>>8);
 8002416:	1209      	asrs	r1, r1, #8
	     Txbuf[9]= (uint8_t)( (out_lowpass[4]<<2) & 0b0000000011111111);
 8002418:	0092      	lsls	r2, r2, #2
	     Txbuf[11]=(uint8_t)( (out_lowpass[5]<<2) & 0b0000000011111111);
 800241a:	f88e 300b 	strb.w	r3, [lr, #11]
	     Txbuf[12]=(uint8_t)(((out_lowpass[5]<<2) & 0b1111111100000000)>>8);
 800241e:	121b      	asrs	r3, r3, #8
	     Txbuf[0]=254;
 8002420:	f04f 0cfe 	mov.w	ip, #254	; 0xfe
	     Txbuf[1]= (uint8_t)( (out_lowpass[0]<<2) & 0b0000000011111111);
 8002424:	f88e 6001 	strb.w	r6, [lr, #1]
	     Txbuf[3]= (uint8_t)( (out_lowpass[1]<<2) & 0b0000000011111111);
 8002428:	f88e 5003 	strb.w	r5, [lr, #3]
	     Txbuf[6]= (uint8_t)(((out_lowpass[2]<<2) & 0b1111111100000000)>>8);
 800242c:	f88e 0006 	strb.w	r0, [lr, #6]
	     Txbuf[8]= (uint8_t)(((out_lowpass[3]<<2) & 0b1111111100000000)>>8);
 8002430:	f88e 1008 	strb.w	r1, [lr, #8]
	     Txbuf[9]= (uint8_t)( (out_lowpass[4]<<2) & 0b0000000011111111);
 8002434:	f88e 2009 	strb.w	r2, [lr, #9]
	     Txbuf[12]=(uint8_t)(((out_lowpass[5]<<2) & 0b1111111100000000)>>8);
 8002438:	f88e 300c 	strb.w	r3, [lr, #12]
	     Txbuf[10]=(uint8_t)(((out_lowpass[4]<<2) & 0b1111111100000000)>>8);
 800243c:	1212      	asrs	r2, r2, #8
	     Txbuf[13]=253;
 800243e:	23fd      	movs	r3, #253	; 0xfd
	     Txbuf[2]= (uint8_t)(((out_lowpass[0]<<2) & 0b1111111100000000)>>8);
 8002440:	1236      	asrs	r6, r6, #8
	     Txbuf[4]= (uint8_t)(((out_lowpass[1]<<2) & 0b1111111100000000)>>8);
 8002442:	122d      	asrs	r5, r5, #8
	  	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1){
 8002444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002448:	4818      	ldr	r0, [pc, #96]	; (80024ac <main+0x708>)
	     Txbuf[0]=254;
 800244a:	f88e c000 	strb.w	ip, [lr]
	     Txbuf[2]= (uint8_t)(((out_lowpass[0]<<2) & 0b1111111100000000)>>8);
 800244e:	f88e 6002 	strb.w	r6, [lr, #2]
	     Txbuf[4]= (uint8_t)(((out_lowpass[1]<<2) & 0b1111111100000000)>>8);
 8002452:	f88e 5004 	strb.w	r5, [lr, #4]
	     Txbuf[10]=(uint8_t)(((out_lowpass[4]<<2) & 0b1111111100000000)>>8);
 8002456:	f88e 200a 	strb.w	r2, [lr, #10]
	     Txbuf[13]=253;
 800245a:	f88e 300d 	strb.w	r3, [lr, #13]
	  	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1){
 800245e:	f7fe fd75 	bl	8000f4c <HAL_GPIO_ReadPin>
 8002462:	2801      	cmp	r0, #1
 8002464:	d11a      	bne.n	800249c <main+0x6f8>
	  	  xprintf(" out1=%d",out_lowpass[0]);
 8002466:	8821      	ldrh	r1, [r4, #0]
 8002468:	4826      	ldr	r0, [pc, #152]	; (8002504 <main+0x760>)
 800246a:	f000 fa99 	bl	80029a0 <xprintf>
	  	  xprintf(" out2=%d",out_lowpass[1]);
 800246e:	8861      	ldrh	r1, [r4, #2]
 8002470:	4825      	ldr	r0, [pc, #148]	; (8002508 <main+0x764>)
 8002472:	f000 fa95 	bl	80029a0 <xprintf>
	  	  xprintf(" out3=%d",out_lowpass[2]);
 8002476:	88a1      	ldrh	r1, [r4, #4]
 8002478:	4824      	ldr	r0, [pc, #144]	; (800250c <main+0x768>)
 800247a:	f000 fa91 	bl	80029a0 <xprintf>
	  	  xprintf(" out4=%d",out_lowpass[3]);
 800247e:	88e1      	ldrh	r1, [r4, #6]
 8002480:	4823      	ldr	r0, [pc, #140]	; (8002510 <main+0x76c>)
 8002482:	f000 fa8d 	bl	80029a0 <xprintf>
	  	  xprintf(" out5=%d",out_lowpass[4]);
 8002486:	8921      	ldrh	r1, [r4, #8]
 8002488:	4822      	ldr	r0, [pc, #136]	; (8002514 <main+0x770>)
 800248a:	f000 fa89 	bl	80029a0 <xprintf>
	  	  xprintf(" out6=%d",out_lowpass[5]);
 800248e:	4822      	ldr	r0, [pc, #136]	; (8002518 <main+0x774>)
 8002490:	8961      	ldrh	r1, [r4, #10]
 8002492:	f000 fa85 	bl	80029a0 <xprintf>
	  	  xprintf("\r\n");
 8002496:	4821      	ldr	r0, [pc, #132]	; (800251c <main+0x778>)
 8002498:	f000 fa82 	bl	80029a0 <xprintf>
		   HAL_IWDG_Refresh(&hiwdg);
 800249c:	4820      	ldr	r0, [pc, #128]	; (8002520 <main+0x77c>)
 800249e:	f7fe fd85 	bl	8000fac <HAL_IWDG_Refresh>
		   HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80024a2:	2120      	movs	r1, #32
 80024a4:	481f      	ldr	r0, [pc, #124]	; (8002524 <main+0x780>)
 80024a6:	f7fe fd5c 	bl	8000f62 <HAL_GPIO_TogglePin>
	  	  tempdata1[count]=aADCxConvertedData[0];
 80024aa:	e686      	b.n	80021ba <main+0x416>
 80024ac:	40020800 	.word	0x40020800
 80024b0:	20000180 	.word	0x20000180
 80024b4:	20000020 	.word	0x20000020
 80024b8:	2000016e 	.word	0x2000016e
 80024bc:	20000164 	.word	0x20000164
 80024c0:	20000132 	.word	0x20000132
 80024c4:	20000106 	.word	0x20000106
 80024c8:	2000015a 	.word	0x2000015a
 80024cc:	200001a0 	.word	0x200001a0
 80024d0:	20000146 	.word	0x20000146
 80024d4:	08001ce1 	.word	0x08001ce1
 80024d8:	200000f8 	.word	0x200000f8
 80024dc:	20000128 	.word	0x20000128
 80024e0:	20000150 	.word	0x20000150
 80024e4:	2000011e 	.word	0x2000011e
 80024e8:	20000104 	.word	0x20000104
 80024ec:	20000178 	.word	0x20000178
 80024f0:	20000184 	.word	0x20000184
 80024f4:	20000102 	.word	0x20000102
 80024f8:	2000017a 	.word	0x2000017a
 80024fc:	2000013c 	.word	0x2000013c
 8002500:	20000112 	.word	0x20000112
 8002504:	08002d8c 	.word	0x08002d8c
 8002508:	08002d98 	.word	0x08002d98
 800250c:	08002da1 	.word	0x08002da1
 8002510:	08002daa 	.word	0x08002daa
 8002514:	08002db3 	.word	0x08002db3
 8002518:	08002dbc 	.word	0x08002dbc
 800251c:	08002d95 	.word	0x08002d95
 8002520:	200000ec 	.word	0x200000ec
 8002524:	40020000 	.word	0x40020000
 8002528:	20000188 	.word	0x20000188
 800252c:	20000144 	.word	0x20000144
 8002530:	20000182 	.word	0x20000182
 8002534:	20000186 	.word	0x20000186
 8002538:	2000017e 	.word	0x2000017e
 800253c:	20000110 	.word	0x20000110
 8002540:	2000017c 	.word	0x2000017c
 8002544:	20000192 	.word	0x20000192

08002548 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002548:	e7fe      	b.n	8002548 <_Error_Handler>

0800254a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800254a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254c:	2003      	movs	r0, #3
 800254e:	f7fe fa1d 	bl	800098c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	4611      	mov	r1, r2
 8002556:	f06f 000b 	mvn.w	r0, #11
 800255a:	f7fe fa29 	bl	80009b0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	4611      	mov	r1, r2
 8002562:	f06f 000a 	mvn.w	r0, #10
 8002566:	f7fe fa23 	bl	80009b0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	4611      	mov	r1, r2
 800256e:	f06f 0009 	mvn.w	r0, #9
 8002572:	f7fe fa1d 	bl	80009b0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	4611      	mov	r1, r2
 800257a:	f06f 0004 	mvn.w	r0, #4
 800257e:	f7fe fa17 	bl	80009b0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	4611      	mov	r1, r2
 8002586:	f06f 0003 	mvn.w	r0, #3
 800258a:	f7fe fa11 	bl	80009b0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	4611      	mov	r1, r2
 8002592:	f06f 0001 	mvn.w	r0, #1
 8002596:	f7fe fa0b 	bl	80009b0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	4611      	mov	r1, r2
 800259e:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80025a6:	f7fe ba03 	b.w	80009b0 <HAL_NVIC_SetPriority>

080025aa <NMI_Handler>:
 80025aa:	4770      	bx	lr

080025ac <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80025ac:	e7fe      	b.n	80025ac <HardFault_Handler>

080025ae <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80025ae:	e7fe      	b.n	80025ae <MemManage_Handler>

080025b0 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80025b0:	e7fe      	b.n	80025b0 <BusFault_Handler>

080025b2 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80025b2:	e7fe      	b.n	80025b2 <UsageFault_Handler>

080025b4 <SVC_Handler>:
 80025b4:	4770      	bx	lr

080025b6 <DebugMon_Handler>:
 80025b6:	4770      	bx	lr

080025b8 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80025b8:	4770      	bx	lr

080025ba <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80025ba:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025bc:	f7fd ffd8 	bl	8000570 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80025c4:	f7fe ba57 	b.w	8000a76 <HAL_SYSTICK_IRQHandler>

080025c8 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025c8:	4801      	ldr	r0, [pc, #4]	; (80025d0 <DMA2_Stream0_IRQHandler+0x8>)
 80025ca:	f7fe bb2b 	b.w	8000c24 <HAL_DMA_IRQHandler>
 80025ce:	bf00      	nop
 80025d0:	2000007c 	.word	0x2000007c

080025d4 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025d4:	4801      	ldr	r0, [pc, #4]	; (80025dc <DMA2_Stream7_IRQHandler+0x8>)
 80025d6:	f7fe bb25 	b.w	8000c24 <HAL_DMA_IRQHandler>
 80025da:	bf00      	nop
 80025dc:	200001ac 	.word	0x200001ac

080025e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e0:	490f      	ldr	r1, [pc, #60]	; (8002620 <SystemInit+0x40>)
 80025e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80025e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <SystemInit+0x44>)
 80025f0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025f2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80025fa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002602:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002606:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <SystemInit+0x48>)
 800260a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002612:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002614:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002616:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800261a:	608b      	str	r3, [r1, #8]
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00
 8002624:	40023800 	.word	0x40023800
 8002628:	24003010 	.word	0x24003010

0800262c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800262c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800262e:	480c      	ldr	r0, [pc, #48]	; (8002660 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 19200;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <MX_USART1_UART_Init+0x38>)
 8002632:	f44f 4e96 	mov.w	lr, #19200	; 0x4b00
 8002636:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800263a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800263c:	2300      	movs	r3, #0
 800263e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002640:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002642:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002644:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002648:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800264a:	f7ff f8d7 	bl	80017fc <HAL_UART_Init>
 800264e:	b128      	cbz	r0, 800265c <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002650:	2145      	movs	r1, #69	; 0x45
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <MX_USART1_UART_Init+0x3c>)
  }

}
 8002654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002658:	f7ff bf76 	b.w	8002548 <_Error_Handler>
 800265c:	bd08      	pop	{r3, pc}
 800265e:	bf00      	nop
 8002660:	2000020c 	.word	0x2000020c
 8002664:	40011000 	.word	0x40011000
 8002668:	08002ddd 	.word	0x08002ddd

0800266c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800266c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 800266e:	480c      	ldr	r0, [pc, #48]	; (80026a0 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MX_USART2_UART_Init+0x38>)
 8002672:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002676:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800267a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800267c:	2300      	movs	r3, #0
 800267e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002680:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002682:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002684:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002686:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800268a:	f7ff f8b7 	bl	80017fc <HAL_UART_Init>
 800268e:	b128      	cbz	r0, 800269c <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002690:	2158      	movs	r1, #88	; 0x58
 8002692:	4805      	ldr	r0, [pc, #20]	; (80026a8 <MX_USART2_UART_Init+0x3c>)
  }

}
 8002694:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002698:	f7ff bf56 	b.w	8002548 <_Error_Handler>
 800269c:	bd08      	pop	{r3, pc}
 800269e:	bf00      	nop
 80026a0:	2000024c 	.word	0x2000024c
 80026a4:	40004400 	.word	0x40004400
 80026a8:	08002ddd 	.word	0x08002ddd

080026ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026ac:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80026ae:	6803      	ldr	r3, [r0, #0]
 80026b0:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <HAL_UART_MspInit+0xbc>)
 80026b2:	4293      	cmp	r3, r2
{
 80026b4:	b088      	sub	sp, #32
 80026b6:	4606      	mov	r6, r0
  if(uartHandle->Instance==USART1)
 80026b8:	d138      	bne.n	800272c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ba:	2500      	movs	r5, #0
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_UART_MspInit+0xc0>)
 80026be:	9501      	str	r5, [sp, #4]
 80026c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	482b      	ldr	r0, [pc, #172]	; (8002770 <HAL_UART_MspInit+0xc4>)

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80026c4:	4c2b      	ldr	r4, [pc, #172]	; (8002774 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c6:	f042 0210 	orr.w	r2, r2, #16
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026e0:	2301      	movs	r3, #1
 80026e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026ea:	2307      	movs	r3, #7
 80026ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f7fe fb53 	bl	8000d98 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026f2:	4921      	ldr	r1, [pc, #132]	; (8002778 <HAL_UART_MspInit+0xcc>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f4:	60e5      	str	r5, [r4, #12]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026f6:	2340      	movs	r3, #64	; 0x40
 80026f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026fc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002704:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002706:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002708:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800270c:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800270e:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002710:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002712:	6225      	str	r5, [r4, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002714:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002716:	f7fe f9c9 	bl	8000aac <HAL_DMA_Init>
 800271a:	b118      	cbz	r0, 8002724 <HAL_UART_MspInit+0x78>
    {
      _Error_Handler(__FILE__, __LINE__);
 800271c:	2182      	movs	r1, #130	; 0x82
 800271e:	4817      	ldr	r0, [pc, #92]	; (800277c <HAL_UART_MspInit+0xd0>)
 8002720:	f7ff ff12 	bl	8002548 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002724:	6334      	str	r4, [r6, #48]	; 0x30
 8002726:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002728:	b008      	add	sp, #32
 800272a:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <HAL_UART_MspInit+0xd4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d1fa      	bne.n	8002728 <HAL_UART_MspInit+0x7c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	9302      	str	r3, [sp, #8]
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_UART_MspInit+0xc0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	480d      	ldr	r0, [pc, #52]	; (8002770 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800273a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800273c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002748:	9302      	str	r3, [sp, #8]
 800274a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800274c:	230c      	movs	r3, #12
 800274e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002754:	2301      	movs	r3, #1
 8002756:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800275e:	2307      	movs	r3, #7
 8002760:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002762:	f7fe fb19 	bl	8000d98 <HAL_GPIO_Init>
}
 8002766:	e7df      	b.n	8002728 <HAL_UART_MspInit+0x7c>
 8002768:	40011000 	.word	0x40011000
 800276c:	40023800 	.word	0x40023800
 8002770:	40020000 	.word	0x40020000
 8002774:	200001ac 	.word	0x200001ac
 8002778:	400264b8 	.word	0x400264b8
 800277c:	08002ddd 	.word	0x08002ddd
 8002780:	40004400 	.word	0x40004400

08002784 <init_xpritf>:
/* Put a character                              */
/*----------------------------------------------*/


void init_xpritf(UART_HandleTypeDef *handler){
	huart_xprintf = handler;
 8002784:	4b01      	ldr	r3, [pc, #4]	; (800278c <init_xpritf+0x8>)
 8002786:	6018      	str	r0, [r3, #0]
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000140 	.word	0x20000140

08002790 <uart_putc>:
	    HAL_UART_Receive(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
void uart_putc(uint8_t c)
	{
 8002790:	b507      	push	{r0, r1, r2, lr}
	 char buf[1];
	 buf[0] = c;
 8002792:	a902      	add	r1, sp, #8
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8002794:	f64f 73ff 	movw	r3, #65535	; 0xffff
	 buf[0] = c;
 8002798:	f801 0d04 	strb.w	r0, [r1, #-4]!
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 800279c:	4803      	ldr	r0, [pc, #12]	; (80027ac <uart_putc+0x1c>)
 800279e:	2201      	movs	r2, #1
 80027a0:	6800      	ldr	r0, [r0, #0]
 80027a2:	f7ff f859 	bl	8001858 <HAL_UART_Transmit>
	}
 80027a6:	b003      	add	sp, #12
 80027a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80027ac:	20000140 	.word	0x20000140

080027b0 <xputc>:
	    }
	}

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 80027b0:	280a      	cmp	r0, #10
{
 80027b2:	b510      	push	{r4, lr}
 80027b4:	4604      	mov	r4, r0
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 80027b6:	d102      	bne.n	80027be <xputc+0xe>
 80027b8:	200d      	movs	r0, #13
 80027ba:	f7ff fff9 	bl	80027b0 <xputc>

	if (outptr) {
 80027be:	4a07      	ldr	r2, [pc, #28]	; (80027dc <xputc+0x2c>)
 80027c0:	6813      	ldr	r3, [r2, #0]
 80027c2:	b11b      	cbz	r3, 80027cc <xputc+0x1c>
		*outptr++ = (unsigned char)c;
 80027c4:	1c59      	adds	r1, r3, #1
 80027c6:	701c      	strb	r4, [r3, #0]
 80027c8:	6011      	str	r1, [r2, #0]
		return;
 80027ca:	bd10      	pop	{r4, pc}
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <xputc+0x30>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	b11b      	cbz	r3, 80027da <xputc+0x2a>
 80027d2:	4620      	mov	r0, r4
}
 80027d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (xfunc_out) xfunc_out((unsigned char)c);
 80027d8:	4718      	bx	r3
 80027da:	bd10      	pop	{r4, pc}
 80027dc:	2000002c 	.word	0x2000002c
 80027e0:	20000290 	.word	0x20000290

080027e4 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 80027e4:	b510      	push	{r4, lr}
 80027e6:	1e44      	subs	r4, r0, #1
	while (*str)
 80027e8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80027ec:	b900      	cbnz	r0, 80027f0 <xputs+0xc>
		xputc(*str++);
}
 80027ee:	bd10      	pop	{r4, pc}
		xputc(*str++);
 80027f0:	f7ff ffde 	bl	80027b0 <xputc>
 80027f4:	e7f8      	b.n	80027e8 <xputs+0x4>

080027f6 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 80027f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027fa:	4602      	mov	r2, r0
 80027fc:	460d      	mov	r5, r1
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 80027fe:	7810      	ldrb	r0, [r2, #0]
		if (!c) break;				/* End of format? */
 8002800:	2800      	cmp	r0, #0
 8002802:	f000 80ca 	beq.w	800299a <xvprintf+0x1a4>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8002806:	2825      	cmp	r0, #37	; 0x25
 8002808:	d004      	beq.n	8002814 <xvprintf+0x1e>
		c = *fmt++;					/* Get a char */
 800280a:	1c57      	adds	r7, r2, #1
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 800280c:	f7ff ffd0 	bl	80027b0 <xputc>
 8002810:	462c      	mov	r4, r5
 8002812:	e052      	b.n	80028ba <xvprintf+0xc4>
		c = *fmt++;					/* Get first char of the sequense */
 8002814:	7853      	ldrb	r3, [r2, #1]
		if (c == '0') {				/* Flag: '0' padded */
 8002816:	2b30      	cmp	r3, #48	; 0x30
 8002818:	d128      	bne.n	800286c <xvprintf+0x76>
			f = 1; c = *fmt++;
 800281a:	7893      	ldrb	r3, [r2, #2]
 800281c:	1cd7      	adds	r7, r2, #3
 800281e:	2601      	movs	r6, #1
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8002820:	f04f 0800 	mov.w	r8, #0
			w = w * 10 + c - '0';
 8002824:	210a      	movs	r1, #10
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8002826:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800282a:	2a09      	cmp	r2, #9
 800282c:	d927      	bls.n	800287e <xvprintf+0x88>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800282e:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8002832:	2a4c      	cmp	r2, #76	; 0x4c
			f |= 4; c = *fmt++;
 8002834:	bf02      	ittt	eq
 8002836:	783b      	ldrbeq	r3, [r7, #0]
 8002838:	f046 0604 	orreq.w	r6, r6, #4
 800283c:	3701      	addeq	r7, #1
		if (!c) break;				/* End of format? */
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80ab 	beq.w	800299a <xvprintf+0x1a4>
		if (d >= 'a') d -= 0x20;
 8002844:	2b60      	cmp	r3, #96	; 0x60
 8002846:	bf86      	itte	hi
 8002848:	f1a3 0220 	subhi.w	r2, r3, #32
 800284c:	b2d2      	uxtbhi	r2, r2
 800284e:	461a      	movls	r2, r3
		switch (d) {				/* Type is... */
 8002850:	2a4f      	cmp	r2, #79	; 0x4f
 8002852:	d035      	beq.n	80028c0 <xvprintf+0xca>
 8002854:	d81a      	bhi.n	800288c <xvprintf+0x96>
 8002856:	2a43      	cmp	r2, #67	; 0x43
 8002858:	f000 8088 	beq.w	800296c <xvprintf+0x176>
 800285c:	2a44      	cmp	r2, #68	; 0x44
 800285e:	f000 808e 	beq.w	800297e <xvprintf+0x188>
 8002862:	2a42      	cmp	r2, #66	; 0x42
 8002864:	f000 8089 	beq.w	800297a <xvprintf+0x184>
			xputc(c); continue;
 8002868:	4618      	mov	r0, r3
 800286a:	e7cf      	b.n	800280c <xvprintf+0x16>
			if (c == '-') {			/* Flag: left justified */
 800286c:	2b2d      	cmp	r3, #45	; 0x2d
		c = *fmt++;					/* Get first char of the sequense */
 800286e:	bf19      	ittee	ne
 8002870:	1c97      	addne	r7, r2, #2
		f = 0;
 8002872:	2600      	movne	r6, #0
				f = 2; c = *fmt++;
 8002874:	1cd7      	addeq	r7, r2, #3
 8002876:	7893      	ldrbeq	r3, [r2, #2]
 8002878:	bf08      	it	eq
 800287a:	2602      	moveq	r6, #2
 800287c:	e7d0      	b.n	8002820 <xvprintf+0x2a>
			w = w * 10 + c - '0';
 800287e:	fb01 3808 	mla	r8, r1, r8, r3
 8002882:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8002886:	f817 3b01 	ldrb.w	r3, [r7], #1
 800288a:	e7cc      	b.n	8002826 <xvprintf+0x30>
		switch (d) {				/* Type is... */
 800288c:	2a55      	cmp	r2, #85	; 0x55
 800288e:	d076      	beq.n	800297e <xvprintf+0x188>
 8002890:	2a58      	cmp	r2, #88	; 0x58
 8002892:	d070      	beq.n	8002976 <xvprintf+0x180>
 8002894:	2a53      	cmp	r2, #83	; 0x53
 8002896:	d1e7      	bne.n	8002868 <xvprintf+0x72>
			p = va_arg(arp, char*);
 8002898:	f8d5 9000 	ldr.w	r9, [r5]
 800289c:	1d2c      	adds	r4, r5, #4
			for (j = 0; p[j]; j++) ;
 800289e:	464b      	mov	r3, r9
 80028a0:	eba3 0509 	sub.w	r5, r3, r9
 80028a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028a8:	2a00      	cmp	r2, #0
 80028aa:	d1f9      	bne.n	80028a0 <xvprintf+0xaa>
			while (!(f & 2) && j++ < w) xputc(' ');
 80028ac:	07b0      	lsls	r0, r6, #30
 80028ae:	d552      	bpl.n	8002956 <xvprintf+0x160>
			xputs(p);
 80028b0:	4648      	mov	r0, r9
 80028b2:	f7ff ff97 	bl	80027e4 <xputs>
			while (j++ < w) xputc(' ');
 80028b6:	45a8      	cmp	r8, r5
 80028b8:	d853      	bhi.n	8002962 <xvprintf+0x16c>
			xputc(c); continue;
 80028ba:	4625      	mov	r5, r4
 80028bc:	463a      	mov	r2, r7
 80028be:	e79e      	b.n	80027fe <xvprintf+0x8>
			r = 8; break;
 80028c0:	2008      	movs	r0, #8
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 80028c2:	2a44      	cmp	r2, #68	; 0x44
 80028c4:	6829      	ldr	r1, [r5, #0]
 80028c6:	f105 0404 	add.w	r4, r5, #4
 80028ca:	d104      	bne.n	80028d6 <xvprintf+0xe0>
		if (d == 'D' && (v & 0x80000000)) {
 80028cc:	2900      	cmp	r1, #0
			v = 0 - v;
 80028ce:	bfbc      	itt	lt
 80028d0:	4249      	neglt	r1, r1
			f |= 8;
 80028d2:	f046 0608 	orrlt.w	r6, r6, #8
 80028d6:	2b78      	cmp	r3, #120	; 0x78
 80028d8:	bf0c      	ite	eq
 80028da:	f04f 0c27 	moveq.w	ip, #39	; 0x27
 80028de:	f04f 0c07 	movne.w	ip, #7
		}
		i = 0;
 80028e2:	2200      	movs	r2, #0
		do {
			d = (char)(v % r); v /= r;
 80028e4:	fbb1 fef0 	udiv	lr, r1, r0
 80028e8:	fb00 151e 	mls	r5, r0, lr, r1
 80028ec:	b2eb      	uxtb	r3, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80028ee:	2d09      	cmp	r5, #9
 80028f0:	bf84      	itt	hi
 80028f2:	4463      	addhi	r3, ip
 80028f4:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 80028f6:	3330      	adds	r3, #48	; 0x30
			d = (char)(v % r); v /= r;
 80028f8:	4671      	mov	r1, lr
			s[i++] = d + '0';
 80028fa:	1c55      	adds	r5, r2, #1
 80028fc:	f80d 3002 	strb.w	r3, [sp, r2]
		} while (v && i < sizeof(s));
 8002900:	f1be 0f00 	cmp.w	lr, #0
 8002904:	d002      	beq.n	800290c <xvprintf+0x116>
 8002906:	2d10      	cmp	r5, #16
 8002908:	d13b      	bne.n	8002982 <xvprintf+0x18c>
 800290a:	220f      	movs	r2, #15
		if (f & 8) s[i++] = '-';
 800290c:	0731      	lsls	r1, r6, #28
 800290e:	d505      	bpl.n	800291c <xvprintf+0x126>
 8002910:	ab04      	add	r3, sp, #16
 8002912:	441d      	add	r5, r3
 8002914:	232d      	movs	r3, #45	; 0x2d
 8002916:	f805 3c10 	strb.w	r3, [r5, #-16]
 800291a:	1c95      	adds	r5, r2, #2
		j = i; d = (f & 1) ? '0' : ' ';
 800291c:	f016 0f01 	tst.w	r6, #1
 8002920:	bf14      	ite	ne
 8002922:	f04f 0a30 	movne.w	sl, #48	; 0x30
 8002926:	f04f 0a20 	moveq.w	sl, #32
		while (!(f & 2) && j++ < w) xputc(d);
 800292a:	07b3      	lsls	r3, r6, #30
		j = i; d = (f & 1) ? '0' : ' ';
 800292c:	46a9      	mov	r9, r5
		while (!(f & 2) && j++ < w) xputc(d);
 800292e:	d52e      	bpl.n	800298e <xvprintf+0x198>
		do xputc(s[--i]); while(i);
 8002930:	3d01      	subs	r5, #1
 8002932:	f81d 0005 	ldrb.w	r0, [sp, r5]
 8002936:	f7ff ff3b 	bl	80027b0 <xputc>
 800293a:	2d00      	cmp	r5, #0
 800293c:	d1f8      	bne.n	8002930 <xvprintf+0x13a>
		while (j++ < w) xputc(' ');
 800293e:	45c8      	cmp	r8, r9
 8002940:	d9bb      	bls.n	80028ba <xvprintf+0xc4>
 8002942:	2020      	movs	r0, #32
 8002944:	f7ff ff34 	bl	80027b0 <xputc>
 8002948:	f109 0901 	add.w	r9, r9, #1
 800294c:	e7f7      	b.n	800293e <xvprintf+0x148>
			while (!(f & 2) && j++ < w) xputc(' ');
 800294e:	2020      	movs	r0, #32
 8002950:	f7ff ff2e 	bl	80027b0 <xputc>
 8002954:	4635      	mov	r5, r6
 8002956:	4545      	cmp	r5, r8
 8002958:	f105 0601 	add.w	r6, r5, #1
 800295c:	d3f7      	bcc.n	800294e <xvprintf+0x158>
 800295e:	4635      	mov	r5, r6
 8002960:	e7a6      	b.n	80028b0 <xvprintf+0xba>
			while (j++ < w) xputc(' ');
 8002962:	2020      	movs	r0, #32
 8002964:	f7ff ff24 	bl	80027b0 <xputc>
 8002968:	3501      	adds	r5, #1
 800296a:	e7a4      	b.n	80028b6 <xvprintf+0xc0>
			xputc((char)va_arg(arp, int)); continue;
 800296c:	7828      	ldrb	r0, [r5, #0]
 800296e:	1d2c      	adds	r4, r5, #4
 8002970:	f7ff ff1e 	bl	80027b0 <xputc>
 8002974:	e7a1      	b.n	80028ba <xvprintf+0xc4>
			r = 16; break;
 8002976:	2010      	movs	r0, #16
 8002978:	e7a3      	b.n	80028c2 <xvprintf+0xcc>
			r = 2; break;
 800297a:	2002      	movs	r0, #2
 800297c:	e7a1      	b.n	80028c2 <xvprintf+0xcc>
			r = 10; break;
 800297e:	200a      	movs	r0, #10
 8002980:	e79f      	b.n	80028c2 <xvprintf+0xcc>
 8002982:	462a      	mov	r2, r5
 8002984:	e7ae      	b.n	80028e4 <xvprintf+0xee>
		while (!(f & 2) && j++ < w) xputc(d);
 8002986:	4650      	mov	r0, sl
 8002988:	f7ff ff12 	bl	80027b0 <xputc>
 800298c:	46b1      	mov	r9, r6
 800298e:	45c1      	cmp	r9, r8
 8002990:	f109 0601 	add.w	r6, r9, #1
 8002994:	d3f7      	bcc.n	8002986 <xvprintf+0x190>
 8002996:	46b1      	mov	r9, r6
 8002998:	e7ca      	b.n	8002930 <xvprintf+0x13a>
	}
}
 800299a:	b004      	add	sp, #16
 800299c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080029a0 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 80029a0:	b40f      	push	{r0, r1, r2, r3}
 80029a2:	b507      	push	{r0, r1, r2, lr}
 80029a4:	a904      	add	r1, sp, #16
 80029a6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list arp;


	va_start(arp, fmt);
 80029aa:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 80029ac:	f7ff ff23 	bl	80027f6 <xvprintf>
	va_end(arp);
}
 80029b0:	b003      	add	sp, #12
 80029b2:	f85d eb04 	ldr.w	lr, [sp], #4
 80029b6:	b004      	add	sp, #16
 80029b8:	4770      	bx	lr
	...

080029bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029c2:	e003      	b.n	80029cc <LoopCopyDataInit>

080029c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029ca:	3104      	adds	r1, #4

080029cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029cc:	480b      	ldr	r0, [pc, #44]	; (80029fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029d4:	d3f6      	bcc.n	80029c4 <CopyDataInit>
  ldr  r2, =_sbss
 80029d6:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029d8:	e002      	b.n	80029e0 <LoopFillZerobss>

080029da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029dc:	f842 3b04 	str.w	r3, [r2], #4

080029e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029e4:	d3f9      	bcc.n	80029da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029e6:	f7ff fdfb 	bl	80025e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ea:	f000 f811 	bl	8002a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ee:	f7ff f9d9 	bl	8001da4 <main>
  bx  lr    
 80029f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80029f8:	08002dfc 	.word	0x08002dfc
  ldr  r0, =_sdata
 80029fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a00:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8002a04:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8002a08:	20000294 	.word	0x20000294

08002a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <ADC_IRQHandler>
	...

08002a10 <__libc_init_array>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	4e0d      	ldr	r6, [pc, #52]	; (8002a48 <__libc_init_array+0x38>)
 8002a14:	4c0d      	ldr	r4, [pc, #52]	; (8002a4c <__libc_init_array+0x3c>)
 8002a16:	1ba4      	subs	r4, r4, r6
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	2500      	movs	r5, #0
 8002a1c:	42a5      	cmp	r5, r4
 8002a1e:	d109      	bne.n	8002a34 <__libc_init_array+0x24>
 8002a20:	4e0b      	ldr	r6, [pc, #44]	; (8002a50 <__libc_init_array+0x40>)
 8002a22:	4c0c      	ldr	r4, [pc, #48]	; (8002a54 <__libc_init_array+0x44>)
 8002a24:	f000 f988 	bl	8002d38 <_init>
 8002a28:	1ba4      	subs	r4, r4, r6
 8002a2a:	10a4      	asrs	r4, r4, #2
 8002a2c:	2500      	movs	r5, #0
 8002a2e:	42a5      	cmp	r5, r4
 8002a30:	d105      	bne.n	8002a3e <__libc_init_array+0x2e>
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
 8002a34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a38:	4798      	blx	r3
 8002a3a:	3501      	adds	r5, #1
 8002a3c:	e7ee      	b.n	8002a1c <__libc_init_array+0xc>
 8002a3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a42:	4798      	blx	r3
 8002a44:	3501      	adds	r5, #1
 8002a46:	e7f2      	b.n	8002a2e <__libc_init_array+0x1e>
 8002a48:	08002df4 	.word	0x08002df4
 8002a4c:	08002df4 	.word	0x08002df4
 8002a50:	08002df4 	.word	0x08002df4
 8002a54:	08002df8 	.word	0x08002df8

08002a58 <swapfunc>:
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	b530      	push	{r4, r5, lr}
 8002a5c:	dc0a      	bgt.n	8002a74 <swapfunc+0x1c>
 8002a5e:	0892      	lsrs	r2, r2, #2
 8002a60:	3a01      	subs	r2, #1
 8002a62:	6803      	ldr	r3, [r0, #0]
 8002a64:	680c      	ldr	r4, [r1, #0]
 8002a66:	f840 4b04 	str.w	r4, [r0], #4
 8002a6a:	2a00      	cmp	r2, #0
 8002a6c:	f841 3b04 	str.w	r3, [r1], #4
 8002a70:	dcf6      	bgt.n	8002a60 <swapfunc+0x8>
 8002a72:	bd30      	pop	{r4, r5, pc}
 8002a74:	4603      	mov	r3, r0
 8002a76:	780d      	ldrb	r5, [r1, #0]
 8002a78:	781c      	ldrb	r4, [r3, #0]
 8002a7a:	f803 5b01 	strb.w	r5, [r3], #1
 8002a7e:	f801 4b01 	strb.w	r4, [r1], #1
 8002a82:	1ad4      	subs	r4, r2, r3
 8002a84:	4404      	add	r4, r0
 8002a86:	2c00      	cmp	r4, #0
 8002a88:	dcf5      	bgt.n	8002a76 <swapfunc+0x1e>
 8002a8a:	bd30      	pop	{r4, r5, pc}

08002a8c <med3.isra.1>:
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	460c      	mov	r4, r1
 8002a90:	4615      	mov	r5, r2
 8002a92:	4607      	mov	r7, r0
 8002a94:	461e      	mov	r6, r3
 8002a96:	4798      	blx	r3
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	da0a      	bge.n	8002ab6 <med3.isra.1+0x2a>
 8002aa0:	47b0      	blx	r6
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	db05      	blt.n	8002ab2 <med3.isra.1+0x26>
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	4638      	mov	r0, r7
 8002aaa:	47b0      	blx	r6
 8002aac:	2800      	cmp	r0, #0
 8002aae:	db0a      	blt.n	8002ac6 <med3.isra.1+0x3a>
 8002ab0:	463c      	mov	r4, r7
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab6:	47b0      	blx	r6
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	dcfa      	bgt.n	8002ab2 <med3.isra.1+0x26>
 8002abc:	4629      	mov	r1, r5
 8002abe:	4638      	mov	r0, r7
 8002ac0:	47b0      	blx	r6
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	dbf4      	blt.n	8002ab0 <med3.isra.1+0x24>
 8002ac6:	462c      	mov	r4, r5
 8002ac8:	e7f3      	b.n	8002ab2 <med3.isra.1+0x26>

08002aca <qsort>:
 8002aca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	4606      	mov	r6, r0
 8002ad2:	468b      	mov	fp, r1
 8002ad4:	4614      	mov	r4, r2
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	07b2      	lsls	r2, r6, #30
 8002ada:	d113      	bne.n	8002b04 <qsort+0x3a>
 8002adc:	07a3      	lsls	r3, r4, #30
 8002ade:	d111      	bne.n	8002b04 <qsort+0x3a>
 8002ae0:	f1b4 0804 	subs.w	r8, r4, #4
 8002ae4:	bf18      	it	ne
 8002ae6:	f04f 0801 	movne.w	r8, #1
 8002aea:	1933      	adds	r3, r6, r4
 8002aec:	f1bb 0f06 	cmp.w	fp, #6
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	d829      	bhi.n	8002b48 <qsort+0x7e>
 8002af4:	461f      	mov	r7, r3
 8002af6:	fb04 6b0b 	mla	fp, r4, fp, r6
 8002afa:	455f      	cmp	r7, fp
 8002afc:	f080 8119 	bcs.w	8002d32 <qsort+0x268>
 8002b00:	46b9      	mov	r9, r7
 8002b02:	e01d      	b.n	8002b40 <qsort+0x76>
 8002b04:	f04f 0802 	mov.w	r8, #2
 8002b08:	e7ef      	b.n	8002aea <qsort+0x20>
 8002b0a:	4643      	mov	r3, r8
 8002b0c:	4622      	mov	r2, r4
 8002b0e:	4651      	mov	r1, sl
 8002b10:	4648      	mov	r0, r9
 8002b12:	f7ff ffa1 	bl	8002a58 <swapfunc>
 8002b16:	e012      	b.n	8002b3e <qsort+0x74>
 8002b18:	eba9 0a04 	sub.w	sl, r9, r4
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	4650      	mov	r0, sl
 8002b20:	9b00      	ldr	r3, [sp, #0]
 8002b22:	4798      	blx	r3
 8002b24:	2800      	cmp	r0, #0
 8002b26:	dd0d      	ble.n	8002b44 <qsort+0x7a>
 8002b28:	f1b8 0f00 	cmp.w	r8, #0
 8002b2c:	d1ed      	bne.n	8002b0a <qsort+0x40>
 8002b2e:	f8d9 3000 	ldr.w	r3, [r9]
 8002b32:	f8da 2000 	ldr.w	r2, [sl]
 8002b36:	f8c9 2000 	str.w	r2, [r9]
 8002b3a:	f8ca 3000 	str.w	r3, [sl]
 8002b3e:	46d1      	mov	r9, sl
 8002b40:	454e      	cmp	r6, r9
 8002b42:	d3e9      	bcc.n	8002b18 <qsort+0x4e>
 8002b44:	4427      	add	r7, r4
 8002b46:	e7d8      	b.n	8002afa <qsort+0x30>
 8002b48:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8002b4c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002b50:	f1bb 0f07 	cmp.w	fp, #7
 8002b54:	fb04 6505 	mla	r5, r4, r5, r6
 8002b58:	9301      	str	r3, [sp, #4]
 8002b5a:	d024      	beq.n	8002ba6 <qsort+0xdc>
 8002b5c:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8002b60:	fb04 6903 	mla	r9, r4, r3, r6
 8002b64:	d951      	bls.n	8002c0a <qsort+0x140>
 8002b66:	ea4f 07db 	mov.w	r7, fp, lsr #3
 8002b6a:	4367      	muls	r7, r4
 8002b6c:	19f1      	adds	r1, r6, r7
 8002b6e:	19ca      	adds	r2, r1, r7
 8002b70:	9b00      	ldr	r3, [sp, #0]
 8002b72:	4630      	mov	r0, r6
 8002b74:	f7ff ff8a 	bl	8002a8c <med3.isra.1>
 8002b78:	19ea      	adds	r2, r5, r7
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	9b00      	ldr	r3, [sp, #0]
 8002b7e:	4682      	mov	sl, r0
 8002b80:	1be8      	subs	r0, r5, r7
 8002b82:	f7ff ff83 	bl	8002a8c <med3.isra.1>
 8002b86:	4605      	mov	r5, r0
 8002b88:	eba9 0047 	sub.w	r0, r9, r7, lsl #1
 8002b8c:	464a      	mov	r2, r9
 8002b8e:	9b00      	ldr	r3, [sp, #0]
 8002b90:	19c1      	adds	r1, r0, r7
 8002b92:	f7ff ff7b 	bl	8002a8c <med3.isra.1>
 8002b96:	4681      	mov	r9, r0
 8002b98:	4629      	mov	r1, r5
 8002b9a:	9b00      	ldr	r3, [sp, #0]
 8002b9c:	464a      	mov	r2, r9
 8002b9e:	4650      	mov	r0, sl
 8002ba0:	f7ff ff74 	bl	8002a8c <med3.isra.1>
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	f1b8 0f00 	cmp.w	r8, #0
 8002baa:	d130      	bne.n	8002c0e <qsort+0x144>
 8002bac:	6833      	ldr	r3, [r6, #0]
 8002bae:	682a      	ldr	r2, [r5, #0]
 8002bb0:	6032      	str	r2, [r6, #0]
 8002bb2:	602b      	str	r3, [r5, #0]
 8002bb4:	9b01      	ldr	r3, [sp, #4]
 8002bb6:	1937      	adds	r7, r6, r4
 8002bb8:	fb04 6503 	mla	r5, r4, r3, r6
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	9302      	str	r3, [sp, #8]
 8002bc0:	46a9      	mov	r9, r5
 8002bc2:	9701      	str	r7, [sp, #4]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9a02      	ldr	r2, [sp, #8]
 8002bc8:	eba2 0a04 	sub.w	sl, r2, r4
 8002bcc:	4555      	cmp	r5, sl
 8002bce:	f0c0 80aa 	bcc.w	8002d26 <qsort+0x25c>
 8002bd2:	9303      	str	r3, [sp, #12]
 8002bd4:	4631      	mov	r1, r6
 8002bd6:	9b00      	ldr	r3, [sp, #0]
 8002bd8:	4650      	mov	r0, sl
 8002bda:	4798      	blx	r3
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	9b03      	ldr	r3, [sp, #12]
 8002be0:	dc31      	bgt.n	8002c46 <qsort+0x17c>
 8002be2:	d10e      	bne.n	8002c02 <qsort+0x138>
 8002be4:	f1b8 0f00 	cmp.w	r8, #0
 8002be8:	d118      	bne.n	8002c1c <qsort+0x152>
 8002bea:	9b01      	ldr	r3, [sp, #4]
 8002bec:	9901      	ldr	r1, [sp, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8da 2000 	ldr.w	r2, [sl]
 8002bf4:	600a      	str	r2, [r1, #0]
 8002bf6:	f8ca 3000 	str.w	r3, [sl]
 8002bfa:	9b01      	ldr	r3, [sp, #4]
 8002bfc:	4423      	add	r3, r4
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	2301      	movs	r3, #1
 8002c02:	9a02      	ldr	r2, [sp, #8]
 8002c04:	4422      	add	r2, r4
 8002c06:	9202      	str	r2, [sp, #8]
 8002c08:	e7dd      	b.n	8002bc6 <qsort+0xfc>
 8002c0a:	46b2      	mov	sl, r6
 8002c0c:	e7c4      	b.n	8002b98 <qsort+0xce>
 8002c0e:	4643      	mov	r3, r8
 8002c10:	4622      	mov	r2, r4
 8002c12:	4629      	mov	r1, r5
 8002c14:	4630      	mov	r0, r6
 8002c16:	f7ff ff1f 	bl	8002a58 <swapfunc>
 8002c1a:	e7cb      	b.n	8002bb4 <qsort+0xea>
 8002c1c:	4643      	mov	r3, r8
 8002c1e:	4622      	mov	r2, r4
 8002c20:	4651      	mov	r1, sl
 8002c22:	9801      	ldr	r0, [sp, #4]
 8002c24:	f7ff ff18 	bl	8002a58 <swapfunc>
 8002c28:	e7e7      	b.n	8002bfa <qsort+0x130>
 8002c2a:	d10b      	bne.n	8002c44 <qsort+0x17a>
 8002c2c:	f1b8 0f00 	cmp.w	r8, #0
 8002c30:	d11d      	bne.n	8002c6e <qsort+0x1a4>
 8002c32:	682b      	ldr	r3, [r5, #0]
 8002c34:	f8d9 2000 	ldr.w	r2, [r9]
 8002c38:	602a      	str	r2, [r5, #0]
 8002c3a:	f8c9 3000 	str.w	r3, [r9]
 8002c3e:	eba9 0904 	sub.w	r9, r9, r4
 8002c42:	2301      	movs	r3, #1
 8002c44:	1b2d      	subs	r5, r5, r4
 8002c46:	4555      	cmp	r5, sl
 8002c48:	d36d      	bcc.n	8002d26 <qsort+0x25c>
 8002c4a:	9303      	str	r3, [sp, #12]
 8002c4c:	4631      	mov	r1, r6
 8002c4e:	9b00      	ldr	r3, [sp, #0]
 8002c50:	4628      	mov	r0, r5
 8002c52:	4798      	blx	r3
 8002c54:	2800      	cmp	r0, #0
 8002c56:	9b03      	ldr	r3, [sp, #12]
 8002c58:	dae7      	bge.n	8002c2a <qsort+0x160>
 8002c5a:	f1b8 0f00 	cmp.w	r8, #0
 8002c5e:	d00d      	beq.n	8002c7c <qsort+0x1b2>
 8002c60:	4643      	mov	r3, r8
 8002c62:	4622      	mov	r2, r4
 8002c64:	4629      	mov	r1, r5
 8002c66:	4650      	mov	r0, sl
 8002c68:	f7ff fef6 	bl	8002a58 <swapfunc>
 8002c6c:	e00c      	b.n	8002c88 <qsort+0x1be>
 8002c6e:	4643      	mov	r3, r8
 8002c70:	4622      	mov	r2, r4
 8002c72:	4649      	mov	r1, r9
 8002c74:	4628      	mov	r0, r5
 8002c76:	f7ff feef 	bl	8002a58 <swapfunc>
 8002c7a:	e7e0      	b.n	8002c3e <qsort+0x174>
 8002c7c:	f8da 3000 	ldr.w	r3, [sl]
 8002c80:	682a      	ldr	r2, [r5, #0]
 8002c82:	f8ca 2000 	str.w	r2, [sl]
 8002c86:	602b      	str	r3, [r5, #0]
 8002c88:	1b2d      	subs	r5, r5, r4
 8002c8a:	e7b9      	b.n	8002c00 <qsort+0x136>
 8002c8c:	4643      	mov	r3, r8
 8002c8e:	4622      	mov	r2, r4
 8002c90:	4649      	mov	r1, r9
 8002c92:	4628      	mov	r0, r5
 8002c94:	f7ff fee0 	bl	8002a58 <swapfunc>
 8002c98:	e010      	b.n	8002cbc <qsort+0x1f2>
 8002c9a:	eba5 0904 	sub.w	r9, r5, r4
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	4648      	mov	r0, r9
 8002ca2:	9b00      	ldr	r3, [sp, #0]
 8002ca4:	4798      	blx	r3
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	dd0b      	ble.n	8002cc2 <qsort+0x1f8>
 8002caa:	f1b8 0f00 	cmp.w	r8, #0
 8002cae:	d1ed      	bne.n	8002c8c <qsort+0x1c2>
 8002cb0:	682b      	ldr	r3, [r5, #0]
 8002cb2:	f8d9 2000 	ldr.w	r2, [r9]
 8002cb6:	602a      	str	r2, [r5, #0]
 8002cb8:	f8c9 3000 	str.w	r3, [r9]
 8002cbc:	464d      	mov	r5, r9
 8002cbe:	42ae      	cmp	r6, r5
 8002cc0:	d3eb      	bcc.n	8002c9a <qsort+0x1d0>
 8002cc2:	4427      	add	r7, r4
 8002cc4:	455f      	cmp	r7, fp
 8002cc6:	d234      	bcs.n	8002d32 <qsort+0x268>
 8002cc8:	463d      	mov	r5, r7
 8002cca:	e7f8      	b.n	8002cbe <qsort+0x1f4>
 8002ccc:	9b01      	ldr	r3, [sp, #4]
 8002cce:	eb06 070b 	add.w	r7, r6, fp
 8002cd2:	1b9a      	subs	r2, r3, r6
 8002cd4:	ebaa 0b03 	sub.w	fp, sl, r3
 8002cd8:	455a      	cmp	r2, fp
 8002cda:	bfa8      	it	ge
 8002cdc:	465a      	movge	r2, fp
 8002cde:	b12a      	cbz	r2, 8002cec <qsort+0x222>
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	ebaa 0102 	sub.w	r1, sl, r2
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	f7ff feb6 	bl	8002a58 <swapfunc>
 8002cec:	eba7 0209 	sub.w	r2, r7, r9
 8002cf0:	eba9 0505 	sub.w	r5, r9, r5
 8002cf4:	1b12      	subs	r2, r2, r4
 8002cf6:	42aa      	cmp	r2, r5
 8002cf8:	bf28      	it	cs
 8002cfa:	462a      	movcs	r2, r5
 8002cfc:	b122      	cbz	r2, 8002d08 <qsort+0x23e>
 8002cfe:	4643      	mov	r3, r8
 8002d00:	1ab9      	subs	r1, r7, r2
 8002d02:	4650      	mov	r0, sl
 8002d04:	f7ff fea8 	bl	8002a58 <swapfunc>
 8002d08:	455c      	cmp	r4, fp
 8002d0a:	d206      	bcs.n	8002d1a <qsort+0x250>
 8002d0c:	fbbb f1f4 	udiv	r1, fp, r4
 8002d10:	9b00      	ldr	r3, [sp, #0]
 8002d12:	4622      	mov	r2, r4
 8002d14:	4630      	mov	r0, r6
 8002d16:	f7ff fed8 	bl	8002aca <qsort>
 8002d1a:	42ac      	cmp	r4, r5
 8002d1c:	d209      	bcs.n	8002d32 <qsort+0x268>
 8002d1e:	fbb5 fbf4 	udiv	fp, r5, r4
 8002d22:	1b7e      	subs	r6, r7, r5
 8002d24:	e6d8      	b.n	8002ad8 <qsort+0xe>
 8002d26:	fb04 fb0b 	mul.w	fp, r4, fp
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ce      	bne.n	8002ccc <qsort+0x202>
 8002d2e:	44b3      	add	fp, r6
 8002d30:	e7c8      	b.n	8002cc4 <qsort+0x1fa>
 8002d32:	b005      	add	sp, #20
 8002d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d38 <_init>:
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	bf00      	nop
 8002d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3e:	bc08      	pop	{r3}
 8002d40:	469e      	mov	lr, r3
 8002d42:	4770      	bx	lr

08002d44 <_fini>:
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d46:	bf00      	nop
 8002d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4a:	bc08      	pop	{r3}
 8002d4c:	469e      	mov	lr, r3
 8002d4e:	4770      	bx	lr
